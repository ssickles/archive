//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WickedSick.ClientComponents.Music.SDBService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ChunkDataOfSongDataTepVWBla", Namespace="http://sdbservice.wsick.com/Common")]
    [System.SerializableAttribute()]
    public partial class ChunkDataOfSongDataTepVWBla : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.Dictionary<int, WickedSick.ClientComponents.Music.SDBService.SongData> ChunkField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ChunkNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TotalChunksField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<int, WickedSick.ClientComponents.Music.SDBService.SongData> Chunk {
            get {
                return this.ChunkField;
            }
            set {
                if ((object.ReferenceEquals(this.ChunkField, value) != true)) {
                    this.ChunkField = value;
                    this.RaisePropertyChanged("Chunk");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ChunkNumber {
            get {
                return this.ChunkNumberField;
            }
            set {
                if ((this.ChunkNumberField.Equals(value) != true)) {
                    this.ChunkNumberField = value;
                    this.RaisePropertyChanged("ChunkNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TotalChunks {
            get {
                return this.TotalChunksField;
            }
            set {
                if ((this.TotalChunksField.Equals(value) != true)) {
                    this.TotalChunksField = value;
                    this.RaisePropertyChanged("TotalChunks");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SongData", Namespace="http://sdbservice.wsick.com/Common")]
    [System.SerializableAttribute()]
    public partial class SongData : WickedSick.ClientComponents.Music.SDBService.DataClass {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AlbumIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long DurationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FilenameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private short LocationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SongIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TitleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private short TrackNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long UploadDateField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AlbumID {
            get {
                return this.AlbumIDField;
            }
            set {
                if ((this.AlbumIDField.Equals(value) != true)) {
                    this.AlbumIDField = value;
                    this.RaisePropertyChanged("AlbumID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Duration {
            get {
                return this.DurationField;
            }
            set {
                if ((this.DurationField.Equals(value) != true)) {
                    this.DurationField = value;
                    this.RaisePropertyChanged("Duration");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Filename {
            get {
                return this.FilenameField;
            }
            set {
                if ((object.ReferenceEquals(this.FilenameField, value) != true)) {
                    this.FilenameField = value;
                    this.RaisePropertyChanged("Filename");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short Location {
            get {
                return this.LocationField;
            }
            set {
                if ((this.LocationField.Equals(value) != true)) {
                    this.LocationField = value;
                    this.RaisePropertyChanged("Location");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SongID {
            get {
                return this.SongIDField;
            }
            set {
                if ((this.SongIDField.Equals(value) != true)) {
                    this.SongIDField = value;
                    this.RaisePropertyChanged("SongID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short TrackNumber {
            get {
                return this.TrackNumberField;
            }
            set {
                if ((this.TrackNumberField.Equals(value) != true)) {
                    this.TrackNumberField = value;
                    this.RaisePropertyChanged("TrackNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long UploadDate {
            get {
                return this.UploadDateField;
            }
            set {
                if ((this.UploadDateField.Equals(value) != true)) {
                    this.UploadDateField = value;
                    this.RaisePropertyChanged("UploadDate");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ChunkDataOfAlbumDataTepVWBla", Namespace="http://sdbservice.wsick.com/Common")]
    [System.SerializableAttribute()]
    public partial class ChunkDataOfAlbumDataTepVWBla : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.Dictionary<int, WickedSick.ClientComponents.Music.SDBService.AlbumData> ChunkField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ChunkNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TotalChunksField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<int, WickedSick.ClientComponents.Music.SDBService.AlbumData> Chunk {
            get {
                return this.ChunkField;
            }
            set {
                if ((object.ReferenceEquals(this.ChunkField, value) != true)) {
                    this.ChunkField = value;
                    this.RaisePropertyChanged("Chunk");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ChunkNumber {
            get {
                return this.ChunkNumberField;
            }
            set {
                if ((this.ChunkNumberField.Equals(value) != true)) {
                    this.ChunkNumberField = value;
                    this.RaisePropertyChanged("ChunkNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TotalChunks {
            get {
                return this.TotalChunksField;
            }
            set {
                if ((this.TotalChunksField.Equals(value) != true)) {
                    this.TotalChunksField = value;
                    this.RaisePropertyChanged("TotalChunks");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AlbumData", Namespace="http://sdbservice.wsick.com/Common")]
    [System.SerializableAttribute()]
    public partial class AlbumData : WickedSick.ClientComponents.Music.SDBService.DataClass {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AlbumIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ArtFilenameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ArtistIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long ReleaseDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<int> SongIDsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AlbumID {
            get {
                return this.AlbumIDField;
            }
            set {
                if ((this.AlbumIDField.Equals(value) != true)) {
                    this.AlbumIDField = value;
                    this.RaisePropertyChanged("AlbumID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ArtFilename {
            get {
                return this.ArtFilenameField;
            }
            set {
                if ((object.ReferenceEquals(this.ArtFilenameField, value) != true)) {
                    this.ArtFilenameField = value;
                    this.RaisePropertyChanged("ArtFilename");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ArtistID {
            get {
                return this.ArtistIDField;
            }
            set {
                if ((this.ArtistIDField.Equals(value) != true)) {
                    this.ArtistIDField = value;
                    this.RaisePropertyChanged("ArtistID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long ReleaseDate {
            get {
                return this.ReleaseDateField;
            }
            set {
                if ((this.ReleaseDateField.Equals(value) != true)) {
                    this.ReleaseDateField = value;
                    this.RaisePropertyChanged("ReleaseDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<int> SongIDs {
            get {
                return this.SongIDsField;
            }
            set {
                if ((object.ReferenceEquals(this.SongIDsField, value) != true)) {
                    this.SongIDsField = value;
                    this.RaisePropertyChanged("SongIDs");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DataClass", Namespace="http://sdbservice.wsick.com/Common")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(WickedSick.ClientComponents.Music.SDBService.AlbumData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(WickedSick.ClientComponents.Music.SDBService.ArtistData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(WickedSick.ClientComponents.Music.SDBService.AuditData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(WickedSick.ClientComponents.Music.SDBService.PlaylistData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(WickedSick.ClientComponents.Music.SDBService.SongData))]
    public partial class DataClass : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ArtistData", Namespace="http://sdbservice.wsick.com/Common")]
    [System.SerializableAttribute()]
    public partial class ArtistData : WickedSick.ClientComponents.Music.SDBService.DataClass {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<int> AlbumIDsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ArtistIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<int> AlbumIDs {
            get {
                return this.AlbumIDsField;
            }
            set {
                if ((object.ReferenceEquals(this.AlbumIDsField, value) != true)) {
                    this.AlbumIDsField = value;
                    this.RaisePropertyChanged("AlbumIDs");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ArtistID {
            get {
                return this.ArtistIDField;
            }
            set {
                if ((this.ArtistIDField.Equals(value) != true)) {
                    this.ArtistIDField = value;
                    this.RaisePropertyChanged("ArtistID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AuditData", Namespace="http://sdbservice.wsick.com/Common")]
    [System.SerializableAttribute()]
    public partial class AuditData : WickedSick.ClientComponents.Music.SDBService.DataClass {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private WickedSick.ClientComponents.Music.SDBService.AuditTypes AuditTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FieldNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NewValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ObjectIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private WickedSick.ClientComponents.Music.SDBService.ObjectTypes ObjectTypeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WickedSick.ClientComponents.Music.SDBService.AuditTypes AuditType {
            get {
                return this.AuditTypeField;
            }
            set {
                if ((this.AuditTypeField.Equals(value) != true)) {
                    this.AuditTypeField = value;
                    this.RaisePropertyChanged("AuditType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FieldName {
            get {
                return this.FieldNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FieldNameField, value) != true)) {
                    this.FieldNameField = value;
                    this.RaisePropertyChanged("FieldName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NewValue {
            get {
                return this.NewValueField;
            }
            set {
                if ((object.ReferenceEquals(this.NewValueField, value) != true)) {
                    this.NewValueField = value;
                    this.RaisePropertyChanged("NewValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ObjectID {
            get {
                return this.ObjectIDField;
            }
            set {
                if ((this.ObjectIDField.Equals(value) != true)) {
                    this.ObjectIDField = value;
                    this.RaisePropertyChanged("ObjectID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WickedSick.ClientComponents.Music.SDBService.ObjectTypes ObjectType {
            get {
                return this.ObjectTypeField;
            }
            set {
                if ((this.ObjectTypeField.Equals(value) != true)) {
                    this.ObjectTypeField = value;
                    this.RaisePropertyChanged("ObjectType");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PlaylistData", Namespace="http://sdbservice.wsick.com/Common")]
    [System.SerializableAttribute()]
    public partial class PlaylistData : WickedSick.ClientComponents.Music.SDBService.DataClass {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PlaylistIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<int> SongIDsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PlaylistID {
            get {
                return this.PlaylistIDField;
            }
            set {
                if ((this.PlaylistIDField.Equals(value) != true)) {
                    this.PlaylistIDField = value;
                    this.RaisePropertyChanged("PlaylistID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<int> SongIDs {
            get {
                return this.SongIDsField;
            }
            set {
                if ((object.ReferenceEquals(this.SongIDsField, value) != true)) {
                    this.SongIDsField = value;
                    this.RaisePropertyChanged("SongIDs");
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AuditTypes", Namespace="http://schemas.datacontract.org/2004/07/WickedSick.CommonComponents.Music")]
    public enum AuditTypes : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Add = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Remove = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Modify = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ObjectTypes", Namespace="http://schemas.datacontract.org/2004/07/WickedSick.CommonComponents.Music")]
    public enum ObjectTypes : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Song = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Album = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Artist = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Playlist = 3,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ChunkDataOfArtistDataTepVWBla", Namespace="http://sdbservice.wsick.com/Common")]
    [System.SerializableAttribute()]
    public partial class ChunkDataOfArtistDataTepVWBla : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.Dictionary<int, WickedSick.ClientComponents.Music.SDBService.ArtistData> ChunkField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ChunkNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TotalChunksField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<int, WickedSick.ClientComponents.Music.SDBService.ArtistData> Chunk {
            get {
                return this.ChunkField;
            }
            set {
                if ((object.ReferenceEquals(this.ChunkField, value) != true)) {
                    this.ChunkField = value;
                    this.RaisePropertyChanged("Chunk");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ChunkNumber {
            get {
                return this.ChunkNumberField;
            }
            set {
                if ((this.ChunkNumberField.Equals(value) != true)) {
                    this.ChunkNumberField = value;
                    this.RaisePropertyChanged("ChunkNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TotalChunks {
            get {
                return this.TotalChunksField;
            }
            set {
                if ((this.TotalChunksField.Equals(value) != true)) {
                    this.TotalChunksField = value;
                    this.RaisePropertyChanged("TotalChunks");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ChunkDataOfAuditDataTepVWBla", Namespace="http://sdbservice.wsick.com/Common")]
    [System.SerializableAttribute()]
    public partial class ChunkDataOfAuditDataTepVWBla : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.Dictionary<int, WickedSick.ClientComponents.Music.SDBService.AuditData> ChunkField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ChunkNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TotalChunksField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<int, WickedSick.ClientComponents.Music.SDBService.AuditData> Chunk {
            get {
                return this.ChunkField;
            }
            set {
                if ((object.ReferenceEquals(this.ChunkField, value) != true)) {
                    this.ChunkField = value;
                    this.RaisePropertyChanged("Chunk");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ChunkNumber {
            get {
                return this.ChunkNumberField;
            }
            set {
                if ((this.ChunkNumberField.Equals(value) != true)) {
                    this.ChunkNumberField = value;
                    this.RaisePropertyChanged("ChunkNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TotalChunks {
            get {
                return this.TotalChunksField;
            }
            set {
                if ((this.TotalChunksField.Equals(value) != true)) {
                    this.TotalChunksField = value;
                    this.RaisePropertyChanged("TotalChunks");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ChunkDataOfPlaylistDataTepVWBla", Namespace="http://sdbservice.wsick.com/Common")]
    [System.SerializableAttribute()]
    public partial class ChunkDataOfPlaylistDataTepVWBla : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.Dictionary<int, WickedSick.ClientComponents.Music.SDBService.PlaylistData> ChunkField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ChunkNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TotalChunksField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<int, WickedSick.ClientComponents.Music.SDBService.PlaylistData> Chunk {
            get {
                return this.ChunkField;
            }
            set {
                if ((object.ReferenceEquals(this.ChunkField, value) != true)) {
                    this.ChunkField = value;
                    this.RaisePropertyChanged("Chunk");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ChunkNumber {
            get {
                return this.ChunkNumberField;
            }
            set {
                if ((this.ChunkNumberField.Equals(value) != true)) {
                    this.ChunkNumberField = value;
                    this.RaisePropertyChanged("ChunkNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TotalChunks {
            get {
                return this.TotalChunksField;
            }
            set {
                if ((this.TotalChunksField.Equals(value) != true)) {
                    this.TotalChunksField = value;
                    this.RaisePropertyChanged("TotalChunks");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SDBService.ISDBService")]
    public interface ISDBService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISDBService/RequestAllSongs", ReplyAction="http://tempuri.org/ISDBService/RequestAllSongsResponse")]
        WickedSick.ClientComponents.Music.SDBService.ChunkDataOfSongDataTepVWBla RequestAllSongs();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISDBService/RequestAllSongs", ReplyAction="http://tempuri.org/ISDBService/RequestAllSongsResponse")]
        System.IAsyncResult BeginRequestAllSongs(System.AsyncCallback callback, object asyncState);
        
        WickedSick.ClientComponents.Music.SDBService.ChunkDataOfSongDataTepVWBla EndRequestAllSongs(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISDBService/RequestNextSongChunk", ReplyAction="http://tempuri.org/ISDBService/RequestNextSongChunkResponse")]
        WickedSick.ClientComponents.Music.SDBService.ChunkDataOfSongDataTepVWBla RequestNextSongChunk(int ChunkNumber);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISDBService/RequestNextSongChunk", ReplyAction="http://tempuri.org/ISDBService/RequestNextSongChunkResponse")]
        System.IAsyncResult BeginRequestNextSongChunk(int ChunkNumber, System.AsyncCallback callback, object asyncState);
        
        WickedSick.ClientComponents.Music.SDBService.ChunkDataOfSongDataTepVWBla EndRequestNextSongChunk(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISDBService/RequestAllAlbums", ReplyAction="http://tempuri.org/ISDBService/RequestAllAlbumsResponse")]
        WickedSick.ClientComponents.Music.SDBService.ChunkDataOfAlbumDataTepVWBla RequestAllAlbums();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISDBService/RequestAllAlbums", ReplyAction="http://tempuri.org/ISDBService/RequestAllAlbumsResponse")]
        System.IAsyncResult BeginRequestAllAlbums(System.AsyncCallback callback, object asyncState);
        
        WickedSick.ClientComponents.Music.SDBService.ChunkDataOfAlbumDataTepVWBla EndRequestAllAlbums(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISDBService/RequestNextAlbumChunk", ReplyAction="http://tempuri.org/ISDBService/RequestNextAlbumChunkResponse")]
        WickedSick.ClientComponents.Music.SDBService.ChunkDataOfAlbumDataTepVWBla RequestNextAlbumChunk(int ChunkNumber);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISDBService/RequestNextAlbumChunk", ReplyAction="http://tempuri.org/ISDBService/RequestNextAlbumChunkResponse")]
        System.IAsyncResult BeginRequestNextAlbumChunk(int ChunkNumber, System.AsyncCallback callback, object asyncState);
        
        WickedSick.ClientComponents.Music.SDBService.ChunkDataOfAlbumDataTepVWBla EndRequestNextAlbumChunk(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISDBService/RequestAllArtists", ReplyAction="http://tempuri.org/ISDBService/RequestAllArtistsResponse")]
        WickedSick.ClientComponents.Music.SDBService.ChunkDataOfArtistDataTepVWBla RequestAllArtists();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISDBService/RequestAllArtists", ReplyAction="http://tempuri.org/ISDBService/RequestAllArtistsResponse")]
        System.IAsyncResult BeginRequestAllArtists(System.AsyncCallback callback, object asyncState);
        
        WickedSick.ClientComponents.Music.SDBService.ChunkDataOfArtistDataTepVWBla EndRequestAllArtists(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISDBService/RequestNextArtistChunk", ReplyAction="http://tempuri.org/ISDBService/RequestNextArtistChunkResponse")]
        WickedSick.ClientComponents.Music.SDBService.ChunkDataOfArtistDataTepVWBla RequestNextArtistChunk(int ChunkNumber);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISDBService/RequestNextArtistChunk", ReplyAction="http://tempuri.org/ISDBService/RequestNextArtistChunkResponse")]
        System.IAsyncResult BeginRequestNextArtistChunk(int ChunkNumber, System.AsyncCallback callback, object asyncState);
        
        WickedSick.ClientComponents.Music.SDBService.ChunkDataOfArtistDataTepVWBla EndRequestNextArtistChunk(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISDBService/RequestChanges", ReplyAction="http://tempuri.org/ISDBService/RequestChangesResponse")]
        WickedSick.ClientComponents.Music.SDBService.ChunkDataOfAuditDataTepVWBla RequestChanges(System.DateTime LastUpdate);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISDBService/RequestChanges", ReplyAction="http://tempuri.org/ISDBService/RequestChangesResponse")]
        System.IAsyncResult BeginRequestChanges(System.DateTime LastUpdate, System.AsyncCallback callback, object asyncState);
        
        WickedSick.ClientComponents.Music.SDBService.ChunkDataOfAuditDataTepVWBla EndRequestChanges(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISDBService/RequestNextChangesChunk", ReplyAction="http://tempuri.org/ISDBService/RequestNextChangesChunkResponse")]
        WickedSick.ClientComponents.Music.SDBService.ChunkDataOfAuditDataTepVWBla RequestNextChangesChunk(int ChuckNumber);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISDBService/RequestNextChangesChunk", ReplyAction="http://tempuri.org/ISDBService/RequestNextChangesChunkResponse")]
        System.IAsyncResult BeginRequestNextChangesChunk(int ChuckNumber, System.AsyncCallback callback, object asyncState);
        
        WickedSick.ClientComponents.Music.SDBService.ChunkDataOfAuditDataTepVWBla EndRequestNextChangesChunk(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISDBService/RequestAllPlaylists", ReplyAction="http://tempuri.org/ISDBService/RequestAllPlaylistsResponse")]
        WickedSick.ClientComponents.Music.SDBService.ChunkDataOfPlaylistDataTepVWBla RequestAllPlaylists(int MemberID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISDBService/RequestAllPlaylists", ReplyAction="http://tempuri.org/ISDBService/RequestAllPlaylistsResponse")]
        System.IAsyncResult BeginRequestAllPlaylists(int MemberID, System.AsyncCallback callback, object asyncState);
        
        WickedSick.ClientComponents.Music.SDBService.ChunkDataOfPlaylistDataTepVWBla EndRequestAllPlaylists(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISDBService/RequestNextPlaylistChunk", ReplyAction="http://tempuri.org/ISDBService/RequestNextPlaylistChunkResponse")]
        WickedSick.ClientComponents.Music.SDBService.ChunkDataOfPlaylistDataTepVWBla RequestNextPlaylistChunk(int MemberID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISDBService/RequestNextPlaylistChunk", ReplyAction="http://tempuri.org/ISDBService/RequestNextPlaylistChunkResponse")]
        System.IAsyncResult BeginRequestNextPlaylistChunk(int MemberID, System.AsyncCallback callback, object asyncState);
        
        WickedSick.ClientComponents.Music.SDBService.ChunkDataOfPlaylistDataTepVWBla EndRequestNextPlaylistChunk(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISDBService/RequestLibraryIDs", ReplyAction="http://tempuri.org/ISDBService/RequestLibraryIDsResponse")]
        System.Collections.Generic.List<int> RequestLibraryIDs(int MemberID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISDBService/RequestLibraryIDs", ReplyAction="http://tempuri.org/ISDBService/RequestLibraryIDsResponse")]
        System.IAsyncResult BeginRequestLibraryIDs(int MemberID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<int> EndRequestLibraryIDs(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public interface ISDBServiceChannel : WickedSick.ClientComponents.Music.SDBService.ISDBService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class RequestAllSongsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RequestAllSongsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public WickedSick.ClientComponents.Music.SDBService.ChunkDataOfSongDataTepVWBla Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((WickedSick.ClientComponents.Music.SDBService.ChunkDataOfSongDataTepVWBla)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class RequestNextSongChunkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RequestNextSongChunkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public WickedSick.ClientComponents.Music.SDBService.ChunkDataOfSongDataTepVWBla Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((WickedSick.ClientComponents.Music.SDBService.ChunkDataOfSongDataTepVWBla)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class RequestAllAlbumsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RequestAllAlbumsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public WickedSick.ClientComponents.Music.SDBService.ChunkDataOfAlbumDataTepVWBla Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((WickedSick.ClientComponents.Music.SDBService.ChunkDataOfAlbumDataTepVWBla)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class RequestNextAlbumChunkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RequestNextAlbumChunkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public WickedSick.ClientComponents.Music.SDBService.ChunkDataOfAlbumDataTepVWBla Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((WickedSick.ClientComponents.Music.SDBService.ChunkDataOfAlbumDataTepVWBla)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class RequestAllArtistsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RequestAllArtistsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public WickedSick.ClientComponents.Music.SDBService.ChunkDataOfArtistDataTepVWBla Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((WickedSick.ClientComponents.Music.SDBService.ChunkDataOfArtistDataTepVWBla)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class RequestNextArtistChunkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RequestNextArtistChunkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public WickedSick.ClientComponents.Music.SDBService.ChunkDataOfArtistDataTepVWBla Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((WickedSick.ClientComponents.Music.SDBService.ChunkDataOfArtistDataTepVWBla)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class RequestChangesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RequestChangesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public WickedSick.ClientComponents.Music.SDBService.ChunkDataOfAuditDataTepVWBla Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((WickedSick.ClientComponents.Music.SDBService.ChunkDataOfAuditDataTepVWBla)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class RequestNextChangesChunkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RequestNextChangesChunkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public WickedSick.ClientComponents.Music.SDBService.ChunkDataOfAuditDataTepVWBla Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((WickedSick.ClientComponents.Music.SDBService.ChunkDataOfAuditDataTepVWBla)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class RequestAllPlaylistsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RequestAllPlaylistsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public WickedSick.ClientComponents.Music.SDBService.ChunkDataOfPlaylistDataTepVWBla Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((WickedSick.ClientComponents.Music.SDBService.ChunkDataOfPlaylistDataTepVWBla)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class RequestNextPlaylistChunkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RequestNextPlaylistChunkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public WickedSick.ClientComponents.Music.SDBService.ChunkDataOfPlaylistDataTepVWBla Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((WickedSick.ClientComponents.Music.SDBService.ChunkDataOfPlaylistDataTepVWBla)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class RequestLibraryIDsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RequestLibraryIDsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<int> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<int>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class SDBServiceClient : System.ServiceModel.ClientBase<WickedSick.ClientComponents.Music.SDBService.ISDBService>, WickedSick.ClientComponents.Music.SDBService.ISDBService {
        
        private BeginOperationDelegate onBeginRequestAllSongsDelegate;
        
        private EndOperationDelegate onEndRequestAllSongsDelegate;
        
        private System.Threading.SendOrPostCallback onRequestAllSongsCompletedDelegate;
        
        private BeginOperationDelegate onBeginRequestNextSongChunkDelegate;
        
        private EndOperationDelegate onEndRequestNextSongChunkDelegate;
        
        private System.Threading.SendOrPostCallback onRequestNextSongChunkCompletedDelegate;
        
        private BeginOperationDelegate onBeginRequestAllAlbumsDelegate;
        
        private EndOperationDelegate onEndRequestAllAlbumsDelegate;
        
        private System.Threading.SendOrPostCallback onRequestAllAlbumsCompletedDelegate;
        
        private BeginOperationDelegate onBeginRequestNextAlbumChunkDelegate;
        
        private EndOperationDelegate onEndRequestNextAlbumChunkDelegate;
        
        private System.Threading.SendOrPostCallback onRequestNextAlbumChunkCompletedDelegate;
        
        private BeginOperationDelegate onBeginRequestAllArtistsDelegate;
        
        private EndOperationDelegate onEndRequestAllArtistsDelegate;
        
        private System.Threading.SendOrPostCallback onRequestAllArtistsCompletedDelegate;
        
        private BeginOperationDelegate onBeginRequestNextArtistChunkDelegate;
        
        private EndOperationDelegate onEndRequestNextArtistChunkDelegate;
        
        private System.Threading.SendOrPostCallback onRequestNextArtistChunkCompletedDelegate;
        
        private BeginOperationDelegate onBeginRequestChangesDelegate;
        
        private EndOperationDelegate onEndRequestChangesDelegate;
        
        private System.Threading.SendOrPostCallback onRequestChangesCompletedDelegate;
        
        private BeginOperationDelegate onBeginRequestNextChangesChunkDelegate;
        
        private EndOperationDelegate onEndRequestNextChangesChunkDelegate;
        
        private System.Threading.SendOrPostCallback onRequestNextChangesChunkCompletedDelegate;
        
        private BeginOperationDelegate onBeginRequestAllPlaylistsDelegate;
        
        private EndOperationDelegate onEndRequestAllPlaylistsDelegate;
        
        private System.Threading.SendOrPostCallback onRequestAllPlaylistsCompletedDelegate;
        
        private BeginOperationDelegate onBeginRequestNextPlaylistChunkDelegate;
        
        private EndOperationDelegate onEndRequestNextPlaylistChunkDelegate;
        
        private System.Threading.SendOrPostCallback onRequestNextPlaylistChunkCompletedDelegate;
        
        private BeginOperationDelegate onBeginRequestLibraryIDsDelegate;
        
        private EndOperationDelegate onEndRequestLibraryIDsDelegate;
        
        private System.Threading.SendOrPostCallback onRequestLibraryIDsCompletedDelegate;
        
        public SDBServiceClient() {
        }
        
        public SDBServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SDBServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SDBServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SDBServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<RequestAllSongsCompletedEventArgs> RequestAllSongsCompleted;
        
        public event System.EventHandler<RequestNextSongChunkCompletedEventArgs> RequestNextSongChunkCompleted;
        
        public event System.EventHandler<RequestAllAlbumsCompletedEventArgs> RequestAllAlbumsCompleted;
        
        public event System.EventHandler<RequestNextAlbumChunkCompletedEventArgs> RequestNextAlbumChunkCompleted;
        
        public event System.EventHandler<RequestAllArtistsCompletedEventArgs> RequestAllArtistsCompleted;
        
        public event System.EventHandler<RequestNextArtistChunkCompletedEventArgs> RequestNextArtistChunkCompleted;
        
        public event System.EventHandler<RequestChangesCompletedEventArgs> RequestChangesCompleted;
        
        public event System.EventHandler<RequestNextChangesChunkCompletedEventArgs> RequestNextChangesChunkCompleted;
        
        public event System.EventHandler<RequestAllPlaylistsCompletedEventArgs> RequestAllPlaylistsCompleted;
        
        public event System.EventHandler<RequestNextPlaylistChunkCompletedEventArgs> RequestNextPlaylistChunkCompleted;
        
        public event System.EventHandler<RequestLibraryIDsCompletedEventArgs> RequestLibraryIDsCompleted;
        
        public WickedSick.ClientComponents.Music.SDBService.ChunkDataOfSongDataTepVWBla RequestAllSongs() {
            return base.Channel.RequestAllSongs();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRequestAllSongs(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRequestAllSongs(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public WickedSick.ClientComponents.Music.SDBService.ChunkDataOfSongDataTepVWBla EndRequestAllSongs(System.IAsyncResult result) {
            return base.Channel.EndRequestAllSongs(result);
        }
        
        private System.IAsyncResult OnBeginRequestAllSongs(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginRequestAllSongs(callback, asyncState);
        }
        
        private object[] OnEndRequestAllSongs(System.IAsyncResult result) {
            WickedSick.ClientComponents.Music.SDBService.ChunkDataOfSongDataTepVWBla retVal = this.EndRequestAllSongs(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRequestAllSongsCompleted(object state) {
            if ((this.RequestAllSongsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RequestAllSongsCompleted(this, new RequestAllSongsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RequestAllSongsAsync() {
            this.RequestAllSongsAsync(null);
        }
        
        public void RequestAllSongsAsync(object userState) {
            if ((this.onBeginRequestAllSongsDelegate == null)) {
                this.onBeginRequestAllSongsDelegate = new BeginOperationDelegate(this.OnBeginRequestAllSongs);
            }
            if ((this.onEndRequestAllSongsDelegate == null)) {
                this.onEndRequestAllSongsDelegate = new EndOperationDelegate(this.OnEndRequestAllSongs);
            }
            if ((this.onRequestAllSongsCompletedDelegate == null)) {
                this.onRequestAllSongsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRequestAllSongsCompleted);
            }
            base.InvokeAsync(this.onBeginRequestAllSongsDelegate, null, this.onEndRequestAllSongsDelegate, this.onRequestAllSongsCompletedDelegate, userState);
        }
        
        public WickedSick.ClientComponents.Music.SDBService.ChunkDataOfSongDataTepVWBla RequestNextSongChunk(int ChunkNumber) {
            return base.Channel.RequestNextSongChunk(ChunkNumber);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRequestNextSongChunk(int ChunkNumber, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRequestNextSongChunk(ChunkNumber, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public WickedSick.ClientComponents.Music.SDBService.ChunkDataOfSongDataTepVWBla EndRequestNextSongChunk(System.IAsyncResult result) {
            return base.Channel.EndRequestNextSongChunk(result);
        }
        
        private System.IAsyncResult OnBeginRequestNextSongChunk(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int ChunkNumber = ((int)(inValues[0]));
            return this.BeginRequestNextSongChunk(ChunkNumber, callback, asyncState);
        }
        
        private object[] OnEndRequestNextSongChunk(System.IAsyncResult result) {
            WickedSick.ClientComponents.Music.SDBService.ChunkDataOfSongDataTepVWBla retVal = this.EndRequestNextSongChunk(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRequestNextSongChunkCompleted(object state) {
            if ((this.RequestNextSongChunkCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RequestNextSongChunkCompleted(this, new RequestNextSongChunkCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RequestNextSongChunkAsync(int ChunkNumber) {
            this.RequestNextSongChunkAsync(ChunkNumber, null);
        }
        
        public void RequestNextSongChunkAsync(int ChunkNumber, object userState) {
            if ((this.onBeginRequestNextSongChunkDelegate == null)) {
                this.onBeginRequestNextSongChunkDelegate = new BeginOperationDelegate(this.OnBeginRequestNextSongChunk);
            }
            if ((this.onEndRequestNextSongChunkDelegate == null)) {
                this.onEndRequestNextSongChunkDelegate = new EndOperationDelegate(this.OnEndRequestNextSongChunk);
            }
            if ((this.onRequestNextSongChunkCompletedDelegate == null)) {
                this.onRequestNextSongChunkCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRequestNextSongChunkCompleted);
            }
            base.InvokeAsync(this.onBeginRequestNextSongChunkDelegate, new object[] {
                        ChunkNumber}, this.onEndRequestNextSongChunkDelegate, this.onRequestNextSongChunkCompletedDelegate, userState);
        }
        
        public WickedSick.ClientComponents.Music.SDBService.ChunkDataOfAlbumDataTepVWBla RequestAllAlbums() {
            return base.Channel.RequestAllAlbums();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRequestAllAlbums(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRequestAllAlbums(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public WickedSick.ClientComponents.Music.SDBService.ChunkDataOfAlbumDataTepVWBla EndRequestAllAlbums(System.IAsyncResult result) {
            return base.Channel.EndRequestAllAlbums(result);
        }
        
        private System.IAsyncResult OnBeginRequestAllAlbums(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginRequestAllAlbums(callback, asyncState);
        }
        
        private object[] OnEndRequestAllAlbums(System.IAsyncResult result) {
            WickedSick.ClientComponents.Music.SDBService.ChunkDataOfAlbumDataTepVWBla retVal = this.EndRequestAllAlbums(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRequestAllAlbumsCompleted(object state) {
            if ((this.RequestAllAlbumsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RequestAllAlbumsCompleted(this, new RequestAllAlbumsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RequestAllAlbumsAsync() {
            this.RequestAllAlbumsAsync(null);
        }
        
        public void RequestAllAlbumsAsync(object userState) {
            if ((this.onBeginRequestAllAlbumsDelegate == null)) {
                this.onBeginRequestAllAlbumsDelegate = new BeginOperationDelegate(this.OnBeginRequestAllAlbums);
            }
            if ((this.onEndRequestAllAlbumsDelegate == null)) {
                this.onEndRequestAllAlbumsDelegate = new EndOperationDelegate(this.OnEndRequestAllAlbums);
            }
            if ((this.onRequestAllAlbumsCompletedDelegate == null)) {
                this.onRequestAllAlbumsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRequestAllAlbumsCompleted);
            }
            base.InvokeAsync(this.onBeginRequestAllAlbumsDelegate, null, this.onEndRequestAllAlbumsDelegate, this.onRequestAllAlbumsCompletedDelegate, userState);
        }
        
        public WickedSick.ClientComponents.Music.SDBService.ChunkDataOfAlbumDataTepVWBla RequestNextAlbumChunk(int ChunkNumber) {
            return base.Channel.RequestNextAlbumChunk(ChunkNumber);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRequestNextAlbumChunk(int ChunkNumber, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRequestNextAlbumChunk(ChunkNumber, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public WickedSick.ClientComponents.Music.SDBService.ChunkDataOfAlbumDataTepVWBla EndRequestNextAlbumChunk(System.IAsyncResult result) {
            return base.Channel.EndRequestNextAlbumChunk(result);
        }
        
        private System.IAsyncResult OnBeginRequestNextAlbumChunk(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int ChunkNumber = ((int)(inValues[0]));
            return this.BeginRequestNextAlbumChunk(ChunkNumber, callback, asyncState);
        }
        
        private object[] OnEndRequestNextAlbumChunk(System.IAsyncResult result) {
            WickedSick.ClientComponents.Music.SDBService.ChunkDataOfAlbumDataTepVWBla retVal = this.EndRequestNextAlbumChunk(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRequestNextAlbumChunkCompleted(object state) {
            if ((this.RequestNextAlbumChunkCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RequestNextAlbumChunkCompleted(this, new RequestNextAlbumChunkCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RequestNextAlbumChunkAsync(int ChunkNumber) {
            this.RequestNextAlbumChunkAsync(ChunkNumber, null);
        }
        
        public void RequestNextAlbumChunkAsync(int ChunkNumber, object userState) {
            if ((this.onBeginRequestNextAlbumChunkDelegate == null)) {
                this.onBeginRequestNextAlbumChunkDelegate = new BeginOperationDelegate(this.OnBeginRequestNextAlbumChunk);
            }
            if ((this.onEndRequestNextAlbumChunkDelegate == null)) {
                this.onEndRequestNextAlbumChunkDelegate = new EndOperationDelegate(this.OnEndRequestNextAlbumChunk);
            }
            if ((this.onRequestNextAlbumChunkCompletedDelegate == null)) {
                this.onRequestNextAlbumChunkCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRequestNextAlbumChunkCompleted);
            }
            base.InvokeAsync(this.onBeginRequestNextAlbumChunkDelegate, new object[] {
                        ChunkNumber}, this.onEndRequestNextAlbumChunkDelegate, this.onRequestNextAlbumChunkCompletedDelegate, userState);
        }
        
        public WickedSick.ClientComponents.Music.SDBService.ChunkDataOfArtistDataTepVWBla RequestAllArtists() {
            return base.Channel.RequestAllArtists();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRequestAllArtists(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRequestAllArtists(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public WickedSick.ClientComponents.Music.SDBService.ChunkDataOfArtistDataTepVWBla EndRequestAllArtists(System.IAsyncResult result) {
            return base.Channel.EndRequestAllArtists(result);
        }
        
        private System.IAsyncResult OnBeginRequestAllArtists(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginRequestAllArtists(callback, asyncState);
        }
        
        private object[] OnEndRequestAllArtists(System.IAsyncResult result) {
            WickedSick.ClientComponents.Music.SDBService.ChunkDataOfArtistDataTepVWBla retVal = this.EndRequestAllArtists(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRequestAllArtistsCompleted(object state) {
            if ((this.RequestAllArtistsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RequestAllArtistsCompleted(this, new RequestAllArtistsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RequestAllArtistsAsync() {
            this.RequestAllArtistsAsync(null);
        }
        
        public void RequestAllArtistsAsync(object userState) {
            if ((this.onBeginRequestAllArtistsDelegate == null)) {
                this.onBeginRequestAllArtistsDelegate = new BeginOperationDelegate(this.OnBeginRequestAllArtists);
            }
            if ((this.onEndRequestAllArtistsDelegate == null)) {
                this.onEndRequestAllArtistsDelegate = new EndOperationDelegate(this.OnEndRequestAllArtists);
            }
            if ((this.onRequestAllArtistsCompletedDelegate == null)) {
                this.onRequestAllArtistsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRequestAllArtistsCompleted);
            }
            base.InvokeAsync(this.onBeginRequestAllArtistsDelegate, null, this.onEndRequestAllArtistsDelegate, this.onRequestAllArtistsCompletedDelegate, userState);
        }
        
        public WickedSick.ClientComponents.Music.SDBService.ChunkDataOfArtistDataTepVWBla RequestNextArtistChunk(int ChunkNumber) {
            return base.Channel.RequestNextArtistChunk(ChunkNumber);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRequestNextArtistChunk(int ChunkNumber, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRequestNextArtistChunk(ChunkNumber, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public WickedSick.ClientComponents.Music.SDBService.ChunkDataOfArtistDataTepVWBla EndRequestNextArtistChunk(System.IAsyncResult result) {
            return base.Channel.EndRequestNextArtistChunk(result);
        }
        
        private System.IAsyncResult OnBeginRequestNextArtistChunk(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int ChunkNumber = ((int)(inValues[0]));
            return this.BeginRequestNextArtistChunk(ChunkNumber, callback, asyncState);
        }
        
        private object[] OnEndRequestNextArtistChunk(System.IAsyncResult result) {
            WickedSick.ClientComponents.Music.SDBService.ChunkDataOfArtistDataTepVWBla retVal = this.EndRequestNextArtistChunk(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRequestNextArtistChunkCompleted(object state) {
            if ((this.RequestNextArtistChunkCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RequestNextArtistChunkCompleted(this, new RequestNextArtistChunkCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RequestNextArtistChunkAsync(int ChunkNumber) {
            this.RequestNextArtistChunkAsync(ChunkNumber, null);
        }
        
        public void RequestNextArtistChunkAsync(int ChunkNumber, object userState) {
            if ((this.onBeginRequestNextArtistChunkDelegate == null)) {
                this.onBeginRequestNextArtistChunkDelegate = new BeginOperationDelegate(this.OnBeginRequestNextArtistChunk);
            }
            if ((this.onEndRequestNextArtistChunkDelegate == null)) {
                this.onEndRequestNextArtistChunkDelegate = new EndOperationDelegate(this.OnEndRequestNextArtistChunk);
            }
            if ((this.onRequestNextArtistChunkCompletedDelegate == null)) {
                this.onRequestNextArtistChunkCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRequestNextArtistChunkCompleted);
            }
            base.InvokeAsync(this.onBeginRequestNextArtistChunkDelegate, new object[] {
                        ChunkNumber}, this.onEndRequestNextArtistChunkDelegate, this.onRequestNextArtistChunkCompletedDelegate, userState);
        }
        
        public WickedSick.ClientComponents.Music.SDBService.ChunkDataOfAuditDataTepVWBla RequestChanges(System.DateTime LastUpdate) {
            return base.Channel.RequestChanges(LastUpdate);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRequestChanges(System.DateTime LastUpdate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRequestChanges(LastUpdate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public WickedSick.ClientComponents.Music.SDBService.ChunkDataOfAuditDataTepVWBla EndRequestChanges(System.IAsyncResult result) {
            return base.Channel.EndRequestChanges(result);
        }
        
        private System.IAsyncResult OnBeginRequestChanges(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.DateTime LastUpdate = ((System.DateTime)(inValues[0]));
            return this.BeginRequestChanges(LastUpdate, callback, asyncState);
        }
        
        private object[] OnEndRequestChanges(System.IAsyncResult result) {
            WickedSick.ClientComponents.Music.SDBService.ChunkDataOfAuditDataTepVWBla retVal = this.EndRequestChanges(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRequestChangesCompleted(object state) {
            if ((this.RequestChangesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RequestChangesCompleted(this, new RequestChangesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RequestChangesAsync(System.DateTime LastUpdate) {
            this.RequestChangesAsync(LastUpdate, null);
        }
        
        public void RequestChangesAsync(System.DateTime LastUpdate, object userState) {
            if ((this.onBeginRequestChangesDelegate == null)) {
                this.onBeginRequestChangesDelegate = new BeginOperationDelegate(this.OnBeginRequestChanges);
            }
            if ((this.onEndRequestChangesDelegate == null)) {
                this.onEndRequestChangesDelegate = new EndOperationDelegate(this.OnEndRequestChanges);
            }
            if ((this.onRequestChangesCompletedDelegate == null)) {
                this.onRequestChangesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRequestChangesCompleted);
            }
            base.InvokeAsync(this.onBeginRequestChangesDelegate, new object[] {
                        LastUpdate}, this.onEndRequestChangesDelegate, this.onRequestChangesCompletedDelegate, userState);
        }
        
        public WickedSick.ClientComponents.Music.SDBService.ChunkDataOfAuditDataTepVWBla RequestNextChangesChunk(int ChuckNumber) {
            return base.Channel.RequestNextChangesChunk(ChuckNumber);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRequestNextChangesChunk(int ChuckNumber, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRequestNextChangesChunk(ChuckNumber, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public WickedSick.ClientComponents.Music.SDBService.ChunkDataOfAuditDataTepVWBla EndRequestNextChangesChunk(System.IAsyncResult result) {
            return base.Channel.EndRequestNextChangesChunk(result);
        }
        
        private System.IAsyncResult OnBeginRequestNextChangesChunk(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int ChuckNumber = ((int)(inValues[0]));
            return this.BeginRequestNextChangesChunk(ChuckNumber, callback, asyncState);
        }
        
        private object[] OnEndRequestNextChangesChunk(System.IAsyncResult result) {
            WickedSick.ClientComponents.Music.SDBService.ChunkDataOfAuditDataTepVWBla retVal = this.EndRequestNextChangesChunk(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRequestNextChangesChunkCompleted(object state) {
            if ((this.RequestNextChangesChunkCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RequestNextChangesChunkCompleted(this, new RequestNextChangesChunkCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RequestNextChangesChunkAsync(int ChuckNumber) {
            this.RequestNextChangesChunkAsync(ChuckNumber, null);
        }
        
        public void RequestNextChangesChunkAsync(int ChuckNumber, object userState) {
            if ((this.onBeginRequestNextChangesChunkDelegate == null)) {
                this.onBeginRequestNextChangesChunkDelegate = new BeginOperationDelegate(this.OnBeginRequestNextChangesChunk);
            }
            if ((this.onEndRequestNextChangesChunkDelegate == null)) {
                this.onEndRequestNextChangesChunkDelegate = new EndOperationDelegate(this.OnEndRequestNextChangesChunk);
            }
            if ((this.onRequestNextChangesChunkCompletedDelegate == null)) {
                this.onRequestNextChangesChunkCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRequestNextChangesChunkCompleted);
            }
            base.InvokeAsync(this.onBeginRequestNextChangesChunkDelegate, new object[] {
                        ChuckNumber}, this.onEndRequestNextChangesChunkDelegate, this.onRequestNextChangesChunkCompletedDelegate, userState);
        }
        
        public WickedSick.ClientComponents.Music.SDBService.ChunkDataOfPlaylistDataTepVWBla RequestAllPlaylists(int MemberID) {
            return base.Channel.RequestAllPlaylists(MemberID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRequestAllPlaylists(int MemberID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRequestAllPlaylists(MemberID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public WickedSick.ClientComponents.Music.SDBService.ChunkDataOfPlaylistDataTepVWBla EndRequestAllPlaylists(System.IAsyncResult result) {
            return base.Channel.EndRequestAllPlaylists(result);
        }
        
        private System.IAsyncResult OnBeginRequestAllPlaylists(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int MemberID = ((int)(inValues[0]));
            return this.BeginRequestAllPlaylists(MemberID, callback, asyncState);
        }
        
        private object[] OnEndRequestAllPlaylists(System.IAsyncResult result) {
            WickedSick.ClientComponents.Music.SDBService.ChunkDataOfPlaylistDataTepVWBla retVal = this.EndRequestAllPlaylists(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRequestAllPlaylistsCompleted(object state) {
            if ((this.RequestAllPlaylistsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RequestAllPlaylistsCompleted(this, new RequestAllPlaylistsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RequestAllPlaylistsAsync(int MemberID) {
            this.RequestAllPlaylistsAsync(MemberID, null);
        }
        
        public void RequestAllPlaylistsAsync(int MemberID, object userState) {
            if ((this.onBeginRequestAllPlaylistsDelegate == null)) {
                this.onBeginRequestAllPlaylistsDelegate = new BeginOperationDelegate(this.OnBeginRequestAllPlaylists);
            }
            if ((this.onEndRequestAllPlaylistsDelegate == null)) {
                this.onEndRequestAllPlaylistsDelegate = new EndOperationDelegate(this.OnEndRequestAllPlaylists);
            }
            if ((this.onRequestAllPlaylistsCompletedDelegate == null)) {
                this.onRequestAllPlaylistsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRequestAllPlaylistsCompleted);
            }
            base.InvokeAsync(this.onBeginRequestAllPlaylistsDelegate, new object[] {
                        MemberID}, this.onEndRequestAllPlaylistsDelegate, this.onRequestAllPlaylistsCompletedDelegate, userState);
        }
        
        public WickedSick.ClientComponents.Music.SDBService.ChunkDataOfPlaylistDataTepVWBla RequestNextPlaylistChunk(int MemberID) {
            return base.Channel.RequestNextPlaylistChunk(MemberID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRequestNextPlaylistChunk(int MemberID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRequestNextPlaylistChunk(MemberID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public WickedSick.ClientComponents.Music.SDBService.ChunkDataOfPlaylistDataTepVWBla EndRequestNextPlaylistChunk(System.IAsyncResult result) {
            return base.Channel.EndRequestNextPlaylistChunk(result);
        }
        
        private System.IAsyncResult OnBeginRequestNextPlaylistChunk(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int MemberID = ((int)(inValues[0]));
            return this.BeginRequestNextPlaylistChunk(MemberID, callback, asyncState);
        }
        
        private object[] OnEndRequestNextPlaylistChunk(System.IAsyncResult result) {
            WickedSick.ClientComponents.Music.SDBService.ChunkDataOfPlaylistDataTepVWBla retVal = this.EndRequestNextPlaylistChunk(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRequestNextPlaylistChunkCompleted(object state) {
            if ((this.RequestNextPlaylistChunkCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RequestNextPlaylistChunkCompleted(this, new RequestNextPlaylistChunkCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RequestNextPlaylistChunkAsync(int MemberID) {
            this.RequestNextPlaylistChunkAsync(MemberID, null);
        }
        
        public void RequestNextPlaylistChunkAsync(int MemberID, object userState) {
            if ((this.onBeginRequestNextPlaylistChunkDelegate == null)) {
                this.onBeginRequestNextPlaylistChunkDelegate = new BeginOperationDelegate(this.OnBeginRequestNextPlaylistChunk);
            }
            if ((this.onEndRequestNextPlaylistChunkDelegate == null)) {
                this.onEndRequestNextPlaylistChunkDelegate = new EndOperationDelegate(this.OnEndRequestNextPlaylistChunk);
            }
            if ((this.onRequestNextPlaylistChunkCompletedDelegate == null)) {
                this.onRequestNextPlaylistChunkCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRequestNextPlaylistChunkCompleted);
            }
            base.InvokeAsync(this.onBeginRequestNextPlaylistChunkDelegate, new object[] {
                        MemberID}, this.onEndRequestNextPlaylistChunkDelegate, this.onRequestNextPlaylistChunkCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<int> RequestLibraryIDs(int MemberID) {
            return base.Channel.RequestLibraryIDs(MemberID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRequestLibraryIDs(int MemberID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRequestLibraryIDs(MemberID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<int> EndRequestLibraryIDs(System.IAsyncResult result) {
            return base.Channel.EndRequestLibraryIDs(result);
        }
        
        private System.IAsyncResult OnBeginRequestLibraryIDs(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int MemberID = ((int)(inValues[0]));
            return this.BeginRequestLibraryIDs(MemberID, callback, asyncState);
        }
        
        private object[] OnEndRequestLibraryIDs(System.IAsyncResult result) {
            System.Collections.Generic.List<int> retVal = this.EndRequestLibraryIDs(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRequestLibraryIDsCompleted(object state) {
            if ((this.RequestLibraryIDsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RequestLibraryIDsCompleted(this, new RequestLibraryIDsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RequestLibraryIDsAsync(int MemberID) {
            this.RequestLibraryIDsAsync(MemberID, null);
        }
        
        public void RequestLibraryIDsAsync(int MemberID, object userState) {
            if ((this.onBeginRequestLibraryIDsDelegate == null)) {
                this.onBeginRequestLibraryIDsDelegate = new BeginOperationDelegate(this.OnBeginRequestLibraryIDs);
            }
            if ((this.onEndRequestLibraryIDsDelegate == null)) {
                this.onEndRequestLibraryIDsDelegate = new EndOperationDelegate(this.OnEndRequestLibraryIDs);
            }
            if ((this.onRequestLibraryIDsCompletedDelegate == null)) {
                this.onRequestLibraryIDsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRequestLibraryIDsCompleted);
            }
            base.InvokeAsync(this.onBeginRequestLibraryIDsDelegate, new object[] {
                        MemberID}, this.onEndRequestLibraryIDsDelegate, this.onRequestLibraryIDsCompletedDelegate, userState);
        }
    }
}
