#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WickedSick.Data.Nfl
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="NFL")]
	public partial class NflDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertLEAGUE(LEAGUE instance);
    partial void UpdateLEAGUE(LEAGUE instance);
    partial void DeleteLEAGUE(LEAGUE instance);
    partial void InsertCONFERENCE(CONFERENCE instance);
    partial void UpdateCONFERENCE(CONFERENCE instance);
    partial void DeleteCONFERENCE(CONFERENCE instance);
    partial void InsertDIVISION(DIVISION instance);
    partial void UpdateDIVISION(DIVISION instance);
    partial void DeleteDIVISION(DIVISION instance);
    partial void InsertTEAM(TEAM instance);
    partial void UpdateTEAM(TEAM instance);
    partial void DeleteTEAM(TEAM instance);
    partial void InsertTEAM_PLAYER(TEAM_PLAYER instance);
    partial void UpdateTEAM_PLAYER(TEAM_PLAYER instance);
    partial void DeleteTEAM_PLAYER(TEAM_PLAYER instance);
    partial void InsertPLAYER(PLAYER instance);
    partial void UpdatePLAYER(PLAYER instance);
    partial void DeletePLAYER(PLAYER instance);
    partial void InsertPLAYER_GAME_DEFENSE(PLAYER_GAME_DEFENSE instance);
    partial void UpdatePLAYER_GAME_DEFENSE(PLAYER_GAME_DEFENSE instance);
    partial void DeletePLAYER_GAME_DEFENSE(PLAYER_GAME_DEFENSE instance);
    partial void InsertPLAYER_GAME_FUMBLE(PLAYER_GAME_FUMBLE instance);
    partial void UpdatePLAYER_GAME_FUMBLE(PLAYER_GAME_FUMBLE instance);
    partial void DeletePLAYER_GAME_FUMBLE(PLAYER_GAME_FUMBLE instance);
    partial void InsertPLAYER_GAME_KICK_RETURN(PLAYER_GAME_KICK_RETURN instance);
    partial void UpdatePLAYER_GAME_KICK_RETURN(PLAYER_GAME_KICK_RETURN instance);
    partial void DeletePLAYER_GAME_KICK_RETURN(PLAYER_GAME_KICK_RETURN instance);
    partial void InsertPLAYER_GAME_KICKING(PLAYER_GAME_KICKING instance);
    partial void UpdatePLAYER_GAME_KICKING(PLAYER_GAME_KICKING instance);
    partial void DeletePLAYER_GAME_KICKING(PLAYER_GAME_KICKING instance);
    partial void InsertPLAYER_GAME_PASSING(PLAYER_GAME_PASSING instance);
    partial void UpdatePLAYER_GAME_PASSING(PLAYER_GAME_PASSING instance);
    partial void DeletePLAYER_GAME_PASSING(PLAYER_GAME_PASSING instance);
    partial void InsertPLAYER_GAME_PUNT_RETURN(PLAYER_GAME_PUNT_RETURN instance);
    partial void UpdatePLAYER_GAME_PUNT_RETURN(PLAYER_GAME_PUNT_RETURN instance);
    partial void DeletePLAYER_GAME_PUNT_RETURN(PLAYER_GAME_PUNT_RETURN instance);
    partial void InsertPLAYER_GAME_PUNTING(PLAYER_GAME_PUNTING instance);
    partial void UpdatePLAYER_GAME_PUNTING(PLAYER_GAME_PUNTING instance);
    partial void DeletePLAYER_GAME_PUNTING(PLAYER_GAME_PUNTING instance);
    partial void InsertPLAYER_GAME_RECEIVING(PLAYER_GAME_RECEIVING instance);
    partial void UpdatePLAYER_GAME_RECEIVING(PLAYER_GAME_RECEIVING instance);
    partial void DeletePLAYER_GAME_RECEIVING(PLAYER_GAME_RECEIVING instance);
    partial void InsertPLAYER_GAME_RUSHING(PLAYER_GAME_RUSHING instance);
    partial void UpdatePLAYER_GAME_RUSHING(PLAYER_GAME_RUSHING instance);
    partial void DeletePLAYER_GAME_RUSHING(PLAYER_GAME_RUSHING instance);
    partial void InsertGAME(GAME instance);
    partial void UpdateGAME(GAME instance);
    partial void DeleteGAME(GAME instance);
    #endregion
		
		public NflDataContext() : 
				base(global::WickedSick.Data.Nfl.Properties.Settings.Default.NFLConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public NflDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public NflDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public NflDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public NflDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<LEAGUE> LEAGUEs
		{
			get
			{
				return this.GetTable<LEAGUE>();
			}
		}
		
		public System.Data.Linq.Table<CONFERENCE> CONFERENCEs
		{
			get
			{
				return this.GetTable<CONFERENCE>();
			}
		}
		
		public System.Data.Linq.Table<DIVISION> DIVISIONs
		{
			get
			{
				return this.GetTable<DIVISION>();
			}
		}
		
		public System.Data.Linq.Table<DIVISION_TEAM> DIVISION_TEAMs
		{
			get
			{
				return this.GetTable<DIVISION_TEAM>();
			}
		}
		
		public System.Data.Linq.Table<TEAM> TEAMs
		{
			get
			{
				return this.GetTable<TEAM>();
			}
		}
		
		public System.Data.Linq.Table<TEAM_PLAYER> TEAM_PLAYERs
		{
			get
			{
				return this.GetTable<TEAM_PLAYER>();
			}
		}
		
		public System.Data.Linq.Table<PLAYER> PLAYERs
		{
			get
			{
				return this.GetTable<PLAYER>();
			}
		}
		
		public System.Data.Linq.Table<PLAYER_GAME_DEFENSE> PLAYER_GAME_DEFENSEs
		{
			get
			{
				return this.GetTable<PLAYER_GAME_DEFENSE>();
			}
		}
		
		public System.Data.Linq.Table<PLAYER_GAME_FUMBLE> PLAYER_GAME_FUMBLEs
		{
			get
			{
				return this.GetTable<PLAYER_GAME_FUMBLE>();
			}
		}
		
		public System.Data.Linq.Table<PLAYER_GAME_KICK_RETURN> PLAYER_GAME_KICK_RETURNs
		{
			get
			{
				return this.GetTable<PLAYER_GAME_KICK_RETURN>();
			}
		}
		
		public System.Data.Linq.Table<PLAYER_GAME_KICKING> PLAYER_GAME_KICKINGs
		{
			get
			{
				return this.GetTable<PLAYER_GAME_KICKING>();
			}
		}
		
		public System.Data.Linq.Table<PLAYER_GAME_PASSING> PLAYER_GAME_PASSINGs
		{
			get
			{
				return this.GetTable<PLAYER_GAME_PASSING>();
			}
		}
		
		public System.Data.Linq.Table<PLAYER_GAME_PUNT_RETURN> PLAYER_GAME_PUNT_RETURNs
		{
			get
			{
				return this.GetTable<PLAYER_GAME_PUNT_RETURN>();
			}
		}
		
		public System.Data.Linq.Table<PLAYER_GAME_PUNTING> PLAYER_GAME_PUNTINGs
		{
			get
			{
				return this.GetTable<PLAYER_GAME_PUNTING>();
			}
		}
		
		public System.Data.Linq.Table<PLAYER_GAME_RECEIVING> PLAYER_GAME_RECEIVINGs
		{
			get
			{
				return this.GetTable<PLAYER_GAME_RECEIVING>();
			}
		}
		
		public System.Data.Linq.Table<PLAYER_GAME_RUSHING> PLAYER_GAME_RUSHINGs
		{
			get
			{
				return this.GetTable<PLAYER_GAME_RUSHING>();
			}
		}
		
		public System.Data.Linq.Table<GAME> GAMEs
		{
			get
			{
				return this.GetTable<GAME>();
			}
		}
	}
	
	[Table(Name="dbo.LEAGUES")]
	public partial class LEAGUE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LEAGUE_ID;
		
		private string _Name;
		
		private int _YearCreated;
		
		private System.Nullable<int> _YearEnded;
		
		private EntitySet<CONFERENCE> _CONFERENCEs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLEAGUE_IDChanging(int value);
    partial void OnLEAGUE_IDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnYearCreatedChanging(int value);
    partial void OnYearCreatedChanged();
    partial void OnYearEndedChanging(System.Nullable<int> value);
    partial void OnYearEndedChanged();
    #endregion
		
		public LEAGUE()
		{
			this._CONFERENCEs = new EntitySet<CONFERENCE>(new Action<CONFERENCE>(this.attach_CONFERENCEs), new Action<CONFERENCE>(this.detach_CONFERENCEs));
			OnCreated();
		}
		
		[Column(Storage="_LEAGUE_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int LEAGUE_ID
		{
			get
			{
				return this._LEAGUE_ID;
			}
			set
			{
				if ((this._LEAGUE_ID != value))
				{
					this.OnLEAGUE_IDChanging(value);
					this.SendPropertyChanging();
					this._LEAGUE_ID = value;
					this.SendPropertyChanged("LEAGUE_ID");
					this.OnLEAGUE_IDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_YearCreated", DbType="Int NOT NULL")]
		public int YearCreated
		{
			get
			{
				return this._YearCreated;
			}
			set
			{
				if ((this._YearCreated != value))
				{
					this.OnYearCreatedChanging(value);
					this.SendPropertyChanging();
					this._YearCreated = value;
					this.SendPropertyChanged("YearCreated");
					this.OnYearCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_YearEnded", DbType="Int")]
		public System.Nullable<int> YearEnded
		{
			get
			{
				return this._YearEnded;
			}
			set
			{
				if ((this._YearEnded != value))
				{
					this.OnYearEndedChanging(value);
					this.SendPropertyChanging();
					this._YearEnded = value;
					this.SendPropertyChanged("YearEnded");
					this.OnYearEndedChanged();
				}
			}
		}
		
		[Association(Name="LEAGUE_CONFERENCE", Storage="_CONFERENCEs", OtherKey="League")]
		public EntitySet<CONFERENCE> CONFERENCEs
		{
			get
			{
				return this._CONFERENCEs;
			}
			set
			{
				this._CONFERENCEs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CONFERENCEs(CONFERENCE entity)
		{
			this.SendPropertyChanging();
			entity.LEAGUE1 = this;
		}
		
		private void detach_CONFERENCEs(CONFERENCE entity)
		{
			this.SendPropertyChanging();
			entity.LEAGUE1 = null;
		}
	}
	
	[Table(Name="dbo.CONFERENCES")]
	public partial class CONFERENCE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CONFERENCE_ID;
		
		private int _League;
		
		private string _Name;
		
		private string _YearCreated;
		
		private string _YearEnded;
		
		private EntitySet<DIVISION> _DIVISIONs;
		
		private EntityRef<LEAGUE> _LEAGUE1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCONFERENCE_IDChanging(int value);
    partial void OnCONFERENCE_IDChanged();
    partial void OnLeagueChanging(int value);
    partial void OnLeagueChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnYearCreatedChanging(string value);
    partial void OnYearCreatedChanged();
    partial void OnYearEndedChanging(string value);
    partial void OnYearEndedChanged();
    #endregion
		
		public CONFERENCE()
		{
			this._DIVISIONs = new EntitySet<DIVISION>(new Action<DIVISION>(this.attach_DIVISIONs), new Action<DIVISION>(this.detach_DIVISIONs));
			this._LEAGUE1 = default(EntityRef<LEAGUE>);
			OnCreated();
		}
		
		[Column(Storage="_CONFERENCE_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CONFERENCE_ID
		{
			get
			{
				return this._CONFERENCE_ID;
			}
			set
			{
				if ((this._CONFERENCE_ID != value))
				{
					this.OnCONFERENCE_IDChanging(value);
					this.SendPropertyChanging();
					this._CONFERENCE_ID = value;
					this.SendPropertyChanged("CONFERENCE_ID");
					this.OnCONFERENCE_IDChanged();
				}
			}
		}
		
		[Column(Storage="_League", DbType="Int NOT NULL")]
		public int League
		{
			get
			{
				return this._League;
			}
			set
			{
				if ((this._League != value))
				{
					if (this._LEAGUE1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLeagueChanging(value);
					this.SendPropertyChanging();
					this._League = value;
					this.SendPropertyChanged("League");
					this.OnLeagueChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_YearCreated", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string YearCreated
		{
			get
			{
				return this._YearCreated;
			}
			set
			{
				if ((this._YearCreated != value))
				{
					this.OnYearCreatedChanging(value);
					this.SendPropertyChanging();
					this._YearCreated = value;
					this.SendPropertyChanged("YearCreated");
					this.OnYearCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_YearEnded", DbType="VarChar(50)")]
		public string YearEnded
		{
			get
			{
				return this._YearEnded;
			}
			set
			{
				if ((this._YearEnded != value))
				{
					this.OnYearEndedChanging(value);
					this.SendPropertyChanging();
					this._YearEnded = value;
					this.SendPropertyChanged("YearEnded");
					this.OnYearEndedChanged();
				}
			}
		}
		
		[Association(Name="CONFERENCE_DIVISION", Storage="_DIVISIONs", OtherKey="Conference")]
		public EntitySet<DIVISION> DIVISIONs
		{
			get
			{
				return this._DIVISIONs;
			}
			set
			{
				this._DIVISIONs.Assign(value);
			}
		}
		
		[Association(Name="LEAGUE_CONFERENCE", Storage="_LEAGUE1", ThisKey="League", IsForeignKey=true)]
		public LEAGUE LEAGUE1
		{
			get
			{
				return this._LEAGUE1.Entity;
			}
			set
			{
				LEAGUE previousValue = this._LEAGUE1.Entity;
				if (((previousValue != value) 
							|| (this._LEAGUE1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LEAGUE1.Entity = null;
						previousValue.CONFERENCEs.Remove(this);
					}
					this._LEAGUE1.Entity = value;
					if ((value != null))
					{
						value.CONFERENCEs.Add(this);
						this._League = value.LEAGUE_ID;
					}
					else
					{
						this._League = default(int);
					}
					this.SendPropertyChanged("LEAGUE1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DIVISIONs(DIVISION entity)
		{
			this.SendPropertyChanging();
			entity.CONFERENCE1 = this;
		}
		
		private void detach_DIVISIONs(DIVISION entity)
		{
			this.SendPropertyChanging();
			entity.CONFERENCE1 = null;
		}
	}
	
	[Table(Name="dbo.DIVISIONS")]
	public partial class DIVISION : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DIVISION_ID;
		
		private int _Conference;
		
		private string _Name;
		
		private int _YearCreated;
		
		private System.Nullable<int> _YearEnded;
		
		private EntityRef<CONFERENCE> _CONFERENCE1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDIVISION_IDChanging(int value);
    partial void OnDIVISION_IDChanged();
    partial void OnConferenceChanging(int value);
    partial void OnConferenceChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnYearCreatedChanging(int value);
    partial void OnYearCreatedChanged();
    partial void OnYearEndedChanging(System.Nullable<int> value);
    partial void OnYearEndedChanged();
    #endregion
		
		public DIVISION()
		{
			this._CONFERENCE1 = default(EntityRef<CONFERENCE>);
			OnCreated();
		}
		
		[Column(Storage="_DIVISION_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int DIVISION_ID
		{
			get
			{
				return this._DIVISION_ID;
			}
			set
			{
				if ((this._DIVISION_ID != value))
				{
					this.OnDIVISION_IDChanging(value);
					this.SendPropertyChanging();
					this._DIVISION_ID = value;
					this.SendPropertyChanged("DIVISION_ID");
					this.OnDIVISION_IDChanged();
				}
			}
		}
		
		[Column(Storage="_Conference", DbType="Int NOT NULL")]
		public int Conference
		{
			get
			{
				return this._Conference;
			}
			set
			{
				if ((this._Conference != value))
				{
					if (this._CONFERENCE1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnConferenceChanging(value);
					this.SendPropertyChanging();
					this._Conference = value;
					this.SendPropertyChanged("Conference");
					this.OnConferenceChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_YearCreated", DbType="Int NOT NULL")]
		public int YearCreated
		{
			get
			{
				return this._YearCreated;
			}
			set
			{
				if ((this._YearCreated != value))
				{
					this.OnYearCreatedChanging(value);
					this.SendPropertyChanging();
					this._YearCreated = value;
					this.SendPropertyChanged("YearCreated");
					this.OnYearCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_YearEnded", DbType="Int")]
		public System.Nullable<int> YearEnded
		{
			get
			{
				return this._YearEnded;
			}
			set
			{
				if ((this._YearEnded != value))
				{
					this.OnYearEndedChanging(value);
					this.SendPropertyChanging();
					this._YearEnded = value;
					this.SendPropertyChanged("YearEnded");
					this.OnYearEndedChanged();
				}
			}
		}
		
		[Association(Name="CONFERENCE_DIVISION", Storage="_CONFERENCE1", ThisKey="Conference", IsForeignKey=true)]
		public CONFERENCE CONFERENCE1
		{
			get
			{
				return this._CONFERENCE1.Entity;
			}
			set
			{
				CONFERENCE previousValue = this._CONFERENCE1.Entity;
				if (((previousValue != value) 
							|| (this._CONFERENCE1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CONFERENCE1.Entity = null;
						previousValue.DIVISIONs.Remove(this);
					}
					this._CONFERENCE1.Entity = value;
					if ((value != null))
					{
						value.DIVISIONs.Add(this);
						this._Conference = value.CONFERENCE_ID;
					}
					else
					{
						this._Conference = default(int);
					}
					this.SendPropertyChanged("CONFERENCE1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.DIVISION_TEAMS")]
	public partial class DIVISION_TEAM
	{
		
		private int _Division;
		
		private int _Team;
		
		private int _YearJoined;
		
		private System.Nullable<int> _YearLeft;
		
		public DIVISION_TEAM()
		{
		}
		
		[Column(Storage="_Division", DbType="Int NOT NULL")]
		public int Division
		{
			get
			{
				return this._Division;
			}
			set
			{
				if ((this._Division != value))
				{
					this._Division = value;
				}
			}
		}
		
		[Column(Storage="_Team", DbType="Int NOT NULL")]
		public int Team
		{
			get
			{
				return this._Team;
			}
			set
			{
				if ((this._Team != value))
				{
					this._Team = value;
				}
			}
		}
		
		[Column(Storage="_YearJoined", DbType="Int NOT NULL")]
		public int YearJoined
		{
			get
			{
				return this._YearJoined;
			}
			set
			{
				if ((this._YearJoined != value))
				{
					this._YearJoined = value;
				}
			}
		}
		
		[Column(Storage="_YearLeft", DbType="Int")]
		public System.Nullable<int> YearLeft
		{
			get
			{
				return this._YearLeft;
			}
			set
			{
				if ((this._YearLeft != value))
				{
					this._YearLeft = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.TEAMS")]
	public partial class TEAM : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TEAM_ID;
		
		private int _Franchise;
		
		private string _NflComAbbr;
		
		private System.Nullable<int> _EspnId;
		
		private string _EspnAbbr;
		
		private string _City;
		
		private string _Nickname;
		
		private EntitySet<TEAM_PLAYER> _TEAM_PLAYERs;
		
		private EntitySet<PLAYER_GAME_DEFENSE> _PLAYER_GAME_DEFENSEs;
		
		private EntitySet<PLAYER_GAME_FUMBLE> _PLAYER_GAME_FUMBLEs;
		
		private EntitySet<PLAYER_GAME_KICK_RETURN> _PLAYER_GAME_KICK_RETURNs;
		
		private EntitySet<PLAYER_GAME_KICKING> _PLAYER_GAME_KICKINGs;
		
		private EntitySet<PLAYER_GAME_PASSING> _PLAYER_GAME_PASSINGs;
		
		private EntitySet<PLAYER_GAME_PUNT_RETURN> _PLAYER_GAME_PUNT_RETURNs;
		
		private EntitySet<PLAYER_GAME_PUNTING> _PLAYER_GAME_PUNTINGs;
		
		private EntitySet<PLAYER_GAME_RECEIVING> _PLAYER_GAME_RECEIVINGs;
		
		private EntitySet<PLAYER_GAME_RUSHING> _PLAYER_GAME_RUSHINGs;
		
		private EntitySet<GAME> _GAMEs;
		
		private EntitySet<GAME> _GAMEs1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTEAM_IDChanging(int value);
    partial void OnTEAM_IDChanged();
    partial void OnFranchiseChanging(int value);
    partial void OnFranchiseChanged();
    partial void OnNflComAbbrChanging(string value);
    partial void OnNflComAbbrChanged();
    partial void OnEspnIdChanging(System.Nullable<int> value);
    partial void OnEspnIdChanged();
    partial void OnEspnAbbrChanging(string value);
    partial void OnEspnAbbrChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnNicknameChanging(string value);
    partial void OnNicknameChanged();
    #endregion
		
		public TEAM()
		{
			this._TEAM_PLAYERs = new EntitySet<TEAM_PLAYER>(new Action<TEAM_PLAYER>(this.attach_TEAM_PLAYERs), new Action<TEAM_PLAYER>(this.detach_TEAM_PLAYERs));
			this._PLAYER_GAME_DEFENSEs = new EntitySet<PLAYER_GAME_DEFENSE>(new Action<PLAYER_GAME_DEFENSE>(this.attach_PLAYER_GAME_DEFENSEs), new Action<PLAYER_GAME_DEFENSE>(this.detach_PLAYER_GAME_DEFENSEs));
			this._PLAYER_GAME_FUMBLEs = new EntitySet<PLAYER_GAME_FUMBLE>(new Action<PLAYER_GAME_FUMBLE>(this.attach_PLAYER_GAME_FUMBLEs), new Action<PLAYER_GAME_FUMBLE>(this.detach_PLAYER_GAME_FUMBLEs));
			this._PLAYER_GAME_KICK_RETURNs = new EntitySet<PLAYER_GAME_KICK_RETURN>(new Action<PLAYER_GAME_KICK_RETURN>(this.attach_PLAYER_GAME_KICK_RETURNs), new Action<PLAYER_GAME_KICK_RETURN>(this.detach_PLAYER_GAME_KICK_RETURNs));
			this._PLAYER_GAME_KICKINGs = new EntitySet<PLAYER_GAME_KICKING>(new Action<PLAYER_GAME_KICKING>(this.attach_PLAYER_GAME_KICKINGs), new Action<PLAYER_GAME_KICKING>(this.detach_PLAYER_GAME_KICKINGs));
			this._PLAYER_GAME_PASSINGs = new EntitySet<PLAYER_GAME_PASSING>(new Action<PLAYER_GAME_PASSING>(this.attach_PLAYER_GAME_PASSINGs), new Action<PLAYER_GAME_PASSING>(this.detach_PLAYER_GAME_PASSINGs));
			this._PLAYER_GAME_PUNT_RETURNs = new EntitySet<PLAYER_GAME_PUNT_RETURN>(new Action<PLAYER_GAME_PUNT_RETURN>(this.attach_PLAYER_GAME_PUNT_RETURNs), new Action<PLAYER_GAME_PUNT_RETURN>(this.detach_PLAYER_GAME_PUNT_RETURNs));
			this._PLAYER_GAME_PUNTINGs = new EntitySet<PLAYER_GAME_PUNTING>(new Action<PLAYER_GAME_PUNTING>(this.attach_PLAYER_GAME_PUNTINGs), new Action<PLAYER_GAME_PUNTING>(this.detach_PLAYER_GAME_PUNTINGs));
			this._PLAYER_GAME_RECEIVINGs = new EntitySet<PLAYER_GAME_RECEIVING>(new Action<PLAYER_GAME_RECEIVING>(this.attach_PLAYER_GAME_RECEIVINGs), new Action<PLAYER_GAME_RECEIVING>(this.detach_PLAYER_GAME_RECEIVINGs));
			this._PLAYER_GAME_RUSHINGs = new EntitySet<PLAYER_GAME_RUSHING>(new Action<PLAYER_GAME_RUSHING>(this.attach_PLAYER_GAME_RUSHINGs), new Action<PLAYER_GAME_RUSHING>(this.detach_PLAYER_GAME_RUSHINGs));
			this._GAMEs = new EntitySet<GAME>(new Action<GAME>(this.attach_GAMEs), new Action<GAME>(this.detach_GAMEs));
			this._GAMEs1 = new EntitySet<GAME>(new Action<GAME>(this.attach_GAMEs1), new Action<GAME>(this.detach_GAMEs1));
			OnCreated();
		}
		
		[Column(Storage="_TEAM_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TEAM_ID
		{
			get
			{
				return this._TEAM_ID;
			}
			set
			{
				if ((this._TEAM_ID != value))
				{
					this.OnTEAM_IDChanging(value);
					this.SendPropertyChanging();
					this._TEAM_ID = value;
					this.SendPropertyChanged("TEAM_ID");
					this.OnTEAM_IDChanged();
				}
			}
		}
		
		[Column(Storage="_Franchise", DbType="Int NOT NULL")]
		public int Franchise
		{
			get
			{
				return this._Franchise;
			}
			set
			{
				if ((this._Franchise != value))
				{
					this.OnFranchiseChanging(value);
					this.SendPropertyChanging();
					this._Franchise = value;
					this.SendPropertyChanged("Franchise");
					this.OnFranchiseChanged();
				}
			}
		}
		
		[Column(Storage="_NflComAbbr", DbType="VarChar(3)")]
		public string NflComAbbr
		{
			get
			{
				return this._NflComAbbr;
			}
			set
			{
				if ((this._NflComAbbr != value))
				{
					this.OnNflComAbbrChanging(value);
					this.SendPropertyChanging();
					this._NflComAbbr = value;
					this.SendPropertyChanged("NflComAbbr");
					this.OnNflComAbbrChanged();
				}
			}
		}
		
		[Column(Storage="_EspnId", DbType="Int")]
		public System.Nullable<int> EspnId
		{
			get
			{
				return this._EspnId;
			}
			set
			{
				if ((this._EspnId != value))
				{
					this.OnEspnIdChanging(value);
					this.SendPropertyChanging();
					this._EspnId = value;
					this.SendPropertyChanged("EspnId");
					this.OnEspnIdChanged();
				}
			}
		}
		
		[Column(Storage="_EspnAbbr", DbType="VarChar(3)")]
		public string EspnAbbr
		{
			get
			{
				return this._EspnAbbr;
			}
			set
			{
				if ((this._EspnAbbr != value))
				{
					this.OnEspnAbbrChanging(value);
					this.SendPropertyChanging();
					this._EspnAbbr = value;
					this.SendPropertyChanged("EspnAbbr");
					this.OnEspnAbbrChanged();
				}
			}
		}
		
		[Column(Storage="_City", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[Column(Storage="_Nickname", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Nickname
		{
			get
			{
				return this._Nickname;
			}
			set
			{
				if ((this._Nickname != value))
				{
					this.OnNicknameChanging(value);
					this.SendPropertyChanging();
					this._Nickname = value;
					this.SendPropertyChanged("Nickname");
					this.OnNicknameChanged();
				}
			}
		}
		
		[Association(Name="TEAM_TEAM_PLAYER", Storage="_TEAM_PLAYERs", OtherKey="Team")]
		public EntitySet<TEAM_PLAYER> TEAM_PLAYERs
		{
			get
			{
				return this._TEAM_PLAYERs;
			}
			set
			{
				this._TEAM_PLAYERs.Assign(value);
			}
		}
		
		[Association(Name="TEAM_PLAYER_GAME_DEFENSE", Storage="_PLAYER_GAME_DEFENSEs", OtherKey="Team")]
		public EntitySet<PLAYER_GAME_DEFENSE> PLAYER_GAME_DEFENSEs
		{
			get
			{
				return this._PLAYER_GAME_DEFENSEs;
			}
			set
			{
				this._PLAYER_GAME_DEFENSEs.Assign(value);
			}
		}
		
		[Association(Name="TEAM_PLAYER_GAME_FUMBLE", Storage="_PLAYER_GAME_FUMBLEs", OtherKey="Team")]
		public EntitySet<PLAYER_GAME_FUMBLE> PLAYER_GAME_FUMBLEs
		{
			get
			{
				return this._PLAYER_GAME_FUMBLEs;
			}
			set
			{
				this._PLAYER_GAME_FUMBLEs.Assign(value);
			}
		}
		
		[Association(Name="TEAM_PLAYER_GAME_KICK_RETURN", Storage="_PLAYER_GAME_KICK_RETURNs", OtherKey="Team")]
		public EntitySet<PLAYER_GAME_KICK_RETURN> PLAYER_GAME_KICK_RETURNs
		{
			get
			{
				return this._PLAYER_GAME_KICK_RETURNs;
			}
			set
			{
				this._PLAYER_GAME_KICK_RETURNs.Assign(value);
			}
		}
		
		[Association(Name="TEAM_PLAYER_GAME_KICKING", Storage="_PLAYER_GAME_KICKINGs", OtherKey="Team")]
		public EntitySet<PLAYER_GAME_KICKING> PLAYER_GAME_KICKINGs
		{
			get
			{
				return this._PLAYER_GAME_KICKINGs;
			}
			set
			{
				this._PLAYER_GAME_KICKINGs.Assign(value);
			}
		}
		
		[Association(Name="TEAM_PLAYER_GAME_PASSING", Storage="_PLAYER_GAME_PASSINGs", OtherKey="Team")]
		public EntitySet<PLAYER_GAME_PASSING> PLAYER_GAME_PASSINGs
		{
			get
			{
				return this._PLAYER_GAME_PASSINGs;
			}
			set
			{
				this._PLAYER_GAME_PASSINGs.Assign(value);
			}
		}
		
		[Association(Name="TEAM_PLAYER_GAME_PUNT_RETURN", Storage="_PLAYER_GAME_PUNT_RETURNs", OtherKey="Team")]
		public EntitySet<PLAYER_GAME_PUNT_RETURN> PLAYER_GAME_PUNT_RETURNs
		{
			get
			{
				return this._PLAYER_GAME_PUNT_RETURNs;
			}
			set
			{
				this._PLAYER_GAME_PUNT_RETURNs.Assign(value);
			}
		}
		
		[Association(Name="TEAM_PLAYER_GAME_PUNTING", Storage="_PLAYER_GAME_PUNTINGs", OtherKey="Team")]
		public EntitySet<PLAYER_GAME_PUNTING> PLAYER_GAME_PUNTINGs
		{
			get
			{
				return this._PLAYER_GAME_PUNTINGs;
			}
			set
			{
				this._PLAYER_GAME_PUNTINGs.Assign(value);
			}
		}
		
		[Association(Name="TEAM_PLAYER_GAME_RECEIVING", Storage="_PLAYER_GAME_RECEIVINGs", OtherKey="Team")]
		public EntitySet<PLAYER_GAME_RECEIVING> PLAYER_GAME_RECEIVINGs
		{
			get
			{
				return this._PLAYER_GAME_RECEIVINGs;
			}
			set
			{
				this._PLAYER_GAME_RECEIVINGs.Assign(value);
			}
		}
		
		[Association(Name="TEAM_PLAYER_GAME_RUSHING", Storage="_PLAYER_GAME_RUSHINGs", OtherKey="Team")]
		public EntitySet<PLAYER_GAME_RUSHING> PLAYER_GAME_RUSHINGs
		{
			get
			{
				return this._PLAYER_GAME_RUSHINGs;
			}
			set
			{
				this._PLAYER_GAME_RUSHINGs.Assign(value);
			}
		}
		
		[Association(Name="TEAM_GAME", Storage="_GAMEs", OtherKey="AwayTeam")]
		public EntitySet<GAME> GAMEs
		{
			get
			{
				return this._GAMEs;
			}
			set
			{
				this._GAMEs.Assign(value);
			}
		}
		
		[Association(Name="TEAM_GAME1", Storage="_GAMEs1", OtherKey="HomeTeam")]
		public EntitySet<GAME> GAMEs1
		{
			get
			{
				return this._GAMEs1;
			}
			set
			{
				this._GAMEs1.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TEAM_PLAYERs(TEAM_PLAYER entity)
		{
			this.SendPropertyChanging();
			entity.TEAM1 = this;
		}
		
		private void detach_TEAM_PLAYERs(TEAM_PLAYER entity)
		{
			this.SendPropertyChanging();
			entity.TEAM1 = null;
		}
		
		private void attach_PLAYER_GAME_DEFENSEs(PLAYER_GAME_DEFENSE entity)
		{
			this.SendPropertyChanging();
			entity.TEAM1 = this;
		}
		
		private void detach_PLAYER_GAME_DEFENSEs(PLAYER_GAME_DEFENSE entity)
		{
			this.SendPropertyChanging();
			entity.TEAM1 = null;
		}
		
		private void attach_PLAYER_GAME_FUMBLEs(PLAYER_GAME_FUMBLE entity)
		{
			this.SendPropertyChanging();
			entity.TEAM1 = this;
		}
		
		private void detach_PLAYER_GAME_FUMBLEs(PLAYER_GAME_FUMBLE entity)
		{
			this.SendPropertyChanging();
			entity.TEAM1 = null;
		}
		
		private void attach_PLAYER_GAME_KICK_RETURNs(PLAYER_GAME_KICK_RETURN entity)
		{
			this.SendPropertyChanging();
			entity.TEAM1 = this;
		}
		
		private void detach_PLAYER_GAME_KICK_RETURNs(PLAYER_GAME_KICK_RETURN entity)
		{
			this.SendPropertyChanging();
			entity.TEAM1 = null;
		}
		
		private void attach_PLAYER_GAME_KICKINGs(PLAYER_GAME_KICKING entity)
		{
			this.SendPropertyChanging();
			entity.TEAM1 = this;
		}
		
		private void detach_PLAYER_GAME_KICKINGs(PLAYER_GAME_KICKING entity)
		{
			this.SendPropertyChanging();
			entity.TEAM1 = null;
		}
		
		private void attach_PLAYER_GAME_PASSINGs(PLAYER_GAME_PASSING entity)
		{
			this.SendPropertyChanging();
			entity.TEAM1 = this;
		}
		
		private void detach_PLAYER_GAME_PASSINGs(PLAYER_GAME_PASSING entity)
		{
			this.SendPropertyChanging();
			entity.TEAM1 = null;
		}
		
		private void attach_PLAYER_GAME_PUNT_RETURNs(PLAYER_GAME_PUNT_RETURN entity)
		{
			this.SendPropertyChanging();
			entity.TEAM1 = this;
		}
		
		private void detach_PLAYER_GAME_PUNT_RETURNs(PLAYER_GAME_PUNT_RETURN entity)
		{
			this.SendPropertyChanging();
			entity.TEAM1 = null;
		}
		
		private void attach_PLAYER_GAME_PUNTINGs(PLAYER_GAME_PUNTING entity)
		{
			this.SendPropertyChanging();
			entity.TEAM1 = this;
		}
		
		private void detach_PLAYER_GAME_PUNTINGs(PLAYER_GAME_PUNTING entity)
		{
			this.SendPropertyChanging();
			entity.TEAM1 = null;
		}
		
		private void attach_PLAYER_GAME_RECEIVINGs(PLAYER_GAME_RECEIVING entity)
		{
			this.SendPropertyChanging();
			entity.TEAM1 = this;
		}
		
		private void detach_PLAYER_GAME_RECEIVINGs(PLAYER_GAME_RECEIVING entity)
		{
			this.SendPropertyChanging();
			entity.TEAM1 = null;
		}
		
		private void attach_PLAYER_GAME_RUSHINGs(PLAYER_GAME_RUSHING entity)
		{
			this.SendPropertyChanging();
			entity.TEAM1 = this;
		}
		
		private void detach_PLAYER_GAME_RUSHINGs(PLAYER_GAME_RUSHING entity)
		{
			this.SendPropertyChanging();
			entity.TEAM1 = null;
		}
		
		private void attach_GAMEs(GAME entity)
		{
			this.SendPropertyChanging();
			entity.TEAM = this;
		}
		
		private void detach_GAMEs(GAME entity)
		{
			this.SendPropertyChanging();
			entity.TEAM = null;
		}
		
		private void attach_GAMEs1(GAME entity)
		{
			this.SendPropertyChanging();
			entity.TEAM1 = this;
		}
		
		private void detach_GAMEs1(GAME entity)
		{
			this.SendPropertyChanging();
			entity.TEAM1 = null;
		}
	}
	
	[Table(Name="dbo.TEAM_PLAYERS")]
	public partial class TEAM_PLAYER : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Team;
		
		private int _Player;
		
		private int _YearJoined;
		
		private System.Nullable<int> _YearLeft;
		
		private EntityRef<TEAM> _TEAM1;
		
		private EntityRef<PLAYER> _PLAYER1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTeamChanging(int value);
    partial void OnTeamChanged();
    partial void OnPlayerChanging(int value);
    partial void OnPlayerChanged();
    partial void OnYearJoinedChanging(int value);
    partial void OnYearJoinedChanged();
    partial void OnYearLeftChanging(System.Nullable<int> value);
    partial void OnYearLeftChanged();
    #endregion
		
		public TEAM_PLAYER()
		{
			this._TEAM1 = default(EntityRef<TEAM>);
			this._PLAYER1 = default(EntityRef<PLAYER>);
			OnCreated();
		}
		
		[Column(Storage="_Team", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Team
		{
			get
			{
				return this._Team;
			}
			set
			{
				if ((this._Team != value))
				{
					if (this._TEAM1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeamChanging(value);
					this.SendPropertyChanging();
					this._Team = value;
					this.SendPropertyChanged("Team");
					this.OnTeamChanged();
				}
			}
		}
		
		[Column(Storage="_Player", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Player
		{
			get
			{
				return this._Player;
			}
			set
			{
				if ((this._Player != value))
				{
					if (this._PLAYER1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlayerChanging(value);
					this.SendPropertyChanging();
					this._Player = value;
					this.SendPropertyChanged("Player");
					this.OnPlayerChanged();
				}
			}
		}
		
		[Column(Storage="_YearJoined", DbType="Int NOT NULL")]
		public int YearJoined
		{
			get
			{
				return this._YearJoined;
			}
			set
			{
				if ((this._YearJoined != value))
				{
					this.OnYearJoinedChanging(value);
					this.SendPropertyChanging();
					this._YearJoined = value;
					this.SendPropertyChanged("YearJoined");
					this.OnYearJoinedChanged();
				}
			}
		}
		
		[Column(Storage="_YearLeft", DbType="Int")]
		public System.Nullable<int> YearLeft
		{
			get
			{
				return this._YearLeft;
			}
			set
			{
				if ((this._YearLeft != value))
				{
					this.OnYearLeftChanging(value);
					this.SendPropertyChanging();
					this._YearLeft = value;
					this.SendPropertyChanged("YearLeft");
					this.OnYearLeftChanged();
				}
			}
		}
		
		[Association(Name="TEAM_TEAM_PLAYER", Storage="_TEAM1", ThisKey="Team", IsForeignKey=true)]
		public TEAM TEAM1
		{
			get
			{
				return this._TEAM1.Entity;
			}
			set
			{
				TEAM previousValue = this._TEAM1.Entity;
				if (((previousValue != value) 
							|| (this._TEAM1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TEAM1.Entity = null;
						previousValue.TEAM_PLAYERs.Remove(this);
					}
					this._TEAM1.Entity = value;
					if ((value != null))
					{
						value.TEAM_PLAYERs.Add(this);
						this._Team = value.TEAM_ID;
					}
					else
					{
						this._Team = default(int);
					}
					this.SendPropertyChanged("TEAM1");
				}
			}
		}
		
		[Association(Name="PLAYER_TEAM_PLAYER", Storage="_PLAYER1", ThisKey="Player", IsForeignKey=true)]
		public PLAYER PLAYER1
		{
			get
			{
				return this._PLAYER1.Entity;
			}
			set
			{
				PLAYER previousValue = this._PLAYER1.Entity;
				if (((previousValue != value) 
							|| (this._PLAYER1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PLAYER1.Entity = null;
						previousValue.TEAM_PLAYERs.Remove(this);
					}
					this._PLAYER1.Entity = value;
					if ((value != null))
					{
						value.TEAM_PLAYERs.Add(this);
						this._Player = value.PLAYER_ID;
					}
					else
					{
						this._Player = default(int);
					}
					this.SendPropertyChanged("PLAYER1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.PLAYERS")]
	public partial class PLAYER : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PLAYER_ID;
		
		private System.Nullable<int> _NflComId;
		
		private System.Nullable<int> _EspnId;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _FullName;
		
		private string _Position;
		
		private string _Height;
		
		private string _Weight;
		
		private System.Nullable<System.DateTime> _Birthdate;
		
		private string _Birthplace;
		
		private string _College;
		
		private string _Experience;
		
		private string _Drafted;
		
		private EntitySet<TEAM_PLAYER> _TEAM_PLAYERs;
		
		private EntitySet<PLAYER_GAME_DEFENSE> _PLAYER_GAME_DEFENSEs;
		
		private EntitySet<PLAYER_GAME_FUMBLE> _PLAYER_GAME_FUMBLEs;
		
		private EntitySet<PLAYER_GAME_KICK_RETURN> _PLAYER_GAME_KICK_RETURNs;
		
		private EntitySet<PLAYER_GAME_KICKING> _PLAYER_GAME_KICKINGs;
		
		private EntitySet<PLAYER_GAME_PASSING> _PLAYER_GAME_PASSINGs;
		
		private EntitySet<PLAYER_GAME_PUNT_RETURN> _PLAYER_GAME_PUNT_RETURNs;
		
		private EntitySet<PLAYER_GAME_PUNTING> _PLAYER_GAME_PUNTINGs;
		
		private EntitySet<PLAYER_GAME_RECEIVING> _PLAYER_GAME_RECEIVINGs;
		
		private EntitySet<PLAYER_GAME_RUSHING> _PLAYER_GAME_RUSHINGs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPLAYER_IDChanging(int value);
    partial void OnPLAYER_IDChanged();
    partial void OnNflComIdChanging(System.Nullable<int> value);
    partial void OnNflComIdChanged();
    partial void OnEspnIdChanging(System.Nullable<int> value);
    partial void OnEspnIdChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnFullNameChanging(string value);
    partial void OnFullNameChanged();
    partial void OnPositionChanging(string value);
    partial void OnPositionChanged();
    partial void OnHeightChanging(string value);
    partial void OnHeightChanged();
    partial void OnWeightChanging(string value);
    partial void OnWeightChanged();
    partial void OnBirthdateChanging(System.Nullable<System.DateTime> value);
    partial void OnBirthdateChanged();
    partial void OnBirthplaceChanging(string value);
    partial void OnBirthplaceChanged();
    partial void OnCollegeChanging(string value);
    partial void OnCollegeChanged();
    partial void OnExperienceChanging(string value);
    partial void OnExperienceChanged();
    partial void OnDraftedChanging(string value);
    partial void OnDraftedChanged();
    #endregion
		
		public PLAYER()
		{
			this._TEAM_PLAYERs = new EntitySet<TEAM_PLAYER>(new Action<TEAM_PLAYER>(this.attach_TEAM_PLAYERs), new Action<TEAM_PLAYER>(this.detach_TEAM_PLAYERs));
			this._PLAYER_GAME_DEFENSEs = new EntitySet<PLAYER_GAME_DEFENSE>(new Action<PLAYER_GAME_DEFENSE>(this.attach_PLAYER_GAME_DEFENSEs), new Action<PLAYER_GAME_DEFENSE>(this.detach_PLAYER_GAME_DEFENSEs));
			this._PLAYER_GAME_FUMBLEs = new EntitySet<PLAYER_GAME_FUMBLE>(new Action<PLAYER_GAME_FUMBLE>(this.attach_PLAYER_GAME_FUMBLEs), new Action<PLAYER_GAME_FUMBLE>(this.detach_PLAYER_GAME_FUMBLEs));
			this._PLAYER_GAME_KICK_RETURNs = new EntitySet<PLAYER_GAME_KICK_RETURN>(new Action<PLAYER_GAME_KICK_RETURN>(this.attach_PLAYER_GAME_KICK_RETURNs), new Action<PLAYER_GAME_KICK_RETURN>(this.detach_PLAYER_GAME_KICK_RETURNs));
			this._PLAYER_GAME_KICKINGs = new EntitySet<PLAYER_GAME_KICKING>(new Action<PLAYER_GAME_KICKING>(this.attach_PLAYER_GAME_KICKINGs), new Action<PLAYER_GAME_KICKING>(this.detach_PLAYER_GAME_KICKINGs));
			this._PLAYER_GAME_PASSINGs = new EntitySet<PLAYER_GAME_PASSING>(new Action<PLAYER_GAME_PASSING>(this.attach_PLAYER_GAME_PASSINGs), new Action<PLAYER_GAME_PASSING>(this.detach_PLAYER_GAME_PASSINGs));
			this._PLAYER_GAME_PUNT_RETURNs = new EntitySet<PLAYER_GAME_PUNT_RETURN>(new Action<PLAYER_GAME_PUNT_RETURN>(this.attach_PLAYER_GAME_PUNT_RETURNs), new Action<PLAYER_GAME_PUNT_RETURN>(this.detach_PLAYER_GAME_PUNT_RETURNs));
			this._PLAYER_GAME_PUNTINGs = new EntitySet<PLAYER_GAME_PUNTING>(new Action<PLAYER_GAME_PUNTING>(this.attach_PLAYER_GAME_PUNTINGs), new Action<PLAYER_GAME_PUNTING>(this.detach_PLAYER_GAME_PUNTINGs));
			this._PLAYER_GAME_RECEIVINGs = new EntitySet<PLAYER_GAME_RECEIVING>(new Action<PLAYER_GAME_RECEIVING>(this.attach_PLAYER_GAME_RECEIVINGs), new Action<PLAYER_GAME_RECEIVING>(this.detach_PLAYER_GAME_RECEIVINGs));
			this._PLAYER_GAME_RUSHINGs = new EntitySet<PLAYER_GAME_RUSHING>(new Action<PLAYER_GAME_RUSHING>(this.attach_PLAYER_GAME_RUSHINGs), new Action<PLAYER_GAME_RUSHING>(this.detach_PLAYER_GAME_RUSHINGs));
			OnCreated();
		}
		
		[Column(Storage="_PLAYER_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PLAYER_ID
		{
			get
			{
				return this._PLAYER_ID;
			}
			set
			{
				if ((this._PLAYER_ID != value))
				{
					this.OnPLAYER_IDChanging(value);
					this.SendPropertyChanging();
					this._PLAYER_ID = value;
					this.SendPropertyChanged("PLAYER_ID");
					this.OnPLAYER_IDChanged();
				}
			}
		}
		
		[Column(Storage="_NflComId", DbType="Int")]
		public System.Nullable<int> NflComId
		{
			get
			{
				return this._NflComId;
			}
			set
			{
				if ((this._NflComId != value))
				{
					this.OnNflComIdChanging(value);
					this.SendPropertyChanging();
					this._NflComId = value;
					this.SendPropertyChanged("NflComId");
					this.OnNflComIdChanged();
				}
			}
		}
		
		[Column(Storage="_EspnId", DbType="Int")]
		public System.Nullable<int> EspnId
		{
			get
			{
				return this._EspnId;
			}
			set
			{
				if ((this._EspnId != value))
				{
					this.OnEspnIdChanging(value);
					this.SendPropertyChanging();
					this._EspnId = value;
					this.SendPropertyChanged("EspnId");
					this.OnEspnIdChanged();
				}
			}
		}
		
		[Column(Storage="_FirstName", DbType="VarChar(50)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[Column(Storage="_LastName", DbType="VarChar(50)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[Column(Storage="_FullName", DbType="VarChar(100)")]
		public string FullName
		{
			get
			{
				return this._FullName;
			}
			set
			{
				if ((this._FullName != value))
				{
					this.OnFullNameChanging(value);
					this.SendPropertyChanging();
					this._FullName = value;
					this.SendPropertyChanged("FullName");
					this.OnFullNameChanged();
				}
			}
		}
		
		[Column(Storage="_Position", DbType="VarChar(50)")]
		public string Position
		{
			get
			{
				return this._Position;
			}
			set
			{
				if ((this._Position != value))
				{
					this.OnPositionChanging(value);
					this.SendPropertyChanging();
					this._Position = value;
					this.SendPropertyChanged("Position");
					this.OnPositionChanged();
				}
			}
		}
		
		[Column(Storage="_Height", DbType="VarChar(50)")]
		public string Height
		{
			get
			{
				return this._Height;
			}
			set
			{
				if ((this._Height != value))
				{
					this.OnHeightChanging(value);
					this.SendPropertyChanging();
					this._Height = value;
					this.SendPropertyChanged("Height");
					this.OnHeightChanged();
				}
			}
		}
		
		[Column(Storage="_Weight", DbType="VarChar(50)")]
		public string Weight
		{
			get
			{
				return this._Weight;
			}
			set
			{
				if ((this._Weight != value))
				{
					this.OnWeightChanging(value);
					this.SendPropertyChanging();
					this._Weight = value;
					this.SendPropertyChanged("Weight");
					this.OnWeightChanged();
				}
			}
		}
		
		[Column(Storage="_Birthdate", DbType="DateTime")]
		public System.Nullable<System.DateTime> Birthdate
		{
			get
			{
				return this._Birthdate;
			}
			set
			{
				if ((this._Birthdate != value))
				{
					this.OnBirthdateChanging(value);
					this.SendPropertyChanging();
					this._Birthdate = value;
					this.SendPropertyChanged("Birthdate");
					this.OnBirthdateChanged();
				}
			}
		}
		
		[Column(Storage="_Birthplace", DbType="VarChar(100)")]
		public string Birthplace
		{
			get
			{
				return this._Birthplace;
			}
			set
			{
				if ((this._Birthplace != value))
				{
					this.OnBirthplaceChanging(value);
					this.SendPropertyChanging();
					this._Birthplace = value;
					this.SendPropertyChanged("Birthplace");
					this.OnBirthplaceChanged();
				}
			}
		}
		
		[Column(Storage="_College", DbType="VarChar(50)")]
		public string College
		{
			get
			{
				return this._College;
			}
			set
			{
				if ((this._College != value))
				{
					this.OnCollegeChanging(value);
					this.SendPropertyChanging();
					this._College = value;
					this.SendPropertyChanged("College");
					this.OnCollegeChanged();
				}
			}
		}
		
		[Column(Storage="_Experience", DbType="VarChar(50)")]
		public string Experience
		{
			get
			{
				return this._Experience;
			}
			set
			{
				if ((this._Experience != value))
				{
					this.OnExperienceChanging(value);
					this.SendPropertyChanging();
					this._Experience = value;
					this.SendPropertyChanged("Experience");
					this.OnExperienceChanged();
				}
			}
		}
		
		[Column(Storage="_Drafted", DbType="VarChar(100)")]
		public string Drafted
		{
			get
			{
				return this._Drafted;
			}
			set
			{
				if ((this._Drafted != value))
				{
					this.OnDraftedChanging(value);
					this.SendPropertyChanging();
					this._Drafted = value;
					this.SendPropertyChanged("Drafted");
					this.OnDraftedChanged();
				}
			}
		}
		
		[Association(Name="PLAYER_TEAM_PLAYER", Storage="_TEAM_PLAYERs", OtherKey="Player")]
		public EntitySet<TEAM_PLAYER> TEAM_PLAYERs
		{
			get
			{
				return this._TEAM_PLAYERs;
			}
			set
			{
				this._TEAM_PLAYERs.Assign(value);
			}
		}
		
		[Association(Name="PLAYER_PLAYER_GAME_DEFENSE", Storage="_PLAYER_GAME_DEFENSEs", OtherKey="Player")]
		public EntitySet<PLAYER_GAME_DEFENSE> PLAYER_GAME_DEFENSEs
		{
			get
			{
				return this._PLAYER_GAME_DEFENSEs;
			}
			set
			{
				this._PLAYER_GAME_DEFENSEs.Assign(value);
			}
		}
		
		[Association(Name="PLAYER_PLAYER_GAME_FUMBLE", Storage="_PLAYER_GAME_FUMBLEs", OtherKey="Player")]
		public EntitySet<PLAYER_GAME_FUMBLE> PLAYER_GAME_FUMBLEs
		{
			get
			{
				return this._PLAYER_GAME_FUMBLEs;
			}
			set
			{
				this._PLAYER_GAME_FUMBLEs.Assign(value);
			}
		}
		
		[Association(Name="PLAYER_PLAYER_GAME_KICK_RETURN", Storage="_PLAYER_GAME_KICK_RETURNs", OtherKey="Player")]
		public EntitySet<PLAYER_GAME_KICK_RETURN> PLAYER_GAME_KICK_RETURNs
		{
			get
			{
				return this._PLAYER_GAME_KICK_RETURNs;
			}
			set
			{
				this._PLAYER_GAME_KICK_RETURNs.Assign(value);
			}
		}
		
		[Association(Name="PLAYER_PLAYER_GAME_KICKING", Storage="_PLAYER_GAME_KICKINGs", OtherKey="Player")]
		public EntitySet<PLAYER_GAME_KICKING> PLAYER_GAME_KICKINGs
		{
			get
			{
				return this._PLAYER_GAME_KICKINGs;
			}
			set
			{
				this._PLAYER_GAME_KICKINGs.Assign(value);
			}
		}
		
		[Association(Name="PLAYER_PLAYER_GAME_PASSING", Storage="_PLAYER_GAME_PASSINGs", OtherKey="Player")]
		public EntitySet<PLAYER_GAME_PASSING> PLAYER_GAME_PASSINGs
		{
			get
			{
				return this._PLAYER_GAME_PASSINGs;
			}
			set
			{
				this._PLAYER_GAME_PASSINGs.Assign(value);
			}
		}
		
		[Association(Name="PLAYER_PLAYER_GAME_PUNT_RETURN", Storage="_PLAYER_GAME_PUNT_RETURNs", OtherKey="Player")]
		public EntitySet<PLAYER_GAME_PUNT_RETURN> PLAYER_GAME_PUNT_RETURNs
		{
			get
			{
				return this._PLAYER_GAME_PUNT_RETURNs;
			}
			set
			{
				this._PLAYER_GAME_PUNT_RETURNs.Assign(value);
			}
		}
		
		[Association(Name="PLAYER_PLAYER_GAME_PUNTING", Storage="_PLAYER_GAME_PUNTINGs", OtherKey="Player")]
		public EntitySet<PLAYER_GAME_PUNTING> PLAYER_GAME_PUNTINGs
		{
			get
			{
				return this._PLAYER_GAME_PUNTINGs;
			}
			set
			{
				this._PLAYER_GAME_PUNTINGs.Assign(value);
			}
		}
		
		[Association(Name="PLAYER_PLAYER_GAME_RECEIVING", Storage="_PLAYER_GAME_RECEIVINGs", OtherKey="Player")]
		public EntitySet<PLAYER_GAME_RECEIVING> PLAYER_GAME_RECEIVINGs
		{
			get
			{
				return this._PLAYER_GAME_RECEIVINGs;
			}
			set
			{
				this._PLAYER_GAME_RECEIVINGs.Assign(value);
			}
		}
		
		[Association(Name="PLAYER_PLAYER_GAME_RUSHING", Storage="_PLAYER_GAME_RUSHINGs", OtherKey="Player")]
		public EntitySet<PLAYER_GAME_RUSHING> PLAYER_GAME_RUSHINGs
		{
			get
			{
				return this._PLAYER_GAME_RUSHINGs;
			}
			set
			{
				this._PLAYER_GAME_RUSHINGs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TEAM_PLAYERs(TEAM_PLAYER entity)
		{
			this.SendPropertyChanging();
			entity.PLAYER1 = this;
		}
		
		private void detach_TEAM_PLAYERs(TEAM_PLAYER entity)
		{
			this.SendPropertyChanging();
			entity.PLAYER1 = null;
		}
		
		private void attach_PLAYER_GAME_DEFENSEs(PLAYER_GAME_DEFENSE entity)
		{
			this.SendPropertyChanging();
			entity.PLAYER1 = this;
		}
		
		private void detach_PLAYER_GAME_DEFENSEs(PLAYER_GAME_DEFENSE entity)
		{
			this.SendPropertyChanging();
			entity.PLAYER1 = null;
		}
		
		private void attach_PLAYER_GAME_FUMBLEs(PLAYER_GAME_FUMBLE entity)
		{
			this.SendPropertyChanging();
			entity.PLAYER1 = this;
		}
		
		private void detach_PLAYER_GAME_FUMBLEs(PLAYER_GAME_FUMBLE entity)
		{
			this.SendPropertyChanging();
			entity.PLAYER1 = null;
		}
		
		private void attach_PLAYER_GAME_KICK_RETURNs(PLAYER_GAME_KICK_RETURN entity)
		{
			this.SendPropertyChanging();
			entity.PLAYER1 = this;
		}
		
		private void detach_PLAYER_GAME_KICK_RETURNs(PLAYER_GAME_KICK_RETURN entity)
		{
			this.SendPropertyChanging();
			entity.PLAYER1 = null;
		}
		
		private void attach_PLAYER_GAME_KICKINGs(PLAYER_GAME_KICKING entity)
		{
			this.SendPropertyChanging();
			entity.PLAYER1 = this;
		}
		
		private void detach_PLAYER_GAME_KICKINGs(PLAYER_GAME_KICKING entity)
		{
			this.SendPropertyChanging();
			entity.PLAYER1 = null;
		}
		
		private void attach_PLAYER_GAME_PASSINGs(PLAYER_GAME_PASSING entity)
		{
			this.SendPropertyChanging();
			entity.PLAYER1 = this;
		}
		
		private void detach_PLAYER_GAME_PASSINGs(PLAYER_GAME_PASSING entity)
		{
			this.SendPropertyChanging();
			entity.PLAYER1 = null;
		}
		
		private void attach_PLAYER_GAME_PUNT_RETURNs(PLAYER_GAME_PUNT_RETURN entity)
		{
			this.SendPropertyChanging();
			entity.PLAYER1 = this;
		}
		
		private void detach_PLAYER_GAME_PUNT_RETURNs(PLAYER_GAME_PUNT_RETURN entity)
		{
			this.SendPropertyChanging();
			entity.PLAYER1 = null;
		}
		
		private void attach_PLAYER_GAME_PUNTINGs(PLAYER_GAME_PUNTING entity)
		{
			this.SendPropertyChanging();
			entity.PLAYER1 = this;
		}
		
		private void detach_PLAYER_GAME_PUNTINGs(PLAYER_GAME_PUNTING entity)
		{
			this.SendPropertyChanging();
			entity.PLAYER1 = null;
		}
		
		private void attach_PLAYER_GAME_RECEIVINGs(PLAYER_GAME_RECEIVING entity)
		{
			this.SendPropertyChanging();
			entity.PLAYER1 = this;
		}
		
		private void detach_PLAYER_GAME_RECEIVINGs(PLAYER_GAME_RECEIVING entity)
		{
			this.SendPropertyChanging();
			entity.PLAYER1 = null;
		}
		
		private void attach_PLAYER_GAME_RUSHINGs(PLAYER_GAME_RUSHING entity)
		{
			this.SendPropertyChanging();
			entity.PLAYER1 = this;
		}
		
		private void detach_PLAYER_GAME_RUSHINGs(PLAYER_GAME_RUSHING entity)
		{
			this.SendPropertyChanging();
			entity.PLAYER1 = null;
		}
	}
	
	[Table(Name="dbo.PLAYER_GAME_DEFENSE")]
	public partial class PLAYER_GAME_DEFENSE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Player;
		
		private int _Game;
		
		private int _Team;
		
		private double _Tackles;
		
		private int _Assists;
		
		private double _Sacks;
		
		private int _Interceptions;
		
		private System.Nullable<int> _ReturnYards;
		
		private System.Nullable<int> _Touchdowns;
		
		private System.Nullable<int> _ForcedFumbles;
		
		private EntityRef<PLAYER> _PLAYER1;
		
		private EntityRef<TEAM> _TEAM1;
		
		private EntityRef<GAME> _GAME1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPlayerChanging(int value);
    partial void OnPlayerChanged();
    partial void OnGameChanging(int value);
    partial void OnGameChanged();
    partial void OnTeamChanging(int value);
    partial void OnTeamChanged();
    partial void OnTacklesChanging(double value);
    partial void OnTacklesChanged();
    partial void OnAssistsChanging(int value);
    partial void OnAssistsChanged();
    partial void OnSacksChanging(double value);
    partial void OnSacksChanged();
    partial void OnInterceptionsChanging(int value);
    partial void OnInterceptionsChanged();
    partial void OnReturnYardsChanging(System.Nullable<int> value);
    partial void OnReturnYardsChanged();
    partial void OnTouchdownsChanging(System.Nullable<int> value);
    partial void OnTouchdownsChanged();
    partial void OnForcedFumblesChanging(System.Nullable<int> value);
    partial void OnForcedFumblesChanged();
    #endregion
		
		public PLAYER_GAME_DEFENSE()
		{
			this._PLAYER1 = default(EntityRef<PLAYER>);
			this._TEAM1 = default(EntityRef<TEAM>);
			this._GAME1 = default(EntityRef<GAME>);
			OnCreated();
		}
		
		[Column(Storage="_Player", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Player
		{
			get
			{
				return this._Player;
			}
			set
			{
				if ((this._Player != value))
				{
					if (this._PLAYER1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlayerChanging(value);
					this.SendPropertyChanging();
					this._Player = value;
					this.SendPropertyChanged("Player");
					this.OnPlayerChanged();
				}
			}
		}
		
		[Column(Storage="_Game", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Game
		{
			get
			{
				return this._Game;
			}
			set
			{
				if ((this._Game != value))
				{
					if (this._GAME1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGameChanging(value);
					this.SendPropertyChanging();
					this._Game = value;
					this.SendPropertyChanged("Game");
					this.OnGameChanged();
				}
			}
		}
		
		[Column(Storage="_Team", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Team
		{
			get
			{
				return this._Team;
			}
			set
			{
				if ((this._Team != value))
				{
					if (this._TEAM1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeamChanging(value);
					this.SendPropertyChanging();
					this._Team = value;
					this.SendPropertyChanged("Team");
					this.OnTeamChanged();
				}
			}
		}
		
		[Column(Storage="_Tackles", DbType="Float NOT NULL")]
		public double Tackles
		{
			get
			{
				return this._Tackles;
			}
			set
			{
				if ((this._Tackles != value))
				{
					this.OnTacklesChanging(value);
					this.SendPropertyChanging();
					this._Tackles = value;
					this.SendPropertyChanged("Tackles");
					this.OnTacklesChanged();
				}
			}
		}
		
		[Column(Storage="_Assists", DbType="Int NOT NULL")]
		public int Assists
		{
			get
			{
				return this._Assists;
			}
			set
			{
				if ((this._Assists != value))
				{
					this.OnAssistsChanging(value);
					this.SendPropertyChanging();
					this._Assists = value;
					this.SendPropertyChanged("Assists");
					this.OnAssistsChanged();
				}
			}
		}
		
		[Column(Storage="_Sacks", DbType="Float NOT NULL")]
		public double Sacks
		{
			get
			{
				return this._Sacks;
			}
			set
			{
				if ((this._Sacks != value))
				{
					this.OnSacksChanging(value);
					this.SendPropertyChanging();
					this._Sacks = value;
					this.SendPropertyChanged("Sacks");
					this.OnSacksChanged();
				}
			}
		}
		
		[Column(Storage="_Interceptions", DbType="Int NOT NULL")]
		public int Interceptions
		{
			get
			{
				return this._Interceptions;
			}
			set
			{
				if ((this._Interceptions != value))
				{
					this.OnInterceptionsChanging(value);
					this.SendPropertyChanging();
					this._Interceptions = value;
					this.SendPropertyChanged("Interceptions");
					this.OnInterceptionsChanged();
				}
			}
		}
		
		[Column(Storage="_ReturnYards", DbType="Int")]
		public System.Nullable<int> ReturnYards
		{
			get
			{
				return this._ReturnYards;
			}
			set
			{
				if ((this._ReturnYards != value))
				{
					this.OnReturnYardsChanging(value);
					this.SendPropertyChanging();
					this._ReturnYards = value;
					this.SendPropertyChanged("ReturnYards");
					this.OnReturnYardsChanged();
				}
			}
		}
		
		[Column(Storage="_Touchdowns", DbType="Int")]
		public System.Nullable<int> Touchdowns
		{
			get
			{
				return this._Touchdowns;
			}
			set
			{
				if ((this._Touchdowns != value))
				{
					this.OnTouchdownsChanging(value);
					this.SendPropertyChanging();
					this._Touchdowns = value;
					this.SendPropertyChanged("Touchdowns");
					this.OnTouchdownsChanged();
				}
			}
		}
		
		[Column(Storage="_ForcedFumbles", DbType="Int")]
		public System.Nullable<int> ForcedFumbles
		{
			get
			{
				return this._ForcedFumbles;
			}
			set
			{
				if ((this._ForcedFumbles != value))
				{
					this.OnForcedFumblesChanging(value);
					this.SendPropertyChanging();
					this._ForcedFumbles = value;
					this.SendPropertyChanged("ForcedFumbles");
					this.OnForcedFumblesChanged();
				}
			}
		}
		
		[Association(Name="PLAYER_PLAYER_GAME_DEFENSE", Storage="_PLAYER1", ThisKey="Player", IsForeignKey=true)]
		public PLAYER PLAYER1
		{
			get
			{
				return this._PLAYER1.Entity;
			}
			set
			{
				PLAYER previousValue = this._PLAYER1.Entity;
				if (((previousValue != value) 
							|| (this._PLAYER1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PLAYER1.Entity = null;
						previousValue.PLAYER_GAME_DEFENSEs.Remove(this);
					}
					this._PLAYER1.Entity = value;
					if ((value != null))
					{
						value.PLAYER_GAME_DEFENSEs.Add(this);
						this._Player = value.PLAYER_ID;
					}
					else
					{
						this._Player = default(int);
					}
					this.SendPropertyChanged("PLAYER1");
				}
			}
		}
		
		[Association(Name="TEAM_PLAYER_GAME_DEFENSE", Storage="_TEAM1", ThisKey="Team", IsForeignKey=true)]
		public TEAM TEAM1
		{
			get
			{
				return this._TEAM1.Entity;
			}
			set
			{
				TEAM previousValue = this._TEAM1.Entity;
				if (((previousValue != value) 
							|| (this._TEAM1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TEAM1.Entity = null;
						previousValue.PLAYER_GAME_DEFENSEs.Remove(this);
					}
					this._TEAM1.Entity = value;
					if ((value != null))
					{
						value.PLAYER_GAME_DEFENSEs.Add(this);
						this._Team = value.TEAM_ID;
					}
					else
					{
						this._Team = default(int);
					}
					this.SendPropertyChanged("TEAM1");
				}
			}
		}
		
		[Association(Name="GAME_PLAYER_GAME_DEFENSE", Storage="_GAME1", ThisKey="Game", IsForeignKey=true)]
		public GAME GAME1
		{
			get
			{
				return this._GAME1.Entity;
			}
			set
			{
				GAME previousValue = this._GAME1.Entity;
				if (((previousValue != value) 
							|| (this._GAME1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GAME1.Entity = null;
						previousValue.PLAYER_GAME_DEFENSEs.Remove(this);
					}
					this._GAME1.Entity = value;
					if ((value != null))
					{
						value.PLAYER_GAME_DEFENSEs.Add(this);
						this._Game = value.GAME_ID;
					}
					else
					{
						this._Game = default(int);
					}
					this.SendPropertyChanged("GAME1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.PLAYER_GAME_FUMBLES")]
	public partial class PLAYER_GAME_FUMBLE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Player;
		
		private int _Game;
		
		private int _Team;
		
		private int _Fumbles;
		
		private int _Lost;
		
		private int _Recovered;
		
		private System.Nullable<int> _ReturnYards;
		
		private EntityRef<PLAYER> _PLAYER1;
		
		private EntityRef<TEAM> _TEAM1;
		
		private EntityRef<GAME> _GAME1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPlayerChanging(int value);
    partial void OnPlayerChanged();
    partial void OnGameChanging(int value);
    partial void OnGameChanged();
    partial void OnTeamChanging(int value);
    partial void OnTeamChanged();
    partial void OnFumblesChanging(int value);
    partial void OnFumblesChanged();
    partial void OnLostChanging(int value);
    partial void OnLostChanged();
    partial void OnRecoveredChanging(int value);
    partial void OnRecoveredChanged();
    partial void OnReturnYardsChanging(System.Nullable<int> value);
    partial void OnReturnYardsChanged();
    #endregion
		
		public PLAYER_GAME_FUMBLE()
		{
			this._PLAYER1 = default(EntityRef<PLAYER>);
			this._TEAM1 = default(EntityRef<TEAM>);
			this._GAME1 = default(EntityRef<GAME>);
			OnCreated();
		}
		
		[Column(Storage="_Player", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Player
		{
			get
			{
				return this._Player;
			}
			set
			{
				if ((this._Player != value))
				{
					if (this._PLAYER1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlayerChanging(value);
					this.SendPropertyChanging();
					this._Player = value;
					this.SendPropertyChanged("Player");
					this.OnPlayerChanged();
				}
			}
		}
		
		[Column(Storage="_Game", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Game
		{
			get
			{
				return this._Game;
			}
			set
			{
				if ((this._Game != value))
				{
					if (this._GAME1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGameChanging(value);
					this.SendPropertyChanging();
					this._Game = value;
					this.SendPropertyChanged("Game");
					this.OnGameChanged();
				}
			}
		}
		
		[Column(Storage="_Team", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Team
		{
			get
			{
				return this._Team;
			}
			set
			{
				if ((this._Team != value))
				{
					if (this._TEAM1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeamChanging(value);
					this.SendPropertyChanging();
					this._Team = value;
					this.SendPropertyChanged("Team");
					this.OnTeamChanged();
				}
			}
		}
		
		[Column(Storage="_Fumbles", DbType="Int NOT NULL")]
		public int Fumbles
		{
			get
			{
				return this._Fumbles;
			}
			set
			{
				if ((this._Fumbles != value))
				{
					this.OnFumblesChanging(value);
					this.SendPropertyChanging();
					this._Fumbles = value;
					this.SendPropertyChanged("Fumbles");
					this.OnFumblesChanged();
				}
			}
		}
		
		[Column(Storage="_Lost", DbType="Int NOT NULL")]
		public int Lost
		{
			get
			{
				return this._Lost;
			}
			set
			{
				if ((this._Lost != value))
				{
					this.OnLostChanging(value);
					this.SendPropertyChanging();
					this._Lost = value;
					this.SendPropertyChanged("Lost");
					this.OnLostChanged();
				}
			}
		}
		
		[Column(Storage="_Recovered", DbType="Int NOT NULL")]
		public int Recovered
		{
			get
			{
				return this._Recovered;
			}
			set
			{
				if ((this._Recovered != value))
				{
					this.OnRecoveredChanging(value);
					this.SendPropertyChanging();
					this._Recovered = value;
					this.SendPropertyChanged("Recovered");
					this.OnRecoveredChanged();
				}
			}
		}
		
		[Column(Storage="_ReturnYards", DbType="Int")]
		public System.Nullable<int> ReturnYards
		{
			get
			{
				return this._ReturnYards;
			}
			set
			{
				if ((this._ReturnYards != value))
				{
					this.OnReturnYardsChanging(value);
					this.SendPropertyChanging();
					this._ReturnYards = value;
					this.SendPropertyChanged("ReturnYards");
					this.OnReturnYardsChanged();
				}
			}
		}
		
		[Association(Name="PLAYER_PLAYER_GAME_FUMBLE", Storage="_PLAYER1", ThisKey="Player", IsForeignKey=true)]
		public PLAYER PLAYER1
		{
			get
			{
				return this._PLAYER1.Entity;
			}
			set
			{
				PLAYER previousValue = this._PLAYER1.Entity;
				if (((previousValue != value) 
							|| (this._PLAYER1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PLAYER1.Entity = null;
						previousValue.PLAYER_GAME_FUMBLEs.Remove(this);
					}
					this._PLAYER1.Entity = value;
					if ((value != null))
					{
						value.PLAYER_GAME_FUMBLEs.Add(this);
						this._Player = value.PLAYER_ID;
					}
					else
					{
						this._Player = default(int);
					}
					this.SendPropertyChanged("PLAYER1");
				}
			}
		}
		
		[Association(Name="TEAM_PLAYER_GAME_FUMBLE", Storage="_TEAM1", ThisKey="Team", IsForeignKey=true)]
		public TEAM TEAM1
		{
			get
			{
				return this._TEAM1.Entity;
			}
			set
			{
				TEAM previousValue = this._TEAM1.Entity;
				if (((previousValue != value) 
							|| (this._TEAM1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TEAM1.Entity = null;
						previousValue.PLAYER_GAME_FUMBLEs.Remove(this);
					}
					this._TEAM1.Entity = value;
					if ((value != null))
					{
						value.PLAYER_GAME_FUMBLEs.Add(this);
						this._Team = value.TEAM_ID;
					}
					else
					{
						this._Team = default(int);
					}
					this.SendPropertyChanged("TEAM1");
				}
			}
		}
		
		[Association(Name="GAME_PLAYER_GAME_FUMBLE", Storage="_GAME1", ThisKey="Game", IsForeignKey=true)]
		public GAME GAME1
		{
			get
			{
				return this._GAME1.Entity;
			}
			set
			{
				GAME previousValue = this._GAME1.Entity;
				if (((previousValue != value) 
							|| (this._GAME1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GAME1.Entity = null;
						previousValue.PLAYER_GAME_FUMBLEs.Remove(this);
					}
					this._GAME1.Entity = value;
					if ((value != null))
					{
						value.PLAYER_GAME_FUMBLEs.Add(this);
						this._Game = value.GAME_ID;
					}
					else
					{
						this._Game = default(int);
					}
					this.SendPropertyChanged("GAME1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.PLAYER_GAME_KICK_RETURNS")]
	public partial class PLAYER_GAME_KICK_RETURN : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Player;
		
		private int _Game;
		
		private int _Team;
		
		private int _Number;
		
		private int _Yards;
		
		private int _Long;
		
		private System.Nullable<int> _Touchdowns;
		
		private EntityRef<PLAYER> _PLAYER1;
		
		private EntityRef<TEAM> _TEAM1;
		
		private EntityRef<GAME> _GAME1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPlayerChanging(int value);
    partial void OnPlayerChanged();
    partial void OnGameChanging(int value);
    partial void OnGameChanged();
    partial void OnTeamChanging(int value);
    partial void OnTeamChanged();
    partial void OnNumberChanging(int value);
    partial void OnNumberChanged();
    partial void OnYardsChanging(int value);
    partial void OnYardsChanged();
    partial void OnLongChanging(int value);
    partial void OnLongChanged();
    partial void OnTouchdownsChanging(System.Nullable<int> value);
    partial void OnTouchdownsChanged();
    #endregion
		
		public PLAYER_GAME_KICK_RETURN()
		{
			this._PLAYER1 = default(EntityRef<PLAYER>);
			this._TEAM1 = default(EntityRef<TEAM>);
			this._GAME1 = default(EntityRef<GAME>);
			OnCreated();
		}
		
		[Column(Storage="_Player", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Player
		{
			get
			{
				return this._Player;
			}
			set
			{
				if ((this._Player != value))
				{
					if (this._PLAYER1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlayerChanging(value);
					this.SendPropertyChanging();
					this._Player = value;
					this.SendPropertyChanged("Player");
					this.OnPlayerChanged();
				}
			}
		}
		
		[Column(Storage="_Game", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Game
		{
			get
			{
				return this._Game;
			}
			set
			{
				if ((this._Game != value))
				{
					if (this._GAME1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGameChanging(value);
					this.SendPropertyChanging();
					this._Game = value;
					this.SendPropertyChanged("Game");
					this.OnGameChanged();
				}
			}
		}
		
		[Column(Storage="_Team", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Team
		{
			get
			{
				return this._Team;
			}
			set
			{
				if ((this._Team != value))
				{
					if (this._TEAM1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeamChanging(value);
					this.SendPropertyChanging();
					this._Team = value;
					this.SendPropertyChanged("Team");
					this.OnTeamChanged();
				}
			}
		}
		
		[Column(Storage="_Number", DbType="Int NOT NULL")]
		public int Number
		{
			get
			{
				return this._Number;
			}
			set
			{
				if ((this._Number != value))
				{
					this.OnNumberChanging(value);
					this.SendPropertyChanging();
					this._Number = value;
					this.SendPropertyChanged("Number");
					this.OnNumberChanged();
				}
			}
		}
		
		[Column(Storage="_Yards", DbType="Int NOT NULL")]
		public int Yards
		{
			get
			{
				return this._Yards;
			}
			set
			{
				if ((this._Yards != value))
				{
					this.OnYardsChanging(value);
					this.SendPropertyChanging();
					this._Yards = value;
					this.SendPropertyChanged("Yards");
					this.OnYardsChanged();
				}
			}
		}
		
		[Column(Storage="_Long", DbType="Int NOT NULL")]
		public int Long
		{
			get
			{
				return this._Long;
			}
			set
			{
				if ((this._Long != value))
				{
					this.OnLongChanging(value);
					this.SendPropertyChanging();
					this._Long = value;
					this.SendPropertyChanged("Long");
					this.OnLongChanged();
				}
			}
		}
		
		[Column(Storage="_Touchdowns", DbType="Int")]
		public System.Nullable<int> Touchdowns
		{
			get
			{
				return this._Touchdowns;
			}
			set
			{
				if ((this._Touchdowns != value))
				{
					this.OnTouchdownsChanging(value);
					this.SendPropertyChanging();
					this._Touchdowns = value;
					this.SendPropertyChanged("Touchdowns");
					this.OnTouchdownsChanged();
				}
			}
		}
		
		[Association(Name="PLAYER_PLAYER_GAME_KICK_RETURN", Storage="_PLAYER1", ThisKey="Player", IsForeignKey=true)]
		public PLAYER PLAYER1
		{
			get
			{
				return this._PLAYER1.Entity;
			}
			set
			{
				PLAYER previousValue = this._PLAYER1.Entity;
				if (((previousValue != value) 
							|| (this._PLAYER1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PLAYER1.Entity = null;
						previousValue.PLAYER_GAME_KICK_RETURNs.Remove(this);
					}
					this._PLAYER1.Entity = value;
					if ((value != null))
					{
						value.PLAYER_GAME_KICK_RETURNs.Add(this);
						this._Player = value.PLAYER_ID;
					}
					else
					{
						this._Player = default(int);
					}
					this.SendPropertyChanged("PLAYER1");
				}
			}
		}
		
		[Association(Name="TEAM_PLAYER_GAME_KICK_RETURN", Storage="_TEAM1", ThisKey="Team", IsForeignKey=true)]
		public TEAM TEAM1
		{
			get
			{
				return this._TEAM1.Entity;
			}
			set
			{
				TEAM previousValue = this._TEAM1.Entity;
				if (((previousValue != value) 
							|| (this._TEAM1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TEAM1.Entity = null;
						previousValue.PLAYER_GAME_KICK_RETURNs.Remove(this);
					}
					this._TEAM1.Entity = value;
					if ((value != null))
					{
						value.PLAYER_GAME_KICK_RETURNs.Add(this);
						this._Team = value.TEAM_ID;
					}
					else
					{
						this._Team = default(int);
					}
					this.SendPropertyChanged("TEAM1");
				}
			}
		}
		
		[Association(Name="GAME_PLAYER_GAME_KICK_RETURN", Storage="_GAME1", ThisKey="Game", IsForeignKey=true)]
		public GAME GAME1
		{
			get
			{
				return this._GAME1.Entity;
			}
			set
			{
				GAME previousValue = this._GAME1.Entity;
				if (((previousValue != value) 
							|| (this._GAME1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GAME1.Entity = null;
						previousValue.PLAYER_GAME_KICK_RETURNs.Remove(this);
					}
					this._GAME1.Entity = value;
					if ((value != null))
					{
						value.PLAYER_GAME_KICK_RETURNs.Add(this);
						this._Game = value.GAME_ID;
					}
					else
					{
						this._Game = default(int);
					}
					this.SendPropertyChanged("GAME1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.PLAYER_GAME_KICKING")]
	public partial class PLAYER_GAME_KICKING : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Player;
		
		private int _Game;
		
		private int _Team;
		
		private int _Attempts;
		
		private int _Made;
		
		private int _Long;
		
		private int _ExtraPointAttempts;
		
		private int _ExtraPoints;
		
		private EntityRef<PLAYER> _PLAYER1;
		
		private EntityRef<TEAM> _TEAM1;
		
		private EntityRef<GAME> _GAME1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPlayerChanging(int value);
    partial void OnPlayerChanged();
    partial void OnGameChanging(int value);
    partial void OnGameChanged();
    partial void OnTeamChanging(int value);
    partial void OnTeamChanged();
    partial void OnAttemptsChanging(int value);
    partial void OnAttemptsChanged();
    partial void OnMadeChanging(int value);
    partial void OnMadeChanged();
    partial void OnLongChanging(int value);
    partial void OnLongChanged();
    partial void OnExtraPointAttemptsChanging(int value);
    partial void OnExtraPointAttemptsChanged();
    partial void OnExtraPointsChanging(int value);
    partial void OnExtraPointsChanged();
    #endregion
		
		public PLAYER_GAME_KICKING()
		{
			this._PLAYER1 = default(EntityRef<PLAYER>);
			this._TEAM1 = default(EntityRef<TEAM>);
			this._GAME1 = default(EntityRef<GAME>);
			OnCreated();
		}
		
		[Column(Storage="_Player", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Player
		{
			get
			{
				return this._Player;
			}
			set
			{
				if ((this._Player != value))
				{
					if (this._PLAYER1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlayerChanging(value);
					this.SendPropertyChanging();
					this._Player = value;
					this.SendPropertyChanged("Player");
					this.OnPlayerChanged();
				}
			}
		}
		
		[Column(Storage="_Game", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Game
		{
			get
			{
				return this._Game;
			}
			set
			{
				if ((this._Game != value))
				{
					if (this._GAME1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGameChanging(value);
					this.SendPropertyChanging();
					this._Game = value;
					this.SendPropertyChanged("Game");
					this.OnGameChanged();
				}
			}
		}
		
		[Column(Storage="_Team", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Team
		{
			get
			{
				return this._Team;
			}
			set
			{
				if ((this._Team != value))
				{
					if (this._TEAM1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeamChanging(value);
					this.SendPropertyChanging();
					this._Team = value;
					this.SendPropertyChanged("Team");
					this.OnTeamChanged();
				}
			}
		}
		
		[Column(Storage="_Attempts", DbType="Int NOT NULL")]
		public int Attempts
		{
			get
			{
				return this._Attempts;
			}
			set
			{
				if ((this._Attempts != value))
				{
					this.OnAttemptsChanging(value);
					this.SendPropertyChanging();
					this._Attempts = value;
					this.SendPropertyChanged("Attempts");
					this.OnAttemptsChanged();
				}
			}
		}
		
		[Column(Storage="_Made", DbType="Int NOT NULL")]
		public int Made
		{
			get
			{
				return this._Made;
			}
			set
			{
				if ((this._Made != value))
				{
					this.OnMadeChanging(value);
					this.SendPropertyChanging();
					this._Made = value;
					this.SendPropertyChanged("Made");
					this.OnMadeChanged();
				}
			}
		}
		
		[Column(Storage="_Long", DbType="Int NOT NULL")]
		public int Long
		{
			get
			{
				return this._Long;
			}
			set
			{
				if ((this._Long != value))
				{
					this.OnLongChanging(value);
					this.SendPropertyChanging();
					this._Long = value;
					this.SendPropertyChanged("Long");
					this.OnLongChanged();
				}
			}
		}
		
		[Column(Storage="_ExtraPointAttempts", DbType="Int NOT NULL")]
		public int ExtraPointAttempts
		{
			get
			{
				return this._ExtraPointAttempts;
			}
			set
			{
				if ((this._ExtraPointAttempts != value))
				{
					this.OnExtraPointAttemptsChanging(value);
					this.SendPropertyChanging();
					this._ExtraPointAttempts = value;
					this.SendPropertyChanged("ExtraPointAttempts");
					this.OnExtraPointAttemptsChanged();
				}
			}
		}
		
		[Column(Storage="_ExtraPoints", DbType="Int NOT NULL")]
		public int ExtraPoints
		{
			get
			{
				return this._ExtraPoints;
			}
			set
			{
				if ((this._ExtraPoints != value))
				{
					this.OnExtraPointsChanging(value);
					this.SendPropertyChanging();
					this._ExtraPoints = value;
					this.SendPropertyChanged("ExtraPoints");
					this.OnExtraPointsChanged();
				}
			}
		}
		
		[Association(Name="PLAYER_PLAYER_GAME_KICKING", Storage="_PLAYER1", ThisKey="Player", IsForeignKey=true)]
		public PLAYER PLAYER1
		{
			get
			{
				return this._PLAYER1.Entity;
			}
			set
			{
				PLAYER previousValue = this._PLAYER1.Entity;
				if (((previousValue != value) 
							|| (this._PLAYER1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PLAYER1.Entity = null;
						previousValue.PLAYER_GAME_KICKINGs.Remove(this);
					}
					this._PLAYER1.Entity = value;
					if ((value != null))
					{
						value.PLAYER_GAME_KICKINGs.Add(this);
						this._Player = value.PLAYER_ID;
					}
					else
					{
						this._Player = default(int);
					}
					this.SendPropertyChanged("PLAYER1");
				}
			}
		}
		
		[Association(Name="TEAM_PLAYER_GAME_KICKING", Storage="_TEAM1", ThisKey="Team", IsForeignKey=true)]
		public TEAM TEAM1
		{
			get
			{
				return this._TEAM1.Entity;
			}
			set
			{
				TEAM previousValue = this._TEAM1.Entity;
				if (((previousValue != value) 
							|| (this._TEAM1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TEAM1.Entity = null;
						previousValue.PLAYER_GAME_KICKINGs.Remove(this);
					}
					this._TEAM1.Entity = value;
					if ((value != null))
					{
						value.PLAYER_GAME_KICKINGs.Add(this);
						this._Team = value.TEAM_ID;
					}
					else
					{
						this._Team = default(int);
					}
					this.SendPropertyChanged("TEAM1");
				}
			}
		}
		
		[Association(Name="GAME_PLAYER_GAME_KICKING", Storage="_GAME1", ThisKey="Game", IsForeignKey=true)]
		public GAME GAME1
		{
			get
			{
				return this._GAME1.Entity;
			}
			set
			{
				GAME previousValue = this._GAME1.Entity;
				if (((previousValue != value) 
							|| (this._GAME1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GAME1.Entity = null;
						previousValue.PLAYER_GAME_KICKINGs.Remove(this);
					}
					this._GAME1.Entity = value;
					if ((value != null))
					{
						value.PLAYER_GAME_KICKINGs.Add(this);
						this._Game = value.GAME_ID;
					}
					else
					{
						this._Game = default(int);
					}
					this.SendPropertyChanged("GAME1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.PLAYER_GAME_PASSING")]
	public partial class PLAYER_GAME_PASSING : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Player;
		
		private int _Game;
		
		private int _Team;
		
		private int _Attempts;
		
		private int _Completions;
		
		private int _Yards;
		
		private int _Touchdowns;
		
		private int _Interceptions;
		
		private EntityRef<PLAYER> _PLAYER1;
		
		private EntityRef<TEAM> _TEAM1;
		
		private EntityRef<GAME> _GAME1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPlayerChanging(int value);
    partial void OnPlayerChanged();
    partial void OnGameChanging(int value);
    partial void OnGameChanged();
    partial void OnTeamChanging(int value);
    partial void OnTeamChanged();
    partial void OnAttemptsChanging(int value);
    partial void OnAttemptsChanged();
    partial void OnCompletionsChanging(int value);
    partial void OnCompletionsChanged();
    partial void OnYardsChanging(int value);
    partial void OnYardsChanged();
    partial void OnTouchdownsChanging(int value);
    partial void OnTouchdownsChanged();
    partial void OnInterceptionsChanging(int value);
    partial void OnInterceptionsChanged();
    #endregion
		
		public PLAYER_GAME_PASSING()
		{
			this._PLAYER1 = default(EntityRef<PLAYER>);
			this._TEAM1 = default(EntityRef<TEAM>);
			this._GAME1 = default(EntityRef<GAME>);
			OnCreated();
		}
		
		[Column(Storage="_Player", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Player
		{
			get
			{
				return this._Player;
			}
			set
			{
				if ((this._Player != value))
				{
					if (this._PLAYER1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlayerChanging(value);
					this.SendPropertyChanging();
					this._Player = value;
					this.SendPropertyChanged("Player");
					this.OnPlayerChanged();
				}
			}
		}
		
		[Column(Storage="_Game", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Game
		{
			get
			{
				return this._Game;
			}
			set
			{
				if ((this._Game != value))
				{
					if (this._GAME1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGameChanging(value);
					this.SendPropertyChanging();
					this._Game = value;
					this.SendPropertyChanged("Game");
					this.OnGameChanged();
				}
			}
		}
		
		[Column(Storage="_Team", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Team
		{
			get
			{
				return this._Team;
			}
			set
			{
				if ((this._Team != value))
				{
					if (this._TEAM1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeamChanging(value);
					this.SendPropertyChanging();
					this._Team = value;
					this.SendPropertyChanged("Team");
					this.OnTeamChanged();
				}
			}
		}
		
		[Column(Storage="_Attempts", DbType="Int NOT NULL")]
		public int Attempts
		{
			get
			{
				return this._Attempts;
			}
			set
			{
				if ((this._Attempts != value))
				{
					this.OnAttemptsChanging(value);
					this.SendPropertyChanging();
					this._Attempts = value;
					this.SendPropertyChanged("Attempts");
					this.OnAttemptsChanged();
				}
			}
		}
		
		[Column(Storage="_Completions", DbType="Int NOT NULL")]
		public int Completions
		{
			get
			{
				return this._Completions;
			}
			set
			{
				if ((this._Completions != value))
				{
					this.OnCompletionsChanging(value);
					this.SendPropertyChanging();
					this._Completions = value;
					this.SendPropertyChanged("Completions");
					this.OnCompletionsChanged();
				}
			}
		}
		
		[Column(Storage="_Yards", DbType="Int NOT NULL")]
		public int Yards
		{
			get
			{
				return this._Yards;
			}
			set
			{
				if ((this._Yards != value))
				{
					this.OnYardsChanging(value);
					this.SendPropertyChanging();
					this._Yards = value;
					this.SendPropertyChanged("Yards");
					this.OnYardsChanged();
				}
			}
		}
		
		[Column(Storage="_Touchdowns", DbType="Int NOT NULL")]
		public int Touchdowns
		{
			get
			{
				return this._Touchdowns;
			}
			set
			{
				if ((this._Touchdowns != value))
				{
					this.OnTouchdownsChanging(value);
					this.SendPropertyChanging();
					this._Touchdowns = value;
					this.SendPropertyChanged("Touchdowns");
					this.OnTouchdownsChanged();
				}
			}
		}
		
		[Column(Storage="_Interceptions", DbType="Int NOT NULL")]
		public int Interceptions
		{
			get
			{
				return this._Interceptions;
			}
			set
			{
				if ((this._Interceptions != value))
				{
					this.OnInterceptionsChanging(value);
					this.SendPropertyChanging();
					this._Interceptions = value;
					this.SendPropertyChanged("Interceptions");
					this.OnInterceptionsChanged();
				}
			}
		}
		
		[Association(Name="PLAYER_PLAYER_GAME_PASSING", Storage="_PLAYER1", ThisKey="Player", IsForeignKey=true)]
		public PLAYER PLAYER1
		{
			get
			{
				return this._PLAYER1.Entity;
			}
			set
			{
				PLAYER previousValue = this._PLAYER1.Entity;
				if (((previousValue != value) 
							|| (this._PLAYER1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PLAYER1.Entity = null;
						previousValue.PLAYER_GAME_PASSINGs.Remove(this);
					}
					this._PLAYER1.Entity = value;
					if ((value != null))
					{
						value.PLAYER_GAME_PASSINGs.Add(this);
						this._Player = value.PLAYER_ID;
					}
					else
					{
						this._Player = default(int);
					}
					this.SendPropertyChanged("PLAYER1");
				}
			}
		}
		
		[Association(Name="TEAM_PLAYER_GAME_PASSING", Storage="_TEAM1", ThisKey="Team", IsForeignKey=true)]
		public TEAM TEAM1
		{
			get
			{
				return this._TEAM1.Entity;
			}
			set
			{
				TEAM previousValue = this._TEAM1.Entity;
				if (((previousValue != value) 
							|| (this._TEAM1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TEAM1.Entity = null;
						previousValue.PLAYER_GAME_PASSINGs.Remove(this);
					}
					this._TEAM1.Entity = value;
					if ((value != null))
					{
						value.PLAYER_GAME_PASSINGs.Add(this);
						this._Team = value.TEAM_ID;
					}
					else
					{
						this._Team = default(int);
					}
					this.SendPropertyChanged("TEAM1");
				}
			}
		}
		
		[Association(Name="GAME_PLAYER_GAME_PASSING", Storage="_GAME1", ThisKey="Game", IsForeignKey=true)]
		public GAME GAME1
		{
			get
			{
				return this._GAME1.Entity;
			}
			set
			{
				GAME previousValue = this._GAME1.Entity;
				if (((previousValue != value) 
							|| (this._GAME1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GAME1.Entity = null;
						previousValue.PLAYER_GAME_PASSINGs.Remove(this);
					}
					this._GAME1.Entity = value;
					if ((value != null))
					{
						value.PLAYER_GAME_PASSINGs.Add(this);
						this._Game = value.GAME_ID;
					}
					else
					{
						this._Game = default(int);
					}
					this.SendPropertyChanged("GAME1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.PLAYER_GAME_PUNT_RETURNS")]
	public partial class PLAYER_GAME_PUNT_RETURN : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Player;
		
		private int _Game;
		
		private int _Team;
		
		private int _Number;
		
		private int _Yards;
		
		private int _Long;
		
		private System.Nullable<int> _Touchdowns;
		
		private EntityRef<PLAYER> _PLAYER1;
		
		private EntityRef<TEAM> _TEAM1;
		
		private EntityRef<GAME> _GAME1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPlayerChanging(int value);
    partial void OnPlayerChanged();
    partial void OnGameChanging(int value);
    partial void OnGameChanged();
    partial void OnTeamChanging(int value);
    partial void OnTeamChanged();
    partial void OnNumberChanging(int value);
    partial void OnNumberChanged();
    partial void OnYardsChanging(int value);
    partial void OnYardsChanged();
    partial void OnLongChanging(int value);
    partial void OnLongChanged();
    partial void OnTouchdownsChanging(System.Nullable<int> value);
    partial void OnTouchdownsChanged();
    #endregion
		
		public PLAYER_GAME_PUNT_RETURN()
		{
			this._PLAYER1 = default(EntityRef<PLAYER>);
			this._TEAM1 = default(EntityRef<TEAM>);
			this._GAME1 = default(EntityRef<GAME>);
			OnCreated();
		}
		
		[Column(Storage="_Player", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Player
		{
			get
			{
				return this._Player;
			}
			set
			{
				if ((this._Player != value))
				{
					if (this._PLAYER1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlayerChanging(value);
					this.SendPropertyChanging();
					this._Player = value;
					this.SendPropertyChanged("Player");
					this.OnPlayerChanged();
				}
			}
		}
		
		[Column(Storage="_Game", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Game
		{
			get
			{
				return this._Game;
			}
			set
			{
				if ((this._Game != value))
				{
					if (this._GAME1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGameChanging(value);
					this.SendPropertyChanging();
					this._Game = value;
					this.SendPropertyChanged("Game");
					this.OnGameChanged();
				}
			}
		}
		
		[Column(Storage="_Team", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Team
		{
			get
			{
				return this._Team;
			}
			set
			{
				if ((this._Team != value))
				{
					if (this._TEAM1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeamChanging(value);
					this.SendPropertyChanging();
					this._Team = value;
					this.SendPropertyChanged("Team");
					this.OnTeamChanged();
				}
			}
		}
		
		[Column(Storage="_Number", DbType="Int NOT NULL")]
		public int Number
		{
			get
			{
				return this._Number;
			}
			set
			{
				if ((this._Number != value))
				{
					this.OnNumberChanging(value);
					this.SendPropertyChanging();
					this._Number = value;
					this.SendPropertyChanged("Number");
					this.OnNumberChanged();
				}
			}
		}
		
		[Column(Storage="_Yards", DbType="Int NOT NULL")]
		public int Yards
		{
			get
			{
				return this._Yards;
			}
			set
			{
				if ((this._Yards != value))
				{
					this.OnYardsChanging(value);
					this.SendPropertyChanging();
					this._Yards = value;
					this.SendPropertyChanged("Yards");
					this.OnYardsChanged();
				}
			}
		}
		
		[Column(Storage="_Long", DbType="Int NOT NULL")]
		public int Long
		{
			get
			{
				return this._Long;
			}
			set
			{
				if ((this._Long != value))
				{
					this.OnLongChanging(value);
					this.SendPropertyChanging();
					this._Long = value;
					this.SendPropertyChanged("Long");
					this.OnLongChanged();
				}
			}
		}
		
		[Column(Storage="_Touchdowns", DbType="Int")]
		public System.Nullable<int> Touchdowns
		{
			get
			{
				return this._Touchdowns;
			}
			set
			{
				if ((this._Touchdowns != value))
				{
					this.OnTouchdownsChanging(value);
					this.SendPropertyChanging();
					this._Touchdowns = value;
					this.SendPropertyChanged("Touchdowns");
					this.OnTouchdownsChanged();
				}
			}
		}
		
		[Association(Name="PLAYER_PLAYER_GAME_PUNT_RETURN", Storage="_PLAYER1", ThisKey="Player", IsForeignKey=true)]
		public PLAYER PLAYER1
		{
			get
			{
				return this._PLAYER1.Entity;
			}
			set
			{
				PLAYER previousValue = this._PLAYER1.Entity;
				if (((previousValue != value) 
							|| (this._PLAYER1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PLAYER1.Entity = null;
						previousValue.PLAYER_GAME_PUNT_RETURNs.Remove(this);
					}
					this._PLAYER1.Entity = value;
					if ((value != null))
					{
						value.PLAYER_GAME_PUNT_RETURNs.Add(this);
						this._Player = value.PLAYER_ID;
					}
					else
					{
						this._Player = default(int);
					}
					this.SendPropertyChanged("PLAYER1");
				}
			}
		}
		
		[Association(Name="TEAM_PLAYER_GAME_PUNT_RETURN", Storage="_TEAM1", ThisKey="Team", IsForeignKey=true)]
		public TEAM TEAM1
		{
			get
			{
				return this._TEAM1.Entity;
			}
			set
			{
				TEAM previousValue = this._TEAM1.Entity;
				if (((previousValue != value) 
							|| (this._TEAM1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TEAM1.Entity = null;
						previousValue.PLAYER_GAME_PUNT_RETURNs.Remove(this);
					}
					this._TEAM1.Entity = value;
					if ((value != null))
					{
						value.PLAYER_GAME_PUNT_RETURNs.Add(this);
						this._Team = value.TEAM_ID;
					}
					else
					{
						this._Team = default(int);
					}
					this.SendPropertyChanged("TEAM1");
				}
			}
		}
		
		[Association(Name="GAME_PLAYER_GAME_PUNT_RETURN", Storage="_GAME1", ThisKey="Game", IsForeignKey=true)]
		public GAME GAME1
		{
			get
			{
				return this._GAME1.Entity;
			}
			set
			{
				GAME previousValue = this._GAME1.Entity;
				if (((previousValue != value) 
							|| (this._GAME1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GAME1.Entity = null;
						previousValue.PLAYER_GAME_PUNT_RETURNs.Remove(this);
					}
					this._GAME1.Entity = value;
					if ((value != null))
					{
						value.PLAYER_GAME_PUNT_RETURNs.Add(this);
						this._Game = value.GAME_ID;
					}
					else
					{
						this._Game = default(int);
					}
					this.SendPropertyChanged("GAME1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.PLAYER_GAME_PUNTING")]
	public partial class PLAYER_GAME_PUNTING : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Player;
		
		private int _Game;
		
		private int _Team;
		
		private int _Number;
		
		private int _Yards;
		
		private int _Long;
		
		private int _Inside_20;
		
		private System.Nullable<int> _Touchbacks;
		
		private EntityRef<PLAYER> _PLAYER1;
		
		private EntityRef<TEAM> _TEAM1;
		
		private EntityRef<GAME> _GAME1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPlayerChanging(int value);
    partial void OnPlayerChanged();
    partial void OnGameChanging(int value);
    partial void OnGameChanged();
    partial void OnTeamChanging(int value);
    partial void OnTeamChanged();
    partial void OnNumberChanging(int value);
    partial void OnNumberChanged();
    partial void OnYardsChanging(int value);
    partial void OnYardsChanged();
    partial void OnLongChanging(int value);
    partial void OnLongChanged();
    partial void OnInside_20Changing(int value);
    partial void OnInside_20Changed();
    partial void OnTouchbacksChanging(System.Nullable<int> value);
    partial void OnTouchbacksChanged();
    #endregion
		
		public PLAYER_GAME_PUNTING()
		{
			this._PLAYER1 = default(EntityRef<PLAYER>);
			this._TEAM1 = default(EntityRef<TEAM>);
			this._GAME1 = default(EntityRef<GAME>);
			OnCreated();
		}
		
		[Column(Storage="_Player", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Player
		{
			get
			{
				return this._Player;
			}
			set
			{
				if ((this._Player != value))
				{
					if (this._PLAYER1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlayerChanging(value);
					this.SendPropertyChanging();
					this._Player = value;
					this.SendPropertyChanged("Player");
					this.OnPlayerChanged();
				}
			}
		}
		
		[Column(Storage="_Game", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Game
		{
			get
			{
				return this._Game;
			}
			set
			{
				if ((this._Game != value))
				{
					if (this._GAME1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGameChanging(value);
					this.SendPropertyChanging();
					this._Game = value;
					this.SendPropertyChanged("Game");
					this.OnGameChanged();
				}
			}
		}
		
		[Column(Storage="_Team", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Team
		{
			get
			{
				return this._Team;
			}
			set
			{
				if ((this._Team != value))
				{
					if (this._TEAM1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeamChanging(value);
					this.SendPropertyChanging();
					this._Team = value;
					this.SendPropertyChanged("Team");
					this.OnTeamChanged();
				}
			}
		}
		
		[Column(Storage="_Number", DbType="Int NOT NULL")]
		public int Number
		{
			get
			{
				return this._Number;
			}
			set
			{
				if ((this._Number != value))
				{
					this.OnNumberChanging(value);
					this.SendPropertyChanging();
					this._Number = value;
					this.SendPropertyChanged("Number");
					this.OnNumberChanged();
				}
			}
		}
		
		[Column(Storage="_Yards", DbType="Int NOT NULL")]
		public int Yards
		{
			get
			{
				return this._Yards;
			}
			set
			{
				if ((this._Yards != value))
				{
					this.OnYardsChanging(value);
					this.SendPropertyChanging();
					this._Yards = value;
					this.SendPropertyChanged("Yards");
					this.OnYardsChanged();
				}
			}
		}
		
		[Column(Storage="_Long", DbType="Int NOT NULL")]
		public int Long
		{
			get
			{
				return this._Long;
			}
			set
			{
				if ((this._Long != value))
				{
					this.OnLongChanging(value);
					this.SendPropertyChanging();
					this._Long = value;
					this.SendPropertyChanged("Long");
					this.OnLongChanged();
				}
			}
		}
		
		[Column(Name="[Inside 20]", Storage="_Inside_20", DbType="Int NOT NULL")]
		public int Inside_20
		{
			get
			{
				return this._Inside_20;
			}
			set
			{
				if ((this._Inside_20 != value))
				{
					this.OnInside_20Changing(value);
					this.SendPropertyChanging();
					this._Inside_20 = value;
					this.SendPropertyChanged("Inside_20");
					this.OnInside_20Changed();
				}
			}
		}
		
		[Column(Storage="_Touchbacks", DbType="Int")]
		public System.Nullable<int> Touchbacks
		{
			get
			{
				return this._Touchbacks;
			}
			set
			{
				if ((this._Touchbacks != value))
				{
					this.OnTouchbacksChanging(value);
					this.SendPropertyChanging();
					this._Touchbacks = value;
					this.SendPropertyChanged("Touchbacks");
					this.OnTouchbacksChanged();
				}
			}
		}
		
		[Association(Name="PLAYER_PLAYER_GAME_PUNTING", Storage="_PLAYER1", ThisKey="Player", IsForeignKey=true)]
		public PLAYER PLAYER1
		{
			get
			{
				return this._PLAYER1.Entity;
			}
			set
			{
				PLAYER previousValue = this._PLAYER1.Entity;
				if (((previousValue != value) 
							|| (this._PLAYER1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PLAYER1.Entity = null;
						previousValue.PLAYER_GAME_PUNTINGs.Remove(this);
					}
					this._PLAYER1.Entity = value;
					if ((value != null))
					{
						value.PLAYER_GAME_PUNTINGs.Add(this);
						this._Player = value.PLAYER_ID;
					}
					else
					{
						this._Player = default(int);
					}
					this.SendPropertyChanged("PLAYER1");
				}
			}
		}
		
		[Association(Name="TEAM_PLAYER_GAME_PUNTING", Storage="_TEAM1", ThisKey="Team", IsForeignKey=true)]
		public TEAM TEAM1
		{
			get
			{
				return this._TEAM1.Entity;
			}
			set
			{
				TEAM previousValue = this._TEAM1.Entity;
				if (((previousValue != value) 
							|| (this._TEAM1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TEAM1.Entity = null;
						previousValue.PLAYER_GAME_PUNTINGs.Remove(this);
					}
					this._TEAM1.Entity = value;
					if ((value != null))
					{
						value.PLAYER_GAME_PUNTINGs.Add(this);
						this._Team = value.TEAM_ID;
					}
					else
					{
						this._Team = default(int);
					}
					this.SendPropertyChanged("TEAM1");
				}
			}
		}
		
		[Association(Name="GAME_PLAYER_GAME_PUNTING", Storage="_GAME1", ThisKey="Game", IsForeignKey=true)]
		public GAME GAME1
		{
			get
			{
				return this._GAME1.Entity;
			}
			set
			{
				GAME previousValue = this._GAME1.Entity;
				if (((previousValue != value) 
							|| (this._GAME1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GAME1.Entity = null;
						previousValue.PLAYER_GAME_PUNTINGs.Remove(this);
					}
					this._GAME1.Entity = value;
					if ((value != null))
					{
						value.PLAYER_GAME_PUNTINGs.Add(this);
						this._Game = value.GAME_ID;
					}
					else
					{
						this._Game = default(int);
					}
					this.SendPropertyChanged("GAME1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.PLAYER_GAME_RECEIVING")]
	public partial class PLAYER_GAME_RECEIVING : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Player;
		
		private int _Game;
		
		private int _Team;
		
		private int _Receptions;
		
		private int _Yards;
		
		private int _Long;
		
		private int _Touchdowns;
		
		private EntityRef<PLAYER> _PLAYER1;
		
		private EntityRef<TEAM> _TEAM1;
		
		private EntityRef<GAME> _GAME1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPlayerChanging(int value);
    partial void OnPlayerChanged();
    partial void OnGameChanging(int value);
    partial void OnGameChanged();
    partial void OnTeamChanging(int value);
    partial void OnTeamChanged();
    partial void OnReceptionsChanging(int value);
    partial void OnReceptionsChanged();
    partial void OnYardsChanging(int value);
    partial void OnYardsChanged();
    partial void OnLongChanging(int value);
    partial void OnLongChanged();
    partial void OnTouchdownsChanging(int value);
    partial void OnTouchdownsChanged();
    #endregion
		
		public PLAYER_GAME_RECEIVING()
		{
			this._PLAYER1 = default(EntityRef<PLAYER>);
			this._TEAM1 = default(EntityRef<TEAM>);
			this._GAME1 = default(EntityRef<GAME>);
			OnCreated();
		}
		
		[Column(Storage="_Player", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Player
		{
			get
			{
				return this._Player;
			}
			set
			{
				if ((this._Player != value))
				{
					if (this._PLAYER1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlayerChanging(value);
					this.SendPropertyChanging();
					this._Player = value;
					this.SendPropertyChanged("Player");
					this.OnPlayerChanged();
				}
			}
		}
		
		[Column(Storage="_Game", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Game
		{
			get
			{
				return this._Game;
			}
			set
			{
				if ((this._Game != value))
				{
					if (this._GAME1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGameChanging(value);
					this.SendPropertyChanging();
					this._Game = value;
					this.SendPropertyChanged("Game");
					this.OnGameChanged();
				}
			}
		}
		
		[Column(Storage="_Team", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Team
		{
			get
			{
				return this._Team;
			}
			set
			{
				if ((this._Team != value))
				{
					if (this._TEAM1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeamChanging(value);
					this.SendPropertyChanging();
					this._Team = value;
					this.SendPropertyChanged("Team");
					this.OnTeamChanged();
				}
			}
		}
		
		[Column(Storage="_Receptions", DbType="Int NOT NULL")]
		public int Receptions
		{
			get
			{
				return this._Receptions;
			}
			set
			{
				if ((this._Receptions != value))
				{
					this.OnReceptionsChanging(value);
					this.SendPropertyChanging();
					this._Receptions = value;
					this.SendPropertyChanged("Receptions");
					this.OnReceptionsChanged();
				}
			}
		}
		
		[Column(Storage="_Yards", DbType="Int NOT NULL")]
		public int Yards
		{
			get
			{
				return this._Yards;
			}
			set
			{
				if ((this._Yards != value))
				{
					this.OnYardsChanging(value);
					this.SendPropertyChanging();
					this._Yards = value;
					this.SendPropertyChanged("Yards");
					this.OnYardsChanged();
				}
			}
		}
		
		[Column(Storage="_Long", DbType="Int NOT NULL")]
		public int Long
		{
			get
			{
				return this._Long;
			}
			set
			{
				if ((this._Long != value))
				{
					this.OnLongChanging(value);
					this.SendPropertyChanging();
					this._Long = value;
					this.SendPropertyChanged("Long");
					this.OnLongChanged();
				}
			}
		}
		
		[Column(Storage="_Touchdowns", DbType="Int NOT NULL")]
		public int Touchdowns
		{
			get
			{
				return this._Touchdowns;
			}
			set
			{
				if ((this._Touchdowns != value))
				{
					this.OnTouchdownsChanging(value);
					this.SendPropertyChanging();
					this._Touchdowns = value;
					this.SendPropertyChanged("Touchdowns");
					this.OnTouchdownsChanged();
				}
			}
		}
		
		[Association(Name="PLAYER_PLAYER_GAME_RECEIVING", Storage="_PLAYER1", ThisKey="Player", IsForeignKey=true)]
		public PLAYER PLAYER1
		{
			get
			{
				return this._PLAYER1.Entity;
			}
			set
			{
				PLAYER previousValue = this._PLAYER1.Entity;
				if (((previousValue != value) 
							|| (this._PLAYER1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PLAYER1.Entity = null;
						previousValue.PLAYER_GAME_RECEIVINGs.Remove(this);
					}
					this._PLAYER1.Entity = value;
					if ((value != null))
					{
						value.PLAYER_GAME_RECEIVINGs.Add(this);
						this._Player = value.PLAYER_ID;
					}
					else
					{
						this._Player = default(int);
					}
					this.SendPropertyChanged("PLAYER1");
				}
			}
		}
		
		[Association(Name="TEAM_PLAYER_GAME_RECEIVING", Storage="_TEAM1", ThisKey="Team", IsForeignKey=true)]
		public TEAM TEAM1
		{
			get
			{
				return this._TEAM1.Entity;
			}
			set
			{
				TEAM previousValue = this._TEAM1.Entity;
				if (((previousValue != value) 
							|| (this._TEAM1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TEAM1.Entity = null;
						previousValue.PLAYER_GAME_RECEIVINGs.Remove(this);
					}
					this._TEAM1.Entity = value;
					if ((value != null))
					{
						value.PLAYER_GAME_RECEIVINGs.Add(this);
						this._Team = value.TEAM_ID;
					}
					else
					{
						this._Team = default(int);
					}
					this.SendPropertyChanged("TEAM1");
				}
			}
		}
		
		[Association(Name="GAME_PLAYER_GAME_RECEIVING", Storage="_GAME1", ThisKey="Game", IsForeignKey=true)]
		public GAME GAME1
		{
			get
			{
				return this._GAME1.Entity;
			}
			set
			{
				GAME previousValue = this._GAME1.Entity;
				if (((previousValue != value) 
							|| (this._GAME1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GAME1.Entity = null;
						previousValue.PLAYER_GAME_RECEIVINGs.Remove(this);
					}
					this._GAME1.Entity = value;
					if ((value != null))
					{
						value.PLAYER_GAME_RECEIVINGs.Add(this);
						this._Game = value.GAME_ID;
					}
					else
					{
						this._Game = default(int);
					}
					this.SendPropertyChanged("GAME1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.PLAYER_GAME_RUSHING")]
	public partial class PLAYER_GAME_RUSHING : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Player;
		
		private int _Game;
		
		private int _Team;
		
		private int _Attempts;
		
		private int _Yards;
		
		private int _Long;
		
		private int _Touchdowns;
		
		private EntityRef<PLAYER> _PLAYER1;
		
		private EntityRef<TEAM> _TEAM1;
		
		private EntityRef<GAME> _GAME1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPlayerChanging(int value);
    partial void OnPlayerChanged();
    partial void OnGameChanging(int value);
    partial void OnGameChanged();
    partial void OnTeamChanging(int value);
    partial void OnTeamChanged();
    partial void OnAttemptsChanging(int value);
    partial void OnAttemptsChanged();
    partial void OnYardsChanging(int value);
    partial void OnYardsChanged();
    partial void OnLongChanging(int value);
    partial void OnLongChanged();
    partial void OnTouchdownsChanging(int value);
    partial void OnTouchdownsChanged();
    #endregion
		
		public PLAYER_GAME_RUSHING()
		{
			this._PLAYER1 = default(EntityRef<PLAYER>);
			this._TEAM1 = default(EntityRef<TEAM>);
			this._GAME1 = default(EntityRef<GAME>);
			OnCreated();
		}
		
		[Column(Storage="_Player", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Player
		{
			get
			{
				return this._Player;
			}
			set
			{
				if ((this._Player != value))
				{
					if (this._PLAYER1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlayerChanging(value);
					this.SendPropertyChanging();
					this._Player = value;
					this.SendPropertyChanged("Player");
					this.OnPlayerChanged();
				}
			}
		}
		
		[Column(Storage="_Game", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Game
		{
			get
			{
				return this._Game;
			}
			set
			{
				if ((this._Game != value))
				{
					if (this._GAME1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGameChanging(value);
					this.SendPropertyChanging();
					this._Game = value;
					this.SendPropertyChanged("Game");
					this.OnGameChanged();
				}
			}
		}
		
		[Column(Storage="_Team", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Team
		{
			get
			{
				return this._Team;
			}
			set
			{
				if ((this._Team != value))
				{
					if (this._TEAM1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeamChanging(value);
					this.SendPropertyChanging();
					this._Team = value;
					this.SendPropertyChanged("Team");
					this.OnTeamChanged();
				}
			}
		}
		
		[Column(Storage="_Attempts", DbType="Int NOT NULL")]
		public int Attempts
		{
			get
			{
				return this._Attempts;
			}
			set
			{
				if ((this._Attempts != value))
				{
					this.OnAttemptsChanging(value);
					this.SendPropertyChanging();
					this._Attempts = value;
					this.SendPropertyChanged("Attempts");
					this.OnAttemptsChanged();
				}
			}
		}
		
		[Column(Storage="_Yards", DbType="Int NOT NULL")]
		public int Yards
		{
			get
			{
				return this._Yards;
			}
			set
			{
				if ((this._Yards != value))
				{
					this.OnYardsChanging(value);
					this.SendPropertyChanging();
					this._Yards = value;
					this.SendPropertyChanged("Yards");
					this.OnYardsChanged();
				}
			}
		}
		
		[Column(Storage="_Long", DbType="Int NOT NULL")]
		public int Long
		{
			get
			{
				return this._Long;
			}
			set
			{
				if ((this._Long != value))
				{
					this.OnLongChanging(value);
					this.SendPropertyChanging();
					this._Long = value;
					this.SendPropertyChanged("Long");
					this.OnLongChanged();
				}
			}
		}
		
		[Column(Storage="_Touchdowns", DbType="Int NOT NULL")]
		public int Touchdowns
		{
			get
			{
				return this._Touchdowns;
			}
			set
			{
				if ((this._Touchdowns != value))
				{
					this.OnTouchdownsChanging(value);
					this.SendPropertyChanging();
					this._Touchdowns = value;
					this.SendPropertyChanged("Touchdowns");
					this.OnTouchdownsChanged();
				}
			}
		}
		
		[Association(Name="PLAYER_PLAYER_GAME_RUSHING", Storage="_PLAYER1", ThisKey="Player", IsForeignKey=true)]
		public PLAYER PLAYER1
		{
			get
			{
				return this._PLAYER1.Entity;
			}
			set
			{
				PLAYER previousValue = this._PLAYER1.Entity;
				if (((previousValue != value) 
							|| (this._PLAYER1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PLAYER1.Entity = null;
						previousValue.PLAYER_GAME_RUSHINGs.Remove(this);
					}
					this._PLAYER1.Entity = value;
					if ((value != null))
					{
						value.PLAYER_GAME_RUSHINGs.Add(this);
						this._Player = value.PLAYER_ID;
					}
					else
					{
						this._Player = default(int);
					}
					this.SendPropertyChanged("PLAYER1");
				}
			}
		}
		
		[Association(Name="TEAM_PLAYER_GAME_RUSHING", Storage="_TEAM1", ThisKey="Team", IsForeignKey=true)]
		public TEAM TEAM1
		{
			get
			{
				return this._TEAM1.Entity;
			}
			set
			{
				TEAM previousValue = this._TEAM1.Entity;
				if (((previousValue != value) 
							|| (this._TEAM1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TEAM1.Entity = null;
						previousValue.PLAYER_GAME_RUSHINGs.Remove(this);
					}
					this._TEAM1.Entity = value;
					if ((value != null))
					{
						value.PLAYER_GAME_RUSHINGs.Add(this);
						this._Team = value.TEAM_ID;
					}
					else
					{
						this._Team = default(int);
					}
					this.SendPropertyChanged("TEAM1");
				}
			}
		}
		
		[Association(Name="GAME_PLAYER_GAME_RUSHING", Storage="_GAME1", ThisKey="Game", IsForeignKey=true)]
		public GAME GAME1
		{
			get
			{
				return this._GAME1.Entity;
			}
			set
			{
				GAME previousValue = this._GAME1.Entity;
				if (((previousValue != value) 
							|| (this._GAME1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GAME1.Entity = null;
						previousValue.PLAYER_GAME_RUSHINGs.Remove(this);
					}
					this._GAME1.Entity = value;
					if ((value != null))
					{
						value.PLAYER_GAME_RUSHINGs.Add(this);
						this._Game = value.GAME_ID;
					}
					else
					{
						this._Game = default(int);
					}
					this.SendPropertyChanged("GAME1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.GAMES")]
	public partial class GAME : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GAME_ID;
		
		private System.Nullable<int> _NflComId;
		
		private System.Nullable<int> _EspnId;
		
		private int _Season;
		
		private int _Week;
		
		private int _AwayTeam;
		
		private int _HomeTeam;
		
		private System.Nullable<int> _AwayScore;
		
		private System.Nullable<int> _HomeScore;
		
		private System.Nullable<int> _Quarter;
		
		private System.Nullable<int> _Time;
		
		private System.Nullable<System.DateTime> _Kickoff;
		
		private EntitySet<PLAYER_GAME_DEFENSE> _PLAYER_GAME_DEFENSEs;
		
		private EntitySet<PLAYER_GAME_FUMBLE> _PLAYER_GAME_FUMBLEs;
		
		private EntitySet<PLAYER_GAME_KICK_RETURN> _PLAYER_GAME_KICK_RETURNs;
		
		private EntitySet<PLAYER_GAME_KICKING> _PLAYER_GAME_KICKINGs;
		
		private EntitySet<PLAYER_GAME_PASSING> _PLAYER_GAME_PASSINGs;
		
		private EntitySet<PLAYER_GAME_PUNT_RETURN> _PLAYER_GAME_PUNT_RETURNs;
		
		private EntitySet<PLAYER_GAME_PUNTING> _PLAYER_GAME_PUNTINGs;
		
		private EntitySet<PLAYER_GAME_RECEIVING> _PLAYER_GAME_RECEIVINGs;
		
		private EntitySet<PLAYER_GAME_RUSHING> _PLAYER_GAME_RUSHINGs;
		
		private EntityRef<TEAM> _TEAM;
		
		private EntityRef<TEAM> _TEAM1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGAME_IDChanging(int value);
    partial void OnGAME_IDChanged();
    partial void OnNflComIdChanging(System.Nullable<int> value);
    partial void OnNflComIdChanged();
    partial void OnEspnIdChanging(System.Nullable<int> value);
    partial void OnEspnIdChanged();
    partial void OnSeasonChanging(int value);
    partial void OnSeasonChanged();
    partial void OnWeekChanging(int value);
    partial void OnWeekChanged();
    partial void OnAwayTeamChanging(int value);
    partial void OnAwayTeamChanged();
    partial void OnHomeTeamChanging(int value);
    partial void OnHomeTeamChanged();
    partial void OnAwayScoreChanging(System.Nullable<int> value);
    partial void OnAwayScoreChanged();
    partial void OnHomeScoreChanging(System.Nullable<int> value);
    partial void OnHomeScoreChanged();
    partial void OnQuarterChanging(System.Nullable<int> value);
    partial void OnQuarterChanged();
    partial void OnTimeChanging(System.Nullable<int> value);
    partial void OnTimeChanged();
    partial void OnKickoffChanging(System.Nullable<System.DateTime> value);
    partial void OnKickoffChanged();
    #endregion
		
		public GAME()
		{
			this._PLAYER_GAME_DEFENSEs = new EntitySet<PLAYER_GAME_DEFENSE>(new Action<PLAYER_GAME_DEFENSE>(this.attach_PLAYER_GAME_DEFENSEs), new Action<PLAYER_GAME_DEFENSE>(this.detach_PLAYER_GAME_DEFENSEs));
			this._PLAYER_GAME_FUMBLEs = new EntitySet<PLAYER_GAME_FUMBLE>(new Action<PLAYER_GAME_FUMBLE>(this.attach_PLAYER_GAME_FUMBLEs), new Action<PLAYER_GAME_FUMBLE>(this.detach_PLAYER_GAME_FUMBLEs));
			this._PLAYER_GAME_KICK_RETURNs = new EntitySet<PLAYER_GAME_KICK_RETURN>(new Action<PLAYER_GAME_KICK_RETURN>(this.attach_PLAYER_GAME_KICK_RETURNs), new Action<PLAYER_GAME_KICK_RETURN>(this.detach_PLAYER_GAME_KICK_RETURNs));
			this._PLAYER_GAME_KICKINGs = new EntitySet<PLAYER_GAME_KICKING>(new Action<PLAYER_GAME_KICKING>(this.attach_PLAYER_GAME_KICKINGs), new Action<PLAYER_GAME_KICKING>(this.detach_PLAYER_GAME_KICKINGs));
			this._PLAYER_GAME_PASSINGs = new EntitySet<PLAYER_GAME_PASSING>(new Action<PLAYER_GAME_PASSING>(this.attach_PLAYER_GAME_PASSINGs), new Action<PLAYER_GAME_PASSING>(this.detach_PLAYER_GAME_PASSINGs));
			this._PLAYER_GAME_PUNT_RETURNs = new EntitySet<PLAYER_GAME_PUNT_RETURN>(new Action<PLAYER_GAME_PUNT_RETURN>(this.attach_PLAYER_GAME_PUNT_RETURNs), new Action<PLAYER_GAME_PUNT_RETURN>(this.detach_PLAYER_GAME_PUNT_RETURNs));
			this._PLAYER_GAME_PUNTINGs = new EntitySet<PLAYER_GAME_PUNTING>(new Action<PLAYER_GAME_PUNTING>(this.attach_PLAYER_GAME_PUNTINGs), new Action<PLAYER_GAME_PUNTING>(this.detach_PLAYER_GAME_PUNTINGs));
			this._PLAYER_GAME_RECEIVINGs = new EntitySet<PLAYER_GAME_RECEIVING>(new Action<PLAYER_GAME_RECEIVING>(this.attach_PLAYER_GAME_RECEIVINGs), new Action<PLAYER_GAME_RECEIVING>(this.detach_PLAYER_GAME_RECEIVINGs));
			this._PLAYER_GAME_RUSHINGs = new EntitySet<PLAYER_GAME_RUSHING>(new Action<PLAYER_GAME_RUSHING>(this.attach_PLAYER_GAME_RUSHINGs), new Action<PLAYER_GAME_RUSHING>(this.detach_PLAYER_GAME_RUSHINGs));
			this._TEAM = default(EntityRef<TEAM>);
			this._TEAM1 = default(EntityRef<TEAM>);
			OnCreated();
		}
		
		[Column(Storage="_GAME_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int GAME_ID
		{
			get
			{
				return this._GAME_ID;
			}
			set
			{
				if ((this._GAME_ID != value))
				{
					this.OnGAME_IDChanging(value);
					this.SendPropertyChanging();
					this._GAME_ID = value;
					this.SendPropertyChanged("GAME_ID");
					this.OnGAME_IDChanged();
				}
			}
		}
		
		[Column(Storage="_NflComId", DbType="Int")]
		public System.Nullable<int> NflComId
		{
			get
			{
				return this._NflComId;
			}
			set
			{
				if ((this._NflComId != value))
				{
					this.OnNflComIdChanging(value);
					this.SendPropertyChanging();
					this._NflComId = value;
					this.SendPropertyChanged("NflComId");
					this.OnNflComIdChanged();
				}
			}
		}
		
		[Column(Storage="_EspnId", DbType="Int")]
		public System.Nullable<int> EspnId
		{
			get
			{
				return this._EspnId;
			}
			set
			{
				if ((this._EspnId != value))
				{
					this.OnEspnIdChanging(value);
					this.SendPropertyChanging();
					this._EspnId = value;
					this.SendPropertyChanged("EspnId");
					this.OnEspnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Season", DbType="Int NOT NULL")]
		public int Season
		{
			get
			{
				return this._Season;
			}
			set
			{
				if ((this._Season != value))
				{
					this.OnSeasonChanging(value);
					this.SendPropertyChanging();
					this._Season = value;
					this.SendPropertyChanged("Season");
					this.OnSeasonChanged();
				}
			}
		}
		
		[Column(Storage="_Week", DbType="Int NOT NULL")]
		public int Week
		{
			get
			{
				return this._Week;
			}
			set
			{
				if ((this._Week != value))
				{
					this.OnWeekChanging(value);
					this.SendPropertyChanging();
					this._Week = value;
					this.SendPropertyChanged("Week");
					this.OnWeekChanged();
				}
			}
		}
		
		[Column(Storage="_AwayTeam", DbType="Int NOT NULL")]
		public int AwayTeam
		{
			get
			{
				return this._AwayTeam;
			}
			set
			{
				if ((this._AwayTeam != value))
				{
					if (this._TEAM.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAwayTeamChanging(value);
					this.SendPropertyChanging();
					this._AwayTeam = value;
					this.SendPropertyChanged("AwayTeam");
					this.OnAwayTeamChanged();
				}
			}
		}
		
		[Column(Storage="_HomeTeam", DbType="Int NOT NULL")]
		public int HomeTeam
		{
			get
			{
				return this._HomeTeam;
			}
			set
			{
				if ((this._HomeTeam != value))
				{
					if (this._TEAM1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHomeTeamChanging(value);
					this.SendPropertyChanging();
					this._HomeTeam = value;
					this.SendPropertyChanged("HomeTeam");
					this.OnHomeTeamChanged();
				}
			}
		}
		
		[Column(Storage="_AwayScore", DbType="Int")]
		public System.Nullable<int> AwayScore
		{
			get
			{
				return this._AwayScore;
			}
			set
			{
				if ((this._AwayScore != value))
				{
					this.OnAwayScoreChanging(value);
					this.SendPropertyChanging();
					this._AwayScore = value;
					this.SendPropertyChanged("AwayScore");
					this.OnAwayScoreChanged();
				}
			}
		}
		
		[Column(Storage="_HomeScore", DbType="Int")]
		public System.Nullable<int> HomeScore
		{
			get
			{
				return this._HomeScore;
			}
			set
			{
				if ((this._HomeScore != value))
				{
					this.OnHomeScoreChanging(value);
					this.SendPropertyChanging();
					this._HomeScore = value;
					this.SendPropertyChanged("HomeScore");
					this.OnHomeScoreChanged();
				}
			}
		}
		
		[Column(Storage="_Quarter", DbType="Int")]
		public System.Nullable<int> Quarter
		{
			get
			{
				return this._Quarter;
			}
			set
			{
				if ((this._Quarter != value))
				{
					this.OnQuarterChanging(value);
					this.SendPropertyChanging();
					this._Quarter = value;
					this.SendPropertyChanged("Quarter");
					this.OnQuarterChanged();
				}
			}
		}
		
		[Column(Storage="_Time", DbType="Int")]
		public System.Nullable<int> Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		[Column(Storage="_Kickoff", DbType="DateTime")]
		public System.Nullable<System.DateTime> Kickoff
		{
			get
			{
				return this._Kickoff;
			}
			set
			{
				if ((this._Kickoff != value))
				{
					this.OnKickoffChanging(value);
					this.SendPropertyChanging();
					this._Kickoff = value;
					this.SendPropertyChanged("Kickoff");
					this.OnKickoffChanged();
				}
			}
		}
		
		[Association(Name="GAME_PLAYER_GAME_DEFENSE", Storage="_PLAYER_GAME_DEFENSEs", OtherKey="Game")]
		public EntitySet<PLAYER_GAME_DEFENSE> PLAYER_GAME_DEFENSEs
		{
			get
			{
				return this._PLAYER_GAME_DEFENSEs;
			}
			set
			{
				this._PLAYER_GAME_DEFENSEs.Assign(value);
			}
		}
		
		[Association(Name="GAME_PLAYER_GAME_FUMBLE", Storage="_PLAYER_GAME_FUMBLEs", OtherKey="Game")]
		public EntitySet<PLAYER_GAME_FUMBLE> PLAYER_GAME_FUMBLEs
		{
			get
			{
				return this._PLAYER_GAME_FUMBLEs;
			}
			set
			{
				this._PLAYER_GAME_FUMBLEs.Assign(value);
			}
		}
		
		[Association(Name="GAME_PLAYER_GAME_KICK_RETURN", Storage="_PLAYER_GAME_KICK_RETURNs", OtherKey="Game")]
		public EntitySet<PLAYER_GAME_KICK_RETURN> PLAYER_GAME_KICK_RETURNs
		{
			get
			{
				return this._PLAYER_GAME_KICK_RETURNs;
			}
			set
			{
				this._PLAYER_GAME_KICK_RETURNs.Assign(value);
			}
		}
		
		[Association(Name="GAME_PLAYER_GAME_KICKING", Storage="_PLAYER_GAME_KICKINGs", OtherKey="Game")]
		public EntitySet<PLAYER_GAME_KICKING> PLAYER_GAME_KICKINGs
		{
			get
			{
				return this._PLAYER_GAME_KICKINGs;
			}
			set
			{
				this._PLAYER_GAME_KICKINGs.Assign(value);
			}
		}
		
		[Association(Name="GAME_PLAYER_GAME_PASSING", Storage="_PLAYER_GAME_PASSINGs", OtherKey="Game")]
		public EntitySet<PLAYER_GAME_PASSING> PLAYER_GAME_PASSINGs
		{
			get
			{
				return this._PLAYER_GAME_PASSINGs;
			}
			set
			{
				this._PLAYER_GAME_PASSINGs.Assign(value);
			}
		}
		
		[Association(Name="GAME_PLAYER_GAME_PUNT_RETURN", Storage="_PLAYER_GAME_PUNT_RETURNs", OtherKey="Game")]
		public EntitySet<PLAYER_GAME_PUNT_RETURN> PLAYER_GAME_PUNT_RETURNs
		{
			get
			{
				return this._PLAYER_GAME_PUNT_RETURNs;
			}
			set
			{
				this._PLAYER_GAME_PUNT_RETURNs.Assign(value);
			}
		}
		
		[Association(Name="GAME_PLAYER_GAME_PUNTING", Storage="_PLAYER_GAME_PUNTINGs", OtherKey="Game")]
		public EntitySet<PLAYER_GAME_PUNTING> PLAYER_GAME_PUNTINGs
		{
			get
			{
				return this._PLAYER_GAME_PUNTINGs;
			}
			set
			{
				this._PLAYER_GAME_PUNTINGs.Assign(value);
			}
		}
		
		[Association(Name="GAME_PLAYER_GAME_RECEIVING", Storage="_PLAYER_GAME_RECEIVINGs", OtherKey="Game")]
		public EntitySet<PLAYER_GAME_RECEIVING> PLAYER_GAME_RECEIVINGs
		{
			get
			{
				return this._PLAYER_GAME_RECEIVINGs;
			}
			set
			{
				this._PLAYER_GAME_RECEIVINGs.Assign(value);
			}
		}
		
		[Association(Name="GAME_PLAYER_GAME_RUSHING", Storage="_PLAYER_GAME_RUSHINGs", OtherKey="Game")]
		public EntitySet<PLAYER_GAME_RUSHING> PLAYER_GAME_RUSHINGs
		{
			get
			{
				return this._PLAYER_GAME_RUSHINGs;
			}
			set
			{
				this._PLAYER_GAME_RUSHINGs.Assign(value);
			}
		}
		
		[Association(Name="TEAM_GAME", Storage="_TEAM", ThisKey="AwayTeam", IsForeignKey=true)]
		public TEAM TEAM
		{
			get
			{
				return this._TEAM.Entity;
			}
			set
			{
				TEAM previousValue = this._TEAM.Entity;
				if (((previousValue != value) 
							|| (this._TEAM.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TEAM.Entity = null;
						previousValue.GAMEs.Remove(this);
					}
					this._TEAM.Entity = value;
					if ((value != null))
					{
						value.GAMEs.Add(this);
						this._AwayTeam = value.TEAM_ID;
					}
					else
					{
						this._AwayTeam = default(int);
					}
					this.SendPropertyChanged("TEAM");
				}
			}
		}
		
		[Association(Name="TEAM_GAME1", Storage="_TEAM1", ThisKey="HomeTeam", IsForeignKey=true)]
		public TEAM TEAM1
		{
			get
			{
				return this._TEAM1.Entity;
			}
			set
			{
				TEAM previousValue = this._TEAM1.Entity;
				if (((previousValue != value) 
							|| (this._TEAM1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TEAM1.Entity = null;
						previousValue.GAMEs1.Remove(this);
					}
					this._TEAM1.Entity = value;
					if ((value != null))
					{
						value.GAMEs1.Add(this);
						this._HomeTeam = value.TEAM_ID;
					}
					else
					{
						this._HomeTeam = default(int);
					}
					this.SendPropertyChanged("TEAM1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PLAYER_GAME_DEFENSEs(PLAYER_GAME_DEFENSE entity)
		{
			this.SendPropertyChanging();
			entity.GAME1 = this;
		}
		
		private void detach_PLAYER_GAME_DEFENSEs(PLAYER_GAME_DEFENSE entity)
		{
			this.SendPropertyChanging();
			entity.GAME1 = null;
		}
		
		private void attach_PLAYER_GAME_FUMBLEs(PLAYER_GAME_FUMBLE entity)
		{
			this.SendPropertyChanging();
			entity.GAME1 = this;
		}
		
		private void detach_PLAYER_GAME_FUMBLEs(PLAYER_GAME_FUMBLE entity)
		{
			this.SendPropertyChanging();
			entity.GAME1 = null;
		}
		
		private void attach_PLAYER_GAME_KICK_RETURNs(PLAYER_GAME_KICK_RETURN entity)
		{
			this.SendPropertyChanging();
			entity.GAME1 = this;
		}
		
		private void detach_PLAYER_GAME_KICK_RETURNs(PLAYER_GAME_KICK_RETURN entity)
		{
			this.SendPropertyChanging();
			entity.GAME1 = null;
		}
		
		private void attach_PLAYER_GAME_KICKINGs(PLAYER_GAME_KICKING entity)
		{
			this.SendPropertyChanging();
			entity.GAME1 = this;
		}
		
		private void detach_PLAYER_GAME_KICKINGs(PLAYER_GAME_KICKING entity)
		{
			this.SendPropertyChanging();
			entity.GAME1 = null;
		}
		
		private void attach_PLAYER_GAME_PASSINGs(PLAYER_GAME_PASSING entity)
		{
			this.SendPropertyChanging();
			entity.GAME1 = this;
		}
		
		private void detach_PLAYER_GAME_PASSINGs(PLAYER_GAME_PASSING entity)
		{
			this.SendPropertyChanging();
			entity.GAME1 = null;
		}
		
		private void attach_PLAYER_GAME_PUNT_RETURNs(PLAYER_GAME_PUNT_RETURN entity)
		{
			this.SendPropertyChanging();
			entity.GAME1 = this;
		}
		
		private void detach_PLAYER_GAME_PUNT_RETURNs(PLAYER_GAME_PUNT_RETURN entity)
		{
			this.SendPropertyChanging();
			entity.GAME1 = null;
		}
		
		private void attach_PLAYER_GAME_PUNTINGs(PLAYER_GAME_PUNTING entity)
		{
			this.SendPropertyChanging();
			entity.GAME1 = this;
		}
		
		private void detach_PLAYER_GAME_PUNTINGs(PLAYER_GAME_PUNTING entity)
		{
			this.SendPropertyChanging();
			entity.GAME1 = null;
		}
		
		private void attach_PLAYER_GAME_RECEIVINGs(PLAYER_GAME_RECEIVING entity)
		{
			this.SendPropertyChanging();
			entity.GAME1 = this;
		}
		
		private void detach_PLAYER_GAME_RECEIVINGs(PLAYER_GAME_RECEIVING entity)
		{
			this.SendPropertyChanging();
			entity.GAME1 = null;
		}
		
		private void attach_PLAYER_GAME_RUSHINGs(PLAYER_GAME_RUSHING entity)
		{
			this.SendPropertyChanging();
			entity.GAME1 = this;
		}
		
		private void detach_PLAYER_GAME_RUSHINGs(PLAYER_GAME_RUSHING entity)
		{
			this.SendPropertyChanging();
			entity.GAME1 = null;
		}
	}
}
#pragma warning restore 1591
