#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WickedSick.Data.Mlb
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="MLB")]
	public partial class MlbDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertGAME(GAME instance);
    partial void UpdateGAME(GAME instance);
    partial void DeleteGAME(GAME instance);
    partial void InsertTEAM(TEAM instance);
    partial void UpdateTEAM(TEAM instance);
    partial void DeleteTEAM(TEAM instance);
    partial void InsertPLAYER_YEARLY_BATTING(PLAYER_YEARLY_BATTING instance);
    partial void UpdatePLAYER_YEARLY_BATTING(PLAYER_YEARLY_BATTING instance);
    partial void DeletePLAYER_YEARLY_BATTING(PLAYER_YEARLY_BATTING instance);
    partial void InsertPLAYER_YEARLY_PITCHING(PLAYER_YEARLY_PITCHING instance);
    partial void UpdatePLAYER_YEARLY_PITCHING(PLAYER_YEARLY_PITCHING instance);
    partial void DeletePLAYER_YEARLY_PITCHING(PLAYER_YEARLY_PITCHING instance);
    partial void InsertPLAYER(PLAYER instance);
    partial void UpdatePLAYER(PLAYER instance);
    partial void DeletePLAYER(PLAYER instance);
    partial void InsertCONTRACT(CONTRACT instance);
    partial void UpdateCONTRACT(CONTRACT instance);
    partial void DeleteCONTRACT(CONTRACT instance);
    partial void InsertCONTRACT_YEAR(CONTRACT_YEAR instance);
    partial void UpdateCONTRACT_YEAR(CONTRACT_YEAR instance);
    partial void DeleteCONTRACT_YEAR(CONTRACT_YEAR instance);
    #endregion
		
		public MlbDataContext() : 
				base(global::WickedSick.Data.Mlb.Properties.Settings.Default.MLBConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public MlbDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MlbDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MlbDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MlbDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<GAME> GAMEs
		{
			get
			{
				return this.GetTable<GAME>();
			}
		}
		
		public System.Data.Linq.Table<TEAM> TEAMs
		{
			get
			{
				return this.GetTable<TEAM>();
			}
		}
		
		public System.Data.Linq.Table<PLAYER_YEARLY_BATTING> PLAYER_YEARLY_BATTINGs
		{
			get
			{
				return this.GetTable<PLAYER_YEARLY_BATTING>();
			}
		}
		
		public System.Data.Linq.Table<PLAYER_YEARLY_PITCHING> PLAYER_YEARLY_PITCHINGs
		{
			get
			{
				return this.GetTable<PLAYER_YEARLY_PITCHING>();
			}
		}
		
		public System.Data.Linq.Table<PLAYER> PLAYERs
		{
			get
			{
				return this.GetTable<PLAYER>();
			}
		}
		
		public System.Data.Linq.Table<CONTRACT> CONTRACTs
		{
			get
			{
				return this.GetTable<CONTRACT>();
			}
		}
		
		public System.Data.Linq.Table<CONTRACT_YEAR> CONTRACT_YEARs
		{
			get
			{
				return this.GetTable<CONTRACT_YEAR>();
			}
		}
	}
	
	[Table(Name="dbo.GAMES")]
	public partial class GAME : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GAME_ID;
		
		private int _AwayTeam;
		
		private int _HomeTeam;
		
		private System.Nullable<int> _AwayScore;
		
		private System.Nullable<int> _HomeScore;
		
		private System.Nullable<int> _Inning;
		
		private System.Nullable<int> _Outs;
		
		private System.DateTime _Gametime;
		
		private int _Season;
		
		private EntityRef<TEAM> _TEAM;
		
		private EntityRef<TEAM> _TEAM1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGAME_IDChanging(int value);
    partial void OnGAME_IDChanged();
    partial void OnAwayTeamChanging(int value);
    partial void OnAwayTeamChanged();
    partial void OnHomeTeamChanging(int value);
    partial void OnHomeTeamChanged();
    partial void OnAwayScoreChanging(System.Nullable<int> value);
    partial void OnAwayScoreChanged();
    partial void OnHomeScoreChanging(System.Nullable<int> value);
    partial void OnHomeScoreChanged();
    partial void OnInningChanging(System.Nullable<int> value);
    partial void OnInningChanged();
    partial void OnOutsChanging(System.Nullable<int> value);
    partial void OnOutsChanged();
    partial void OnGametimeChanging(System.DateTime value);
    partial void OnGametimeChanged();
    partial void OnSeasonChanging(int value);
    partial void OnSeasonChanged();
    #endregion
		
		public GAME()
		{
			this._TEAM = default(EntityRef<TEAM>);
			this._TEAM1 = default(EntityRef<TEAM>);
			OnCreated();
		}
		
		[Column(Storage="_GAME_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int GAME_ID
		{
			get
			{
				return this._GAME_ID;
			}
			set
			{
				if ((this._GAME_ID != value))
				{
					this.OnGAME_IDChanging(value);
					this.SendPropertyChanging();
					this._GAME_ID = value;
					this.SendPropertyChanged("GAME_ID");
					this.OnGAME_IDChanged();
				}
			}
		}
		
		[Column(Storage="_AwayTeam", DbType="Int NOT NULL")]
		public int AwayTeam
		{
			get
			{
				return this._AwayTeam;
			}
			set
			{
				if ((this._AwayTeam != value))
				{
					if (this._TEAM.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAwayTeamChanging(value);
					this.SendPropertyChanging();
					this._AwayTeam = value;
					this.SendPropertyChanged("AwayTeam");
					this.OnAwayTeamChanged();
				}
			}
		}
		
		[Column(Storage="_HomeTeam", DbType="Int NOT NULL")]
		public int HomeTeam
		{
			get
			{
				return this._HomeTeam;
			}
			set
			{
				if ((this._HomeTeam != value))
				{
					if (this._TEAM1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHomeTeamChanging(value);
					this.SendPropertyChanging();
					this._HomeTeam = value;
					this.SendPropertyChanged("HomeTeam");
					this.OnHomeTeamChanged();
				}
			}
		}
		
		[Column(Storage="_AwayScore", DbType="Int")]
		public System.Nullable<int> AwayScore
		{
			get
			{
				return this._AwayScore;
			}
			set
			{
				if ((this._AwayScore != value))
				{
					this.OnAwayScoreChanging(value);
					this.SendPropertyChanging();
					this._AwayScore = value;
					this.SendPropertyChanged("AwayScore");
					this.OnAwayScoreChanged();
				}
			}
		}
		
		[Column(Storage="_HomeScore", DbType="Int")]
		public System.Nullable<int> HomeScore
		{
			get
			{
				return this._HomeScore;
			}
			set
			{
				if ((this._HomeScore != value))
				{
					this.OnHomeScoreChanging(value);
					this.SendPropertyChanging();
					this._HomeScore = value;
					this.SendPropertyChanged("HomeScore");
					this.OnHomeScoreChanged();
				}
			}
		}
		
		[Column(Storage="_Inning", DbType="Int")]
		public System.Nullable<int> Inning
		{
			get
			{
				return this._Inning;
			}
			set
			{
				if ((this._Inning != value))
				{
					this.OnInningChanging(value);
					this.SendPropertyChanging();
					this._Inning = value;
					this.SendPropertyChanged("Inning");
					this.OnInningChanged();
				}
			}
		}
		
		[Column(Storage="_Outs", DbType="Int")]
		public System.Nullable<int> Outs
		{
			get
			{
				return this._Outs;
			}
			set
			{
				if ((this._Outs != value))
				{
					this.OnOutsChanging(value);
					this.SendPropertyChanging();
					this._Outs = value;
					this.SendPropertyChanged("Outs");
					this.OnOutsChanged();
				}
			}
		}
		
		[Column(Storage="_Gametime", DbType="DateTime NOT NULL")]
		public System.DateTime Gametime
		{
			get
			{
				return this._Gametime;
			}
			set
			{
				if ((this._Gametime != value))
				{
					this.OnGametimeChanging(value);
					this.SendPropertyChanging();
					this._Gametime = value;
					this.SendPropertyChanged("Gametime");
					this.OnGametimeChanged();
				}
			}
		}
		
		[Column(Storage="_Season", DbType="Int NOT NULL")]
		public int Season
		{
			get
			{
				return this._Season;
			}
			set
			{
				if ((this._Season != value))
				{
					this.OnSeasonChanging(value);
					this.SendPropertyChanging();
					this._Season = value;
					this.SendPropertyChanged("Season");
					this.OnSeasonChanged();
				}
			}
		}
		
		[Association(Name="TEAM_GAME", Storage="_TEAM", ThisKey="AwayTeam", IsForeignKey=true)]
		public TEAM TEAM
		{
			get
			{
				return this._TEAM.Entity;
			}
			set
			{
				TEAM previousValue = this._TEAM.Entity;
				if (((previousValue != value) 
							|| (this._TEAM.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TEAM.Entity = null;
						previousValue.GAMEs.Remove(this);
					}
					this._TEAM.Entity = value;
					if ((value != null))
					{
						value.GAMEs.Add(this);
						this._AwayTeam = value.TEAM_ID;
					}
					else
					{
						this._AwayTeam = default(int);
					}
					this.SendPropertyChanged("TEAM");
				}
			}
		}
		
		[Association(Name="TEAM_GAME1", Storage="_TEAM1", ThisKey="HomeTeam", IsForeignKey=true)]
		public TEAM TEAM1
		{
			get
			{
				return this._TEAM1.Entity;
			}
			set
			{
				TEAM previousValue = this._TEAM1.Entity;
				if (((previousValue != value) 
							|| (this._TEAM1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TEAM1.Entity = null;
						previousValue.GAMEs1.Remove(this);
					}
					this._TEAM1.Entity = value;
					if ((value != null))
					{
						value.GAMEs1.Add(this);
						this._HomeTeam = value.TEAM_ID;
					}
					else
					{
						this._HomeTeam = default(int);
					}
					this.SendPropertyChanged("TEAM1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.TEAMS")]
	public partial class TEAM : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TEAM_ID;
		
		private int _Franchise;
		
		private int _Division;
		
		private string _City;
		
		private string _Nickname;
		
		private int _YearStarted;
		
		private System.Nullable<int> _YearEnded;
		
		private EntitySet<GAME> _GAMEs;
		
		private EntitySet<GAME> _GAMEs1;
		
		private EntitySet<PLAYER_YEARLY_BATTING> _PLAYER_YEARLY_BATTINGs;
		
		private EntitySet<PLAYER_YEARLY_PITCHING> _PLAYER_YEARLY_PITCHINGs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTEAM_IDChanging(int value);
    partial void OnTEAM_IDChanged();
    partial void OnFranchiseChanging(int value);
    partial void OnFranchiseChanged();
    partial void OnDivisionChanging(int value);
    partial void OnDivisionChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnNicknameChanging(string value);
    partial void OnNicknameChanged();
    partial void OnYearStartedChanging(int value);
    partial void OnYearStartedChanged();
    partial void OnYearEndedChanging(System.Nullable<int> value);
    partial void OnYearEndedChanged();
    #endregion
		
		public TEAM()
		{
			this._GAMEs = new EntitySet<GAME>(new Action<GAME>(this.attach_GAMEs), new Action<GAME>(this.detach_GAMEs));
			this._GAMEs1 = new EntitySet<GAME>(new Action<GAME>(this.attach_GAMEs1), new Action<GAME>(this.detach_GAMEs1));
			this._PLAYER_YEARLY_BATTINGs = new EntitySet<PLAYER_YEARLY_BATTING>(new Action<PLAYER_YEARLY_BATTING>(this.attach_PLAYER_YEARLY_BATTINGs), new Action<PLAYER_YEARLY_BATTING>(this.detach_PLAYER_YEARLY_BATTINGs));
			this._PLAYER_YEARLY_PITCHINGs = new EntitySet<PLAYER_YEARLY_PITCHING>(new Action<PLAYER_YEARLY_PITCHING>(this.attach_PLAYER_YEARLY_PITCHINGs), new Action<PLAYER_YEARLY_PITCHING>(this.detach_PLAYER_YEARLY_PITCHINGs));
			OnCreated();
		}
		
		[Column(Storage="_TEAM_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TEAM_ID
		{
			get
			{
				return this._TEAM_ID;
			}
			set
			{
				if ((this._TEAM_ID != value))
				{
					this.OnTEAM_IDChanging(value);
					this.SendPropertyChanging();
					this._TEAM_ID = value;
					this.SendPropertyChanged("TEAM_ID");
					this.OnTEAM_IDChanged();
				}
			}
		}
		
		[Column(Storage="_Franchise", DbType="Int NOT NULL")]
		public int Franchise
		{
			get
			{
				return this._Franchise;
			}
			set
			{
				if ((this._Franchise != value))
				{
					this.OnFranchiseChanging(value);
					this.SendPropertyChanging();
					this._Franchise = value;
					this.SendPropertyChanged("Franchise");
					this.OnFranchiseChanged();
				}
			}
		}
		
		[Column(Storage="_Division", DbType="Int NOT NULL")]
		public int Division
		{
			get
			{
				return this._Division;
			}
			set
			{
				if ((this._Division != value))
				{
					this.OnDivisionChanging(value);
					this.SendPropertyChanging();
					this._Division = value;
					this.SendPropertyChanged("Division");
					this.OnDivisionChanged();
				}
			}
		}
		
		[Column(Storage="_City", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[Column(Storage="_Nickname", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Nickname
		{
			get
			{
				return this._Nickname;
			}
			set
			{
				if ((this._Nickname != value))
				{
					this.OnNicknameChanging(value);
					this.SendPropertyChanging();
					this._Nickname = value;
					this.SendPropertyChanged("Nickname");
					this.OnNicknameChanged();
				}
			}
		}
		
		[Column(Storage="_YearStarted", DbType="Int NOT NULL")]
		public int YearStarted
		{
			get
			{
				return this._YearStarted;
			}
			set
			{
				if ((this._YearStarted != value))
				{
					this.OnYearStartedChanging(value);
					this.SendPropertyChanging();
					this._YearStarted = value;
					this.SendPropertyChanged("YearStarted");
					this.OnYearStartedChanged();
				}
			}
		}
		
		[Column(Storage="_YearEnded", DbType="Int")]
		public System.Nullable<int> YearEnded
		{
			get
			{
				return this._YearEnded;
			}
			set
			{
				if ((this._YearEnded != value))
				{
					this.OnYearEndedChanging(value);
					this.SendPropertyChanging();
					this._YearEnded = value;
					this.SendPropertyChanged("YearEnded");
					this.OnYearEndedChanged();
				}
			}
		}
		
		[Association(Name="TEAM_GAME", Storage="_GAMEs", OtherKey="AwayTeam")]
		public EntitySet<GAME> GAMEs
		{
			get
			{
				return this._GAMEs;
			}
			set
			{
				this._GAMEs.Assign(value);
			}
		}
		
		[Association(Name="TEAM_GAME1", Storage="_GAMEs1", OtherKey="HomeTeam")]
		public EntitySet<GAME> GAMEs1
		{
			get
			{
				return this._GAMEs1;
			}
			set
			{
				this._GAMEs1.Assign(value);
			}
		}
		
		[Association(Name="TEAM_PLAYER_YEARLY_BATTING", Storage="_PLAYER_YEARLY_BATTINGs", OtherKey="Team")]
		public EntitySet<PLAYER_YEARLY_BATTING> PLAYER_YEARLY_BATTINGs
		{
			get
			{
				return this._PLAYER_YEARLY_BATTINGs;
			}
			set
			{
				this._PLAYER_YEARLY_BATTINGs.Assign(value);
			}
		}
		
		[Association(Name="TEAM_PLAYER_YEARLY_PITCHING", Storage="_PLAYER_YEARLY_PITCHINGs", OtherKey="Team")]
		public EntitySet<PLAYER_YEARLY_PITCHING> PLAYER_YEARLY_PITCHINGs
		{
			get
			{
				return this._PLAYER_YEARLY_PITCHINGs;
			}
			set
			{
				this._PLAYER_YEARLY_PITCHINGs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GAMEs(GAME entity)
		{
			this.SendPropertyChanging();
			entity.TEAM = this;
		}
		
		private void detach_GAMEs(GAME entity)
		{
			this.SendPropertyChanging();
			entity.TEAM = null;
		}
		
		private void attach_GAMEs1(GAME entity)
		{
			this.SendPropertyChanging();
			entity.TEAM1 = this;
		}
		
		private void detach_GAMEs1(GAME entity)
		{
			this.SendPropertyChanging();
			entity.TEAM1 = null;
		}
		
		private void attach_PLAYER_YEARLY_BATTINGs(PLAYER_YEARLY_BATTING entity)
		{
			this.SendPropertyChanging();
			entity.TEAM1 = this;
		}
		
		private void detach_PLAYER_YEARLY_BATTINGs(PLAYER_YEARLY_BATTING entity)
		{
			this.SendPropertyChanging();
			entity.TEAM1 = null;
		}
		
		private void attach_PLAYER_YEARLY_PITCHINGs(PLAYER_YEARLY_PITCHING entity)
		{
			this.SendPropertyChanging();
			entity.TEAM1 = this;
		}
		
		private void detach_PLAYER_YEARLY_PITCHINGs(PLAYER_YEARLY_PITCHING entity)
		{
			this.SendPropertyChanging();
			entity.TEAM1 = null;
		}
	}
	
	[Table(Name="dbo.PLAYER_YEARLY_BATTING")]
	public partial class PLAYER_YEARLY_BATTING : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Player;
		
		private int _Year;
		
		private int _Team;
		
		private int _G;
		
		private int _PA;
		
		private int _AB;
		
		private int _R;
		
		private int _H;
		
		private int @__2B;
		
		private int @__3B;
		
		private int _HR;
		
		private int _RBI;
		
		private int _BB;
		
		private int _SO;
		
		private int _SB;
		
		private int _CS;
		
		private int _SF;
		
		private int _SH;
		
		private int _HBP;
		
		private int _IBB;
		
		private int _GDP;
		
		private int _NP;
		
		private int _GO;
		
		private int _AO;
		
		private EntityRef<TEAM> _TEAM1;
		
		private EntityRef<PLAYER> _PLAYER1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPlayerChanging(int value);
    partial void OnPlayerChanged();
    partial void OnYearChanging(int value);
    partial void OnYearChanged();
    partial void OnTeamChanging(int value);
    partial void OnTeamChanged();
    partial void OnGChanging(int value);
    partial void OnGChanged();
    partial void OnPAChanging(int value);
    partial void OnPAChanged();
    partial void OnABChanging(int value);
    partial void OnABChanged();
    partial void OnRChanging(int value);
    partial void OnRChanged();
    partial void OnHChanging(int value);
    partial void OnHChanged();
    partial void On_2BChanging(int value);
    partial void On_2BChanged();
    partial void On_3BChanging(int value);
    partial void On_3BChanged();
    partial void OnHRChanging(int value);
    partial void OnHRChanged();
    partial void OnRBIChanging(int value);
    partial void OnRBIChanged();
    partial void OnBBChanging(int value);
    partial void OnBBChanged();
    partial void OnSOChanging(int value);
    partial void OnSOChanged();
    partial void OnSBChanging(int value);
    partial void OnSBChanged();
    partial void OnCSChanging(int value);
    partial void OnCSChanged();
    partial void OnSFChanging(int value);
    partial void OnSFChanged();
    partial void OnSHChanging(int value);
    partial void OnSHChanged();
    partial void OnHBPChanging(int value);
    partial void OnHBPChanged();
    partial void OnIBBChanging(int value);
    partial void OnIBBChanged();
    partial void OnGDPChanging(int value);
    partial void OnGDPChanged();
    partial void OnNPChanging(int value);
    partial void OnNPChanged();
    partial void OnGOChanging(int value);
    partial void OnGOChanged();
    partial void OnAOChanging(int value);
    partial void OnAOChanged();
    #endregion
		
		public PLAYER_YEARLY_BATTING()
		{
			this._TEAM1 = default(EntityRef<TEAM>);
			this._PLAYER1 = default(EntityRef<PLAYER>);
			OnCreated();
		}
		
		[Column(Storage="_Player", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Player
		{
			get
			{
				return this._Player;
			}
			set
			{
				if ((this._Player != value))
				{
					if (this._PLAYER1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlayerChanging(value);
					this.SendPropertyChanging();
					this._Player = value;
					this.SendPropertyChanged("Player");
					this.OnPlayerChanged();
				}
			}
		}
		
		[Column(Storage="_Year", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Year
		{
			get
			{
				return this._Year;
			}
			set
			{
				if ((this._Year != value))
				{
					this.OnYearChanging(value);
					this.SendPropertyChanging();
					this._Year = value;
					this.SendPropertyChanged("Year");
					this.OnYearChanged();
				}
			}
		}
		
		[Column(Storage="_Team", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Team
		{
			get
			{
				return this._Team;
			}
			set
			{
				if ((this._Team != value))
				{
					if (this._TEAM1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeamChanging(value);
					this.SendPropertyChanging();
					this._Team = value;
					this.SendPropertyChanged("Team");
					this.OnTeamChanged();
				}
			}
		}
		
		[Column(Storage="_G", DbType="Int NOT NULL")]
		public int G
		{
			get
			{
				return this._G;
			}
			set
			{
				if ((this._G != value))
				{
					this.OnGChanging(value);
					this.SendPropertyChanging();
					this._G = value;
					this.SendPropertyChanged("G");
					this.OnGChanged();
				}
			}
		}
		
		[Column(Storage="_PA", DbType="Int NOT NULL")]
		public int PA
		{
			get
			{
				return this._PA;
			}
			set
			{
				if ((this._PA != value))
				{
					this.OnPAChanging(value);
					this.SendPropertyChanging();
					this._PA = value;
					this.SendPropertyChanged("PA");
					this.OnPAChanged();
				}
			}
		}
		
		[Column(Storage="_AB", DbType="Int NOT NULL")]
		public int AB
		{
			get
			{
				return this._AB;
			}
			set
			{
				if ((this._AB != value))
				{
					this.OnABChanging(value);
					this.SendPropertyChanging();
					this._AB = value;
					this.SendPropertyChanged("AB");
					this.OnABChanged();
				}
			}
		}
		
		[Column(Storage="_R", DbType="Int NOT NULL")]
		public int R
		{
			get
			{
				return this._R;
			}
			set
			{
				if ((this._R != value))
				{
					this.OnRChanging(value);
					this.SendPropertyChanging();
					this._R = value;
					this.SendPropertyChanged("R");
					this.OnRChanged();
				}
			}
		}
		
		[Column(Storage="_H", DbType="Int NOT NULL")]
		public int H
		{
			get
			{
				return this._H;
			}
			set
			{
				if ((this._H != value))
				{
					this.OnHChanging(value);
					this.SendPropertyChanging();
					this._H = value;
					this.SendPropertyChanged("H");
					this.OnHChanged();
				}
			}
		}
		
		[Column(Name="[2B]", Storage="__2B", DbType="Int NOT NULL")]
		public int _2B
		{
			get
			{
				return this.@__2B;
			}
			set
			{
				if ((this.@__2B != value))
				{
					this.On_2BChanging(value);
					this.SendPropertyChanging();
					this.@__2B = value;
					this.SendPropertyChanged("_2B");
					this.On_2BChanged();
				}
			}
		}
		
		[Column(Name="[3B]", Storage="__3B", DbType="Int NOT NULL")]
		public int _3B
		{
			get
			{
				return this.@__3B;
			}
			set
			{
				if ((this.@__3B != value))
				{
					this.On_3BChanging(value);
					this.SendPropertyChanging();
					this.@__3B = value;
					this.SendPropertyChanged("_3B");
					this.On_3BChanged();
				}
			}
		}
		
		[Column(Storage="_HR", DbType="Int NOT NULL")]
		public int HR
		{
			get
			{
				return this._HR;
			}
			set
			{
				if ((this._HR != value))
				{
					this.OnHRChanging(value);
					this.SendPropertyChanging();
					this._HR = value;
					this.SendPropertyChanged("HR");
					this.OnHRChanged();
				}
			}
		}
		
		[Column(Storage="_RBI", DbType="Int NOT NULL")]
		public int RBI
		{
			get
			{
				return this._RBI;
			}
			set
			{
				if ((this._RBI != value))
				{
					this.OnRBIChanging(value);
					this.SendPropertyChanging();
					this._RBI = value;
					this.SendPropertyChanged("RBI");
					this.OnRBIChanged();
				}
			}
		}
		
		[Column(Storage="_BB", DbType="Int NOT NULL")]
		public int BB
		{
			get
			{
				return this._BB;
			}
			set
			{
				if ((this._BB != value))
				{
					this.OnBBChanging(value);
					this.SendPropertyChanging();
					this._BB = value;
					this.SendPropertyChanged("BB");
					this.OnBBChanged();
				}
			}
		}
		
		[Column(Storage="_SO", DbType="Int NOT NULL")]
		public int SO
		{
			get
			{
				return this._SO;
			}
			set
			{
				if ((this._SO != value))
				{
					this.OnSOChanging(value);
					this.SendPropertyChanging();
					this._SO = value;
					this.SendPropertyChanged("SO");
					this.OnSOChanged();
				}
			}
		}
		
		[Column(Storage="_SB", DbType="Int NOT NULL")]
		public int SB
		{
			get
			{
				return this._SB;
			}
			set
			{
				if ((this._SB != value))
				{
					this.OnSBChanging(value);
					this.SendPropertyChanging();
					this._SB = value;
					this.SendPropertyChanged("SB");
					this.OnSBChanged();
				}
			}
		}
		
		[Column(Storage="_CS", DbType="Int NOT NULL")]
		public int CS
		{
			get
			{
				return this._CS;
			}
			set
			{
				if ((this._CS != value))
				{
					this.OnCSChanging(value);
					this.SendPropertyChanging();
					this._CS = value;
					this.SendPropertyChanged("CS");
					this.OnCSChanged();
				}
			}
		}
		
		[Column(Storage="_SF", DbType="Int NOT NULL")]
		public int SF
		{
			get
			{
				return this._SF;
			}
			set
			{
				if ((this._SF != value))
				{
					this.OnSFChanging(value);
					this.SendPropertyChanging();
					this._SF = value;
					this.SendPropertyChanged("SF");
					this.OnSFChanged();
				}
			}
		}
		
		[Column(Storage="_SH", DbType="Int NOT NULL")]
		public int SH
		{
			get
			{
				return this._SH;
			}
			set
			{
				if ((this._SH != value))
				{
					this.OnSHChanging(value);
					this.SendPropertyChanging();
					this._SH = value;
					this.SendPropertyChanged("SH");
					this.OnSHChanged();
				}
			}
		}
		
		[Column(Storage="_HBP", DbType="Int NOT NULL")]
		public int HBP
		{
			get
			{
				return this._HBP;
			}
			set
			{
				if ((this._HBP != value))
				{
					this.OnHBPChanging(value);
					this.SendPropertyChanging();
					this._HBP = value;
					this.SendPropertyChanged("HBP");
					this.OnHBPChanged();
				}
			}
		}
		
		[Column(Storage="_IBB", DbType="Int NOT NULL")]
		public int IBB
		{
			get
			{
				return this._IBB;
			}
			set
			{
				if ((this._IBB != value))
				{
					this.OnIBBChanging(value);
					this.SendPropertyChanging();
					this._IBB = value;
					this.SendPropertyChanged("IBB");
					this.OnIBBChanged();
				}
			}
		}
		
		[Column(Storage="_GDP", DbType="Int NOT NULL")]
		public int GDP
		{
			get
			{
				return this._GDP;
			}
			set
			{
				if ((this._GDP != value))
				{
					this.OnGDPChanging(value);
					this.SendPropertyChanging();
					this._GDP = value;
					this.SendPropertyChanged("GDP");
					this.OnGDPChanged();
				}
			}
		}
		
		[Column(Storage="_NP", DbType="Int NOT NULL")]
		public int NP
		{
			get
			{
				return this._NP;
			}
			set
			{
				if ((this._NP != value))
				{
					this.OnNPChanging(value);
					this.SendPropertyChanging();
					this._NP = value;
					this.SendPropertyChanged("NP");
					this.OnNPChanged();
				}
			}
		}
		
		[Column(Storage="_GO", DbType="Int NOT NULL")]
		public int GO
		{
			get
			{
				return this._GO;
			}
			set
			{
				if ((this._GO != value))
				{
					this.OnGOChanging(value);
					this.SendPropertyChanging();
					this._GO = value;
					this.SendPropertyChanged("GO");
					this.OnGOChanged();
				}
			}
		}
		
		[Column(Storage="_AO", DbType="Int NOT NULL")]
		public int AO
		{
			get
			{
				return this._AO;
			}
			set
			{
				if ((this._AO != value))
				{
					this.OnAOChanging(value);
					this.SendPropertyChanging();
					this._AO = value;
					this.SendPropertyChanged("AO");
					this.OnAOChanged();
				}
			}
		}
		
		[Association(Name="TEAM_PLAYER_YEARLY_BATTING", Storage="_TEAM1", ThisKey="Team", IsForeignKey=true)]
		public TEAM TEAM1
		{
			get
			{
				return this._TEAM1.Entity;
			}
			set
			{
				TEAM previousValue = this._TEAM1.Entity;
				if (((previousValue != value) 
							|| (this._TEAM1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TEAM1.Entity = null;
						previousValue.PLAYER_YEARLY_BATTINGs.Remove(this);
					}
					this._TEAM1.Entity = value;
					if ((value != null))
					{
						value.PLAYER_YEARLY_BATTINGs.Add(this);
						this._Team = value.TEAM_ID;
					}
					else
					{
						this._Team = default(int);
					}
					this.SendPropertyChanged("TEAM1");
				}
			}
		}
		
		[Association(Name="PLAYER_PLAYER_YEARLY_BATTING", Storage="_PLAYER1", ThisKey="Player", IsForeignKey=true)]
		public PLAYER PLAYER1
		{
			get
			{
				return this._PLAYER1.Entity;
			}
			set
			{
				PLAYER previousValue = this._PLAYER1.Entity;
				if (((previousValue != value) 
							|| (this._PLAYER1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PLAYER1.Entity = null;
						previousValue.PLAYER_YEARLY_BATTINGs.Remove(this);
					}
					this._PLAYER1.Entity = value;
					if ((value != null))
					{
						value.PLAYER_YEARLY_BATTINGs.Add(this);
						this._Player = value.PLAYER_ID;
					}
					else
					{
						this._Player = default(int);
					}
					this.SendPropertyChanged("PLAYER1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.PLAYER_YEARLY_PITCHING")]
	public partial class PLAYER_YEARLY_PITCHING : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Player;
		
		private int _Year;
		
		private int _Team;
		
		private int _W;
		
		private int _L;
		
		private int _G;
		
		private int _GS;
		
		private int _CG;
		
		private int _SHO;
		
		private int _HLD;
		
		private int _SV;
		
		private int _SVO;
		
		private int _OUTS;
		
		private int _H;
		
		private int _R;
		
		private int _ER;
		
		private int _HR;
		
		private int _HBP;
		
		private int _BB;
		
		private int _SO;
		
		private int _TB;
		
		private int _IBB;
		
		private int _WP;
		
		private int _BK;
		
		private int _SB;
		
		private int _CS;
		
		private int _PK;
		
		private int _GO;
		
		private int _AO;
		
		private EntityRef<TEAM> _TEAM1;
		
		private EntityRef<PLAYER> _PLAYER1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPlayerChanging(int value);
    partial void OnPlayerChanged();
    partial void OnYearChanging(int value);
    partial void OnYearChanged();
    partial void OnTeamChanging(int value);
    partial void OnTeamChanged();
    partial void OnWChanging(int value);
    partial void OnWChanged();
    partial void OnLChanging(int value);
    partial void OnLChanged();
    partial void OnGChanging(int value);
    partial void OnGChanged();
    partial void OnGSChanging(int value);
    partial void OnGSChanged();
    partial void OnCGChanging(int value);
    partial void OnCGChanged();
    partial void OnSHOChanging(int value);
    partial void OnSHOChanged();
    partial void OnHLDChanging(int value);
    partial void OnHLDChanged();
    partial void OnSVChanging(int value);
    partial void OnSVChanged();
    partial void OnSVOChanging(int value);
    partial void OnSVOChanged();
    partial void OnOUTSChanging(int value);
    partial void OnOUTSChanged();
    partial void OnHChanging(int value);
    partial void OnHChanged();
    partial void OnRChanging(int value);
    partial void OnRChanged();
    partial void OnERChanging(int value);
    partial void OnERChanged();
    partial void OnHRChanging(int value);
    partial void OnHRChanged();
    partial void OnHBPChanging(int value);
    partial void OnHBPChanged();
    partial void OnBBChanging(int value);
    partial void OnBBChanged();
    partial void OnSOChanging(int value);
    partial void OnSOChanged();
    partial void OnTBChanging(int value);
    partial void OnTBChanged();
    partial void OnIBBChanging(int value);
    partial void OnIBBChanged();
    partial void OnWPChanging(int value);
    partial void OnWPChanged();
    partial void OnBKChanging(int value);
    partial void OnBKChanged();
    partial void OnSBChanging(int value);
    partial void OnSBChanged();
    partial void OnCSChanging(int value);
    partial void OnCSChanged();
    partial void OnPKChanging(int value);
    partial void OnPKChanged();
    partial void OnGOChanging(int value);
    partial void OnGOChanged();
    partial void OnAOChanging(int value);
    partial void OnAOChanged();
    #endregion
		
		public PLAYER_YEARLY_PITCHING()
		{
			this._TEAM1 = default(EntityRef<TEAM>);
			this._PLAYER1 = default(EntityRef<PLAYER>);
			OnCreated();
		}
		
		[Column(Storage="_Player", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Player
		{
			get
			{
				return this._Player;
			}
			set
			{
				if ((this._Player != value))
				{
					if (this._PLAYER1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlayerChanging(value);
					this.SendPropertyChanging();
					this._Player = value;
					this.SendPropertyChanged("Player");
					this.OnPlayerChanged();
				}
			}
		}
		
		[Column(Storage="_Year", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Year
		{
			get
			{
				return this._Year;
			}
			set
			{
				if ((this._Year != value))
				{
					this.OnYearChanging(value);
					this.SendPropertyChanging();
					this._Year = value;
					this.SendPropertyChanged("Year");
					this.OnYearChanged();
				}
			}
		}
		
		[Column(Storage="_Team", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Team
		{
			get
			{
				return this._Team;
			}
			set
			{
				if ((this._Team != value))
				{
					if (this._TEAM1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeamChanging(value);
					this.SendPropertyChanging();
					this._Team = value;
					this.SendPropertyChanged("Team");
					this.OnTeamChanged();
				}
			}
		}
		
		[Column(Storage="_W", DbType="Int NOT NULL")]
		public int W
		{
			get
			{
				return this._W;
			}
			set
			{
				if ((this._W != value))
				{
					this.OnWChanging(value);
					this.SendPropertyChanging();
					this._W = value;
					this.SendPropertyChanged("W");
					this.OnWChanged();
				}
			}
		}
		
		[Column(Storage="_L", DbType="Int NOT NULL")]
		public int L
		{
			get
			{
				return this._L;
			}
			set
			{
				if ((this._L != value))
				{
					this.OnLChanging(value);
					this.SendPropertyChanging();
					this._L = value;
					this.SendPropertyChanged("L");
					this.OnLChanged();
				}
			}
		}
		
		[Column(Storage="_G", DbType="Int NOT NULL")]
		public int G
		{
			get
			{
				return this._G;
			}
			set
			{
				if ((this._G != value))
				{
					this.OnGChanging(value);
					this.SendPropertyChanging();
					this._G = value;
					this.SendPropertyChanged("G");
					this.OnGChanged();
				}
			}
		}
		
		[Column(Storage="_GS", DbType="Int NOT NULL")]
		public int GS
		{
			get
			{
				return this._GS;
			}
			set
			{
				if ((this._GS != value))
				{
					this.OnGSChanging(value);
					this.SendPropertyChanging();
					this._GS = value;
					this.SendPropertyChanged("GS");
					this.OnGSChanged();
				}
			}
		}
		
		[Column(Storage="_CG", DbType="Int NOT NULL")]
		public int CG
		{
			get
			{
				return this._CG;
			}
			set
			{
				if ((this._CG != value))
				{
					this.OnCGChanging(value);
					this.SendPropertyChanging();
					this._CG = value;
					this.SendPropertyChanged("CG");
					this.OnCGChanged();
				}
			}
		}
		
		[Column(Storage="_SHO", DbType="Int NOT NULL")]
		public int SHO
		{
			get
			{
				return this._SHO;
			}
			set
			{
				if ((this._SHO != value))
				{
					this.OnSHOChanging(value);
					this.SendPropertyChanging();
					this._SHO = value;
					this.SendPropertyChanged("SHO");
					this.OnSHOChanged();
				}
			}
		}
		
		[Column(Storage="_HLD", DbType="Int NOT NULL")]
		public int HLD
		{
			get
			{
				return this._HLD;
			}
			set
			{
				if ((this._HLD != value))
				{
					this.OnHLDChanging(value);
					this.SendPropertyChanging();
					this._HLD = value;
					this.SendPropertyChanged("HLD");
					this.OnHLDChanged();
				}
			}
		}
		
		[Column(Storage="_SV", DbType="Int NOT NULL")]
		public int SV
		{
			get
			{
				return this._SV;
			}
			set
			{
				if ((this._SV != value))
				{
					this.OnSVChanging(value);
					this.SendPropertyChanging();
					this._SV = value;
					this.SendPropertyChanged("SV");
					this.OnSVChanged();
				}
			}
		}
		
		[Column(Storage="_SVO", DbType="Int NOT NULL")]
		public int SVO
		{
			get
			{
				return this._SVO;
			}
			set
			{
				if ((this._SVO != value))
				{
					this.OnSVOChanging(value);
					this.SendPropertyChanging();
					this._SVO = value;
					this.SendPropertyChanged("SVO");
					this.OnSVOChanged();
				}
			}
		}
		
		[Column(Storage="_OUTS", DbType="Int NOT NULL")]
		public int OUTS
		{
			get
			{
				return this._OUTS;
			}
			set
			{
				if ((this._OUTS != value))
				{
					this.OnOUTSChanging(value);
					this.SendPropertyChanging();
					this._OUTS = value;
					this.SendPropertyChanged("OUTS");
					this.OnOUTSChanged();
				}
			}
		}
		
		[Column(Storage="_H", DbType="Int NOT NULL")]
		public int H
		{
			get
			{
				return this._H;
			}
			set
			{
				if ((this._H != value))
				{
					this.OnHChanging(value);
					this.SendPropertyChanging();
					this._H = value;
					this.SendPropertyChanged("H");
					this.OnHChanged();
				}
			}
		}
		
		[Column(Storage="_R", DbType="Int NOT NULL")]
		public int R
		{
			get
			{
				return this._R;
			}
			set
			{
				if ((this._R != value))
				{
					this.OnRChanging(value);
					this.SendPropertyChanging();
					this._R = value;
					this.SendPropertyChanged("R");
					this.OnRChanged();
				}
			}
		}
		
		[Column(Storage="_ER", DbType="Int NOT NULL")]
		public int ER
		{
			get
			{
				return this._ER;
			}
			set
			{
				if ((this._ER != value))
				{
					this.OnERChanging(value);
					this.SendPropertyChanging();
					this._ER = value;
					this.SendPropertyChanged("ER");
					this.OnERChanged();
				}
			}
		}
		
		[Column(Storage="_HR", DbType="Int NOT NULL")]
		public int HR
		{
			get
			{
				return this._HR;
			}
			set
			{
				if ((this._HR != value))
				{
					this.OnHRChanging(value);
					this.SendPropertyChanging();
					this._HR = value;
					this.SendPropertyChanged("HR");
					this.OnHRChanged();
				}
			}
		}
		
		[Column(Storage="_HBP", DbType="Int NOT NULL")]
		public int HBP
		{
			get
			{
				return this._HBP;
			}
			set
			{
				if ((this._HBP != value))
				{
					this.OnHBPChanging(value);
					this.SendPropertyChanging();
					this._HBP = value;
					this.SendPropertyChanged("HBP");
					this.OnHBPChanged();
				}
			}
		}
		
		[Column(Storage="_BB", DbType="Int NOT NULL")]
		public int BB
		{
			get
			{
				return this._BB;
			}
			set
			{
				if ((this._BB != value))
				{
					this.OnBBChanging(value);
					this.SendPropertyChanging();
					this._BB = value;
					this.SendPropertyChanged("BB");
					this.OnBBChanged();
				}
			}
		}
		
		[Column(Storage="_SO", DbType="Int NOT NULL")]
		public int SO
		{
			get
			{
				return this._SO;
			}
			set
			{
				if ((this._SO != value))
				{
					this.OnSOChanging(value);
					this.SendPropertyChanging();
					this._SO = value;
					this.SendPropertyChanged("SO");
					this.OnSOChanged();
				}
			}
		}
		
		[Column(Storage="_TB", DbType="Int NOT NULL")]
		public int TB
		{
			get
			{
				return this._TB;
			}
			set
			{
				if ((this._TB != value))
				{
					this.OnTBChanging(value);
					this.SendPropertyChanging();
					this._TB = value;
					this.SendPropertyChanged("TB");
					this.OnTBChanged();
				}
			}
		}
		
		[Column(Storage="_IBB", DbType="Int NOT NULL")]
		public int IBB
		{
			get
			{
				return this._IBB;
			}
			set
			{
				if ((this._IBB != value))
				{
					this.OnIBBChanging(value);
					this.SendPropertyChanging();
					this._IBB = value;
					this.SendPropertyChanged("IBB");
					this.OnIBBChanged();
				}
			}
		}
		
		[Column(Storage="_WP", DbType="Int NOT NULL")]
		public int WP
		{
			get
			{
				return this._WP;
			}
			set
			{
				if ((this._WP != value))
				{
					this.OnWPChanging(value);
					this.SendPropertyChanging();
					this._WP = value;
					this.SendPropertyChanged("WP");
					this.OnWPChanged();
				}
			}
		}
		
		[Column(Storage="_BK", DbType="Int NOT NULL")]
		public int BK
		{
			get
			{
				return this._BK;
			}
			set
			{
				if ((this._BK != value))
				{
					this.OnBKChanging(value);
					this.SendPropertyChanging();
					this._BK = value;
					this.SendPropertyChanged("BK");
					this.OnBKChanged();
				}
			}
		}
		
		[Column(Storage="_SB", DbType="Int NOT NULL")]
		public int SB
		{
			get
			{
				return this._SB;
			}
			set
			{
				if ((this._SB != value))
				{
					this.OnSBChanging(value);
					this.SendPropertyChanging();
					this._SB = value;
					this.SendPropertyChanged("SB");
					this.OnSBChanged();
				}
			}
		}
		
		[Column(Storage="_CS", DbType="Int NOT NULL")]
		public int CS
		{
			get
			{
				return this._CS;
			}
			set
			{
				if ((this._CS != value))
				{
					this.OnCSChanging(value);
					this.SendPropertyChanging();
					this._CS = value;
					this.SendPropertyChanged("CS");
					this.OnCSChanged();
				}
			}
		}
		
		[Column(Storage="_PK", DbType="Int NOT NULL")]
		public int PK
		{
			get
			{
				return this._PK;
			}
			set
			{
				if ((this._PK != value))
				{
					this.OnPKChanging(value);
					this.SendPropertyChanging();
					this._PK = value;
					this.SendPropertyChanged("PK");
					this.OnPKChanged();
				}
			}
		}
		
		[Column(Storage="_GO", DbType="Int NOT NULL")]
		public int GO
		{
			get
			{
				return this._GO;
			}
			set
			{
				if ((this._GO != value))
				{
					this.OnGOChanging(value);
					this.SendPropertyChanging();
					this._GO = value;
					this.SendPropertyChanged("GO");
					this.OnGOChanged();
				}
			}
		}
		
		[Column(Storage="_AO", DbType="Int NOT NULL")]
		public int AO
		{
			get
			{
				return this._AO;
			}
			set
			{
				if ((this._AO != value))
				{
					this.OnAOChanging(value);
					this.SendPropertyChanging();
					this._AO = value;
					this.SendPropertyChanged("AO");
					this.OnAOChanged();
				}
			}
		}
		
		[Association(Name="TEAM_PLAYER_YEARLY_PITCHING", Storage="_TEAM1", ThisKey="Team", IsForeignKey=true)]
		public TEAM TEAM1
		{
			get
			{
				return this._TEAM1.Entity;
			}
			set
			{
				TEAM previousValue = this._TEAM1.Entity;
				if (((previousValue != value) 
							|| (this._TEAM1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TEAM1.Entity = null;
						previousValue.PLAYER_YEARLY_PITCHINGs.Remove(this);
					}
					this._TEAM1.Entity = value;
					if ((value != null))
					{
						value.PLAYER_YEARLY_PITCHINGs.Add(this);
						this._Team = value.TEAM_ID;
					}
					else
					{
						this._Team = default(int);
					}
					this.SendPropertyChanged("TEAM1");
				}
			}
		}
		
		[Association(Name="PLAYER_PLAYER_YEARLY_PITCHING", Storage="_PLAYER1", ThisKey="Player", IsForeignKey=true)]
		public PLAYER PLAYER1
		{
			get
			{
				return this._PLAYER1.Entity;
			}
			set
			{
				PLAYER previousValue = this._PLAYER1.Entity;
				if (((previousValue != value) 
							|| (this._PLAYER1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PLAYER1.Entity = null;
						previousValue.PLAYER_YEARLY_PITCHINGs.Remove(this);
					}
					this._PLAYER1.Entity = value;
					if ((value != null))
					{
						value.PLAYER_YEARLY_PITCHINGs.Add(this);
						this._Player = value.PLAYER_ID;
					}
					else
					{
						this._Player = default(int);
					}
					this.SendPropertyChanged("PLAYER1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.PLAYERS")]
	public partial class PLAYER : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PLAYER_ID;
		
		private System.Nullable<int> _MlbComId;
		
		private System.Nullable<int> _EspnId;
		
		private string _Name;
		
		private string _Pronounced;
		
		private System.Nullable<System.DateTime> _Birthdate;
		
		private string _Birthplace;
		
		private string _Bats;
		
		private string _Throws;
		
		private string _Height;
		
		private string _Weight;
		
		private string _Position;
		
		private System.Nullable<int> _Experience;
		
		private System.Nullable<decimal> _Salary;
		
		private string _College;
		
		private System.Nullable<System.DateTime> _Debut;
		
		private EntitySet<PLAYER_YEARLY_BATTING> _PLAYER_YEARLY_BATTINGs;
		
		private EntitySet<PLAYER_YEARLY_PITCHING> _PLAYER_YEARLY_PITCHINGs;
		
		private EntitySet<CONTRACT> _CONTRACTs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPLAYER_IDChanging(int value);
    partial void OnPLAYER_IDChanged();
    partial void OnMlbComIdChanging(System.Nullable<int> value);
    partial void OnMlbComIdChanged();
    partial void OnEspnIdChanging(System.Nullable<int> value);
    partial void OnEspnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPronouncedChanging(string value);
    partial void OnPronouncedChanged();
    partial void OnBirthdateChanging(System.Nullable<System.DateTime> value);
    partial void OnBirthdateChanged();
    partial void OnBirthplaceChanging(string value);
    partial void OnBirthplaceChanged();
    partial void OnBatsChanging(string value);
    partial void OnBatsChanged();
    partial void OnThrowsChanging(string value);
    partial void OnThrowsChanged();
    partial void OnHeightChanging(string value);
    partial void OnHeightChanged();
    partial void OnWeightChanging(string value);
    partial void OnWeightChanged();
    partial void OnPositionChanging(string value);
    partial void OnPositionChanged();
    partial void OnExperienceChanging(System.Nullable<int> value);
    partial void OnExperienceChanged();
    partial void OnSalaryChanging(System.Nullable<decimal> value);
    partial void OnSalaryChanged();
    partial void OnCollegeChanging(string value);
    partial void OnCollegeChanged();
    partial void OnDebutChanging(System.Nullable<System.DateTime> value);
    partial void OnDebutChanged();
    #endregion
		
		public PLAYER()
		{
			this._PLAYER_YEARLY_BATTINGs = new EntitySet<PLAYER_YEARLY_BATTING>(new Action<PLAYER_YEARLY_BATTING>(this.attach_PLAYER_YEARLY_BATTINGs), new Action<PLAYER_YEARLY_BATTING>(this.detach_PLAYER_YEARLY_BATTINGs));
			this._PLAYER_YEARLY_PITCHINGs = new EntitySet<PLAYER_YEARLY_PITCHING>(new Action<PLAYER_YEARLY_PITCHING>(this.attach_PLAYER_YEARLY_PITCHINGs), new Action<PLAYER_YEARLY_PITCHING>(this.detach_PLAYER_YEARLY_PITCHINGs));
			this._CONTRACTs = new EntitySet<CONTRACT>(new Action<CONTRACT>(this.attach_CONTRACTs), new Action<CONTRACT>(this.detach_CONTRACTs));
			OnCreated();
		}
		
		[Column(Storage="_PLAYER_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PLAYER_ID
		{
			get
			{
				return this._PLAYER_ID;
			}
			set
			{
				if ((this._PLAYER_ID != value))
				{
					this.OnPLAYER_IDChanging(value);
					this.SendPropertyChanging();
					this._PLAYER_ID = value;
					this.SendPropertyChanged("PLAYER_ID");
					this.OnPLAYER_IDChanged();
				}
			}
		}
		
		[Column(Storage="_MlbComId", DbType="Int")]
		public System.Nullable<int> MlbComId
		{
			get
			{
				return this._MlbComId;
			}
			set
			{
				if ((this._MlbComId != value))
				{
					this.OnMlbComIdChanging(value);
					this.SendPropertyChanging();
					this._MlbComId = value;
					this.SendPropertyChanged("MlbComId");
					this.OnMlbComIdChanged();
				}
			}
		}
		
		[Column(Storage="_EspnId", DbType="Int")]
		public System.Nullable<int> EspnId
		{
			get
			{
				return this._EspnId;
			}
			set
			{
				if ((this._EspnId != value))
				{
					this.OnEspnIdChanging(value);
					this.SendPropertyChanging();
					this._EspnId = value;
					this.SendPropertyChanged("EspnId");
					this.OnEspnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(100)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Pronounced", DbType="VarChar(100)")]
		public string Pronounced
		{
			get
			{
				return this._Pronounced;
			}
			set
			{
				if ((this._Pronounced != value))
				{
					this.OnPronouncedChanging(value);
					this.SendPropertyChanging();
					this._Pronounced = value;
					this.SendPropertyChanged("Pronounced");
					this.OnPronouncedChanged();
				}
			}
		}
		
		[Column(Storage="_Birthdate", DbType="DateTime")]
		public System.Nullable<System.DateTime> Birthdate
		{
			get
			{
				return this._Birthdate;
			}
			set
			{
				if ((this._Birthdate != value))
				{
					this.OnBirthdateChanging(value);
					this.SendPropertyChanging();
					this._Birthdate = value;
					this.SendPropertyChanged("Birthdate");
					this.OnBirthdateChanged();
				}
			}
		}
		
		[Column(Storage="_Birthplace", DbType="VarChar(100)")]
		public string Birthplace
		{
			get
			{
				return this._Birthplace;
			}
			set
			{
				if ((this._Birthplace != value))
				{
					this.OnBirthplaceChanging(value);
					this.SendPropertyChanging();
					this._Birthplace = value;
					this.SendPropertyChanged("Birthplace");
					this.OnBirthplaceChanged();
				}
			}
		}
		
		[Column(Storage="_Bats", DbType="VarChar(50)")]
		public string Bats
		{
			get
			{
				return this._Bats;
			}
			set
			{
				if ((this._Bats != value))
				{
					this.OnBatsChanging(value);
					this.SendPropertyChanging();
					this._Bats = value;
					this.SendPropertyChanged("Bats");
					this.OnBatsChanged();
				}
			}
		}
		
		[Column(Storage="_Throws", DbType="VarChar(50)")]
		public string Throws
		{
			get
			{
				return this._Throws;
			}
			set
			{
				if ((this._Throws != value))
				{
					this.OnThrowsChanging(value);
					this.SendPropertyChanging();
					this._Throws = value;
					this.SendPropertyChanged("Throws");
					this.OnThrowsChanged();
				}
			}
		}
		
		[Column(Storage="_Height", DbType="VarChar(50)")]
		public string Height
		{
			get
			{
				return this._Height;
			}
			set
			{
				if ((this._Height != value))
				{
					this.OnHeightChanging(value);
					this.SendPropertyChanging();
					this._Height = value;
					this.SendPropertyChanged("Height");
					this.OnHeightChanged();
				}
			}
		}
		
		[Column(Storage="_Weight", DbType="VarChar(50)")]
		public string Weight
		{
			get
			{
				return this._Weight;
			}
			set
			{
				if ((this._Weight != value))
				{
					this.OnWeightChanging(value);
					this.SendPropertyChanging();
					this._Weight = value;
					this.SendPropertyChanged("Weight");
					this.OnWeightChanged();
				}
			}
		}
		
		[Column(Storage="_Position", DbType="VarChar(50)")]
		public string Position
		{
			get
			{
				return this._Position;
			}
			set
			{
				if ((this._Position != value))
				{
					this.OnPositionChanging(value);
					this.SendPropertyChanging();
					this._Position = value;
					this.SendPropertyChanged("Position");
					this.OnPositionChanged();
				}
			}
		}
		
		[Column(Storage="_Experience", DbType="Int")]
		public System.Nullable<int> Experience
		{
			get
			{
				return this._Experience;
			}
			set
			{
				if ((this._Experience != value))
				{
					this.OnExperienceChanging(value);
					this.SendPropertyChanging();
					this._Experience = value;
					this.SendPropertyChanged("Experience");
					this.OnExperienceChanged();
				}
			}
		}
		
		[Column(Storage="_Salary", DbType="Money")]
		public System.Nullable<decimal> Salary
		{
			get
			{
				return this._Salary;
			}
			set
			{
				if ((this._Salary != value))
				{
					this.OnSalaryChanging(value);
					this.SendPropertyChanging();
					this._Salary = value;
					this.SendPropertyChanged("Salary");
					this.OnSalaryChanged();
				}
			}
		}
		
		[Column(Storage="_College", DbType="VarChar(100)")]
		public string College
		{
			get
			{
				return this._College;
			}
			set
			{
				if ((this._College != value))
				{
					this.OnCollegeChanging(value);
					this.SendPropertyChanging();
					this._College = value;
					this.SendPropertyChanged("College");
					this.OnCollegeChanged();
				}
			}
		}
		
		[Column(Storage="_Debut", DbType="DateTime")]
		public System.Nullable<System.DateTime> Debut
		{
			get
			{
				return this._Debut;
			}
			set
			{
				if ((this._Debut != value))
				{
					this.OnDebutChanging(value);
					this.SendPropertyChanging();
					this._Debut = value;
					this.SendPropertyChanged("Debut");
					this.OnDebutChanged();
				}
			}
		}
		
		[Association(Name="PLAYER_PLAYER_YEARLY_BATTING", Storage="_PLAYER_YEARLY_BATTINGs", OtherKey="Player")]
		public EntitySet<PLAYER_YEARLY_BATTING> PLAYER_YEARLY_BATTINGs
		{
			get
			{
				return this._PLAYER_YEARLY_BATTINGs;
			}
			set
			{
				this._PLAYER_YEARLY_BATTINGs.Assign(value);
			}
		}
		
		[Association(Name="PLAYER_PLAYER_YEARLY_PITCHING", Storage="_PLAYER_YEARLY_PITCHINGs", OtherKey="Player")]
		public EntitySet<PLAYER_YEARLY_PITCHING> PLAYER_YEARLY_PITCHINGs
		{
			get
			{
				return this._PLAYER_YEARLY_PITCHINGs;
			}
			set
			{
				this._PLAYER_YEARLY_PITCHINGs.Assign(value);
			}
		}
		
		[Association(Name="PLAYER_CONTRACT", Storage="_CONTRACTs", OtherKey="Player")]
		public EntitySet<CONTRACT> CONTRACTs
		{
			get
			{
				return this._CONTRACTs;
			}
			set
			{
				this._CONTRACTs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PLAYER_YEARLY_BATTINGs(PLAYER_YEARLY_BATTING entity)
		{
			this.SendPropertyChanging();
			entity.PLAYER1 = this;
		}
		
		private void detach_PLAYER_YEARLY_BATTINGs(PLAYER_YEARLY_BATTING entity)
		{
			this.SendPropertyChanging();
			entity.PLAYER1 = null;
		}
		
		private void attach_PLAYER_YEARLY_PITCHINGs(PLAYER_YEARLY_PITCHING entity)
		{
			this.SendPropertyChanging();
			entity.PLAYER1 = this;
		}
		
		private void detach_PLAYER_YEARLY_PITCHINGs(PLAYER_YEARLY_PITCHING entity)
		{
			this.SendPropertyChanging();
			entity.PLAYER1 = null;
		}
		
		private void attach_CONTRACTs(CONTRACT entity)
		{
			this.SendPropertyChanging();
			entity.PLAYER1 = this;
		}
		
		private void detach_CONTRACTs(CONTRACT entity)
		{
			this.SendPropertyChanging();
			entity.PLAYER1 = null;
		}
	}
	
	[Table(Name="dbo.CONTRACTS")]
	public partial class CONTRACT : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CONTRACT_ID;
		
		private int _Player;
		
		private System.Nullable<int> _Team;
		
		private int _YearSigned;
		
		private EntitySet<CONTRACT_YEAR> _CONTRACT_YEARs;
		
		private EntityRef<PLAYER> _PLAYER1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCONTRACT_IDChanging(int value);
    partial void OnCONTRACT_IDChanged();
    partial void OnPlayerChanging(int value);
    partial void OnPlayerChanged();
    partial void OnTeamChanging(System.Nullable<int> value);
    partial void OnTeamChanged();
    partial void OnYearSignedChanging(int value);
    partial void OnYearSignedChanged();
    #endregion
		
		public CONTRACT()
		{
			this._CONTRACT_YEARs = new EntitySet<CONTRACT_YEAR>(new Action<CONTRACT_YEAR>(this.attach_CONTRACT_YEARs), new Action<CONTRACT_YEAR>(this.detach_CONTRACT_YEARs));
			this._PLAYER1 = default(EntityRef<PLAYER>);
			OnCreated();
		}
		
		[Column(Storage="_CONTRACT_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CONTRACT_ID
		{
			get
			{
				return this._CONTRACT_ID;
			}
			set
			{
				if ((this._CONTRACT_ID != value))
				{
					this.OnCONTRACT_IDChanging(value);
					this.SendPropertyChanging();
					this._CONTRACT_ID = value;
					this.SendPropertyChanged("CONTRACT_ID");
					this.OnCONTRACT_IDChanged();
				}
			}
		}
		
		[Column(Storage="_Player", DbType="Int NOT NULL")]
		public int Player
		{
			get
			{
				return this._Player;
			}
			set
			{
				if ((this._Player != value))
				{
					if (this._PLAYER1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlayerChanging(value);
					this.SendPropertyChanging();
					this._Player = value;
					this.SendPropertyChanged("Player");
					this.OnPlayerChanged();
				}
			}
		}
		
		[Column(Storage="_Team", DbType="Int")]
		public System.Nullable<int> Team
		{
			get
			{
				return this._Team;
			}
			set
			{
				if ((this._Team != value))
				{
					this.OnTeamChanging(value);
					this.SendPropertyChanging();
					this._Team = value;
					this.SendPropertyChanged("Team");
					this.OnTeamChanged();
				}
			}
		}
		
		[Column(Storage="_YearSigned", DbType="Int NOT NULL")]
		public int YearSigned
		{
			get
			{
				return this._YearSigned;
			}
			set
			{
				if ((this._YearSigned != value))
				{
					this.OnYearSignedChanging(value);
					this.SendPropertyChanging();
					this._YearSigned = value;
					this.SendPropertyChanged("YearSigned");
					this.OnYearSignedChanged();
				}
			}
		}
		
		[Association(Name="CONTRACT_CONTRACT_YEAR", Storage="_CONTRACT_YEARs", OtherKey="Contract")]
		public EntitySet<CONTRACT_YEAR> CONTRACT_YEARs
		{
			get
			{
				return this._CONTRACT_YEARs;
			}
			set
			{
				this._CONTRACT_YEARs.Assign(value);
			}
		}
		
		[Association(Name="PLAYER_CONTRACT", Storage="_PLAYER1", ThisKey="Player", IsForeignKey=true)]
		public PLAYER PLAYER1
		{
			get
			{
				return this._PLAYER1.Entity;
			}
			set
			{
				PLAYER previousValue = this._PLAYER1.Entity;
				if (((previousValue != value) 
							|| (this._PLAYER1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PLAYER1.Entity = null;
						previousValue.CONTRACTs.Remove(this);
					}
					this._PLAYER1.Entity = value;
					if ((value != null))
					{
						value.CONTRACTs.Add(this);
						this._Player = value.PLAYER_ID;
					}
					else
					{
						this._Player = default(int);
					}
					this.SendPropertyChanged("PLAYER1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CONTRACT_YEARs(CONTRACT_YEAR entity)
		{
			this.SendPropertyChanging();
			entity.CONTRACT1 = this;
		}
		
		private void detach_CONTRACT_YEARs(CONTRACT_YEAR entity)
		{
			this.SendPropertyChanging();
			entity.CONTRACT1 = null;
		}
	}
	
	[Table(Name="dbo.CONTRACT_YEARS")]
	public partial class CONTRACT_YEAR : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Contract;
		
		private int _Year;
		
		private decimal _Salary;
		
		private EntityRef<CONTRACT> _CONTRACT1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnContractChanging(int value);
    partial void OnContractChanged();
    partial void OnYearChanging(int value);
    partial void OnYearChanged();
    partial void OnSalaryChanging(decimal value);
    partial void OnSalaryChanged();
    #endregion
		
		public CONTRACT_YEAR()
		{
			this._CONTRACT1 = default(EntityRef<CONTRACT>);
			OnCreated();
		}
		
		[Column(Storage="_Contract", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Contract
		{
			get
			{
				return this._Contract;
			}
			set
			{
				if ((this._Contract != value))
				{
					if (this._CONTRACT1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContractChanging(value);
					this.SendPropertyChanging();
					this._Contract = value;
					this.SendPropertyChanged("Contract");
					this.OnContractChanged();
				}
			}
		}
		
		[Column(Storage="_Year", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Year
		{
			get
			{
				return this._Year;
			}
			set
			{
				if ((this._Year != value))
				{
					this.OnYearChanging(value);
					this.SendPropertyChanging();
					this._Year = value;
					this.SendPropertyChanged("Year");
					this.OnYearChanged();
				}
			}
		}
		
		[Column(Storage="_Salary", DbType="Decimal(18,3) NOT NULL")]
		public decimal Salary
		{
			get
			{
				return this._Salary;
			}
			set
			{
				if ((this._Salary != value))
				{
					this.OnSalaryChanging(value);
					this.SendPropertyChanging();
					this._Salary = value;
					this.SendPropertyChanged("Salary");
					this.OnSalaryChanged();
				}
			}
		}
		
		[Association(Name="CONTRACT_CONTRACT_YEAR", Storage="_CONTRACT1", ThisKey="Contract", IsForeignKey=true)]
		public CONTRACT CONTRACT1
		{
			get
			{
				return this._CONTRACT1.Entity;
			}
			set
			{
				CONTRACT previousValue = this._CONTRACT1.Entity;
				if (((previousValue != value) 
							|| (this._CONTRACT1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CONTRACT1.Entity = null;
						previousValue.CONTRACT_YEARs.Remove(this);
					}
					this._CONTRACT1.Entity = value;
					if ((value != null))
					{
						value.CONTRACT_YEARs.Add(this);
						this._Contract = value.CONTRACT_ID;
					}
					else
					{
						this._Contract = default(int);
					}
					this.SendPropertyChanged("CONTRACT1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
