#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WickedSick.Data.FantasyBaseball
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="FANTASY_BASEBALL")]
	public partial class FantasyBaseballDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertDRAFT_TYPE(DRAFT_TYPE instance);
    partial void UpdateDRAFT_TYPE(DRAFT_TYPE instance);
    partial void DeleteDRAFT_TYPE(DRAFT_TYPE instance);
    partial void InsertLEAGUE(LEAGUE instance);
    partial void UpdateLEAGUE(LEAGUE instance);
    partial void DeleteLEAGUE(LEAGUE instance);
    partial void InsertPOSITION(POSITION instance);
    partial void UpdatePOSITION(POSITION instance);
    partial void DeletePOSITION(POSITION instance);
    partial void InsertPLAYER_ELIGIBILITY(PLAYER_ELIGIBILITY instance);
    partial void UpdatePLAYER_ELIGIBILITY(PLAYER_ELIGIBILITY instance);
    partial void DeletePLAYER_ELIGIBILITY(PLAYER_ELIGIBILITY instance);
    partial void InsertTEAM_ROSTER(TEAM_ROSTER instance);
    partial void UpdateTEAM_ROSTER(TEAM_ROSTER instance);
    partial void DeleteTEAM_ROSTER(TEAM_ROSTER instance);
    partial void InsertLEAGUE_POSITION(LEAGUE_POSITION instance);
    partial void UpdateLEAGUE_POSITION(LEAGUE_POSITION instance);
    partial void DeleteLEAGUE_POSITION(LEAGUE_POSITION instance);
    partial void InsertTEAM(TEAM instance);
    partial void UpdateTEAM(TEAM instance);
    partial void DeleteTEAM(TEAM instance);
    #endregion
		
		public FantasyBaseballDataContext() : 
				base(global::WickedSick.Data.FantasyBaseball.Properties.Settings.Default.FANTASY_BASEBALLConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public FantasyBaseballDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FantasyBaseballDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FantasyBaseballDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FantasyBaseballDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<DRAFT_TYPE> DRAFT_TYPEs
		{
			get
			{
				return this.GetTable<DRAFT_TYPE>();
			}
		}
		
		public System.Data.Linq.Table<LEAGUE> LEAGUEs
		{
			get
			{
				return this.GetTable<LEAGUE>();
			}
		}
		
		public System.Data.Linq.Table<POSITION> POSITIONs
		{
			get
			{
				return this.GetTable<POSITION>();
			}
		}
		
		public System.Data.Linq.Table<PLAYER_ELIGIBILITY> PLAYER_ELIGIBILITies
		{
			get
			{
				return this.GetTable<PLAYER_ELIGIBILITY>();
			}
		}
		
		public System.Data.Linq.Table<TEAM_ROSTER> TEAM_ROSTERs
		{
			get
			{
				return this.GetTable<TEAM_ROSTER>();
			}
		}
		
		public System.Data.Linq.Table<LEAGUE_POSITION> LEAGUE_POSITIONs
		{
			get
			{
				return this.GetTable<LEAGUE_POSITION>();
			}
		}
		
		public System.Data.Linq.Table<TEAM> TEAMs
		{
			get
			{
				return this.GetTable<TEAM>();
			}
		}
		
		[Function(Name="dbo.GetWaiversBattersYearly")]
		public ISingleResult<GetWaiversBattersYearlyResult> GetWaiversBattersYearly([Parameter(DbType="Int")] System.Nullable<int> league, [Parameter(DbType="Int")] System.Nullable<int> year)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), league, year);
			return ((ISingleResult<GetWaiversBattersYearlyResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.GetWaiversPitchersYearly")]
		public ISingleResult<GetWaiversPitchersYearlyResult> GetWaiversPitchersYearly([Parameter(DbType="Int")] System.Nullable<int> league, [Parameter(DbType="Int")] System.Nullable<int> year)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), league, year);
			return ((ISingleResult<GetWaiversPitchersYearlyResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.GetFantasyTeamBattersYearly")]
		public ISingleResult<GetFantasyTeamBattersYearlyResult> GetFantasyTeamBattersYearly([Parameter(DbType="Int")] System.Nullable<int> league, [Parameter(DbType="Int")] System.Nullable<int> teamId, [Parameter(DbType="Int")] System.Nullable<int> year)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), league, teamId, year);
			return ((ISingleResult<GetFantasyTeamBattersYearlyResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.GetFantasyTeamPitchersYearly")]
		public ISingleResult<GetFantasyTeamPitchersYearlyResult> GetFantasyTeamPitchersYearly([Parameter(DbType="Int")] System.Nullable<int> league, [Parameter(DbType="Int")] System.Nullable<int> teamId, [Parameter(DbType="Int")] System.Nullable<int> year)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), league, teamId, year);
			return ((ISingleResult<GetFantasyTeamPitchersYearlyResult>)(result.ReturnValue));
		}
	}
	
	[Table(Name="dbo.DRAFT_TYPES")]
	public partial class DRAFT_TYPE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DRAFT_TYPE_ID;
		
		private string _Description;
		
		private EntitySet<LEAGUE> _LEAGUEs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDRAFT_TYPE_IDChanging(int value);
    partial void OnDRAFT_TYPE_IDChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public DRAFT_TYPE()
		{
			this._LEAGUEs = new EntitySet<LEAGUE>(new Action<LEAGUE>(this.attach_LEAGUEs), new Action<LEAGUE>(this.detach_LEAGUEs));
			OnCreated();
		}
		
		[Column(Storage="_DRAFT_TYPE_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DRAFT_TYPE_ID
		{
			get
			{
				return this._DRAFT_TYPE_ID;
			}
			set
			{
				if ((this._DRAFT_TYPE_ID != value))
				{
					this.OnDRAFT_TYPE_IDChanging(value);
					this.SendPropertyChanging();
					this._DRAFT_TYPE_ID = value;
					this.SendPropertyChanged("DRAFT_TYPE_ID");
					this.OnDRAFT_TYPE_IDChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="VarChar(50)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Association(Name="DRAFT_TYPE_LEAGUE", Storage="_LEAGUEs", ThisKey="DRAFT_TYPE_ID", OtherKey="DraftType")]
		public EntitySet<LEAGUE> LEAGUEs
		{
			get
			{
				return this._LEAGUEs;
			}
			set
			{
				this._LEAGUEs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LEAGUEs(LEAGUE entity)
		{
			this.SendPropertyChanging();
			entity.DRAFT_TYPE = this;
		}
		
		private void detach_LEAGUEs(LEAGUE entity)
		{
			this.SendPropertyChanging();
			entity.DRAFT_TYPE = null;
		}
	}
	
	[Table(Name="dbo.LEAGUES")]
	public partial class LEAGUE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LEAGUE_ID;
		
		private string _Name;
		
		private string _Password;
		
		private int _Commissioner;
		
		private System.Nullable<System.DateTime> _DraftDate;
		
		private System.Nullable<int> _DraftType;
		
		private System.Nullable<int> _LiveDraftPickDuration;
		
		private System.Nullable<int> _Capacity;
		
		private System.Nullable<int> _MaxRosterSize;
		
		private EntitySet<LEAGUE_POSITION> _LEAGUE_POSITIONs;
		
		private EntitySet<TEAM> _TEAMs;
		
		private EntityRef<DRAFT_TYPE> _DRAFT_TYPE;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLEAGUE_IDChanging(int value);
    partial void OnLEAGUE_IDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnCommissionerChanging(int value);
    partial void OnCommissionerChanged();
    partial void OnDraftDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDraftDateChanged();
    partial void OnDraftTypeChanging(System.Nullable<int> value);
    partial void OnDraftTypeChanged();
    partial void OnLiveDraftPickDurationChanging(System.Nullable<int> value);
    partial void OnLiveDraftPickDurationChanged();
    partial void OnCapacityChanging(System.Nullable<int> value);
    partial void OnCapacityChanged();
    partial void OnMaxRosterSizeChanging(System.Nullable<int> value);
    partial void OnMaxRosterSizeChanged();
    #endregion
		
		public LEAGUE()
		{
			this._LEAGUE_POSITIONs = new EntitySet<LEAGUE_POSITION>(new Action<LEAGUE_POSITION>(this.attach_LEAGUE_POSITIONs), new Action<LEAGUE_POSITION>(this.detach_LEAGUE_POSITIONs));
			this._TEAMs = new EntitySet<TEAM>(new Action<TEAM>(this.attach_TEAMs), new Action<TEAM>(this.detach_TEAMs));
			this._DRAFT_TYPE = default(EntityRef<DRAFT_TYPE>);
			OnCreated();
		}
		
		[Column(Storage="_LEAGUE_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LEAGUE_ID
		{
			get
			{
				return this._LEAGUE_ID;
			}
			set
			{
				if ((this._LEAGUE_ID != value))
				{
					this.OnLEAGUE_IDChanging(value);
					this.SendPropertyChanging();
					this._LEAGUE_ID = value;
					this.SendPropertyChanged("LEAGUE_ID");
					this.OnLEAGUE_IDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Password", DbType="VarChar(16)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[Column(Storage="_Commissioner", DbType="Int NOT NULL")]
		public int Commissioner
		{
			get
			{
				return this._Commissioner;
			}
			set
			{
				if ((this._Commissioner != value))
				{
					this.OnCommissionerChanging(value);
					this.SendPropertyChanging();
					this._Commissioner = value;
					this.SendPropertyChanged("Commissioner");
					this.OnCommissionerChanged();
				}
			}
		}
		
		[Column(Storage="_DraftDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DraftDate
		{
			get
			{
				return this._DraftDate;
			}
			set
			{
				if ((this._DraftDate != value))
				{
					this.OnDraftDateChanging(value);
					this.SendPropertyChanging();
					this._DraftDate = value;
					this.SendPropertyChanged("DraftDate");
					this.OnDraftDateChanged();
				}
			}
		}
		
		[Column(Storage="_DraftType", DbType="Int")]
		public System.Nullable<int> DraftType
		{
			get
			{
				return this._DraftType;
			}
			set
			{
				if ((this._DraftType != value))
				{
					if (this._DRAFT_TYPE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDraftTypeChanging(value);
					this.SendPropertyChanging();
					this._DraftType = value;
					this.SendPropertyChanged("DraftType");
					this.OnDraftTypeChanged();
				}
			}
		}
		
		[Column(Storage="_LiveDraftPickDuration", DbType="Int")]
		public System.Nullable<int> LiveDraftPickDuration
		{
			get
			{
				return this._LiveDraftPickDuration;
			}
			set
			{
				if ((this._LiveDraftPickDuration != value))
				{
					this.OnLiveDraftPickDurationChanging(value);
					this.SendPropertyChanging();
					this._LiveDraftPickDuration = value;
					this.SendPropertyChanged("LiveDraftPickDuration");
					this.OnLiveDraftPickDurationChanged();
				}
			}
		}
		
		[Column(Storage="_Capacity", DbType="Int")]
		public System.Nullable<int> Capacity
		{
			get
			{
				return this._Capacity;
			}
			set
			{
				if ((this._Capacity != value))
				{
					this.OnCapacityChanging(value);
					this.SendPropertyChanging();
					this._Capacity = value;
					this.SendPropertyChanged("Capacity");
					this.OnCapacityChanged();
				}
			}
		}
		
		[Column(Storage="_MaxRosterSize", DbType="Int")]
		public System.Nullable<int> MaxRosterSize
		{
			get
			{
				return this._MaxRosterSize;
			}
			set
			{
				if ((this._MaxRosterSize != value))
				{
					this.OnMaxRosterSizeChanging(value);
					this.SendPropertyChanging();
					this._MaxRosterSize = value;
					this.SendPropertyChanged("MaxRosterSize");
					this.OnMaxRosterSizeChanged();
				}
			}
		}
		
		[Association(Name="LEAGUE_LEAGUE_POSITION", Storage="_LEAGUE_POSITIONs", ThisKey="LEAGUE_ID", OtherKey="League")]
		public EntitySet<LEAGUE_POSITION> LEAGUE_POSITIONs
		{
			get
			{
				return this._LEAGUE_POSITIONs;
			}
			set
			{
				this._LEAGUE_POSITIONs.Assign(value);
			}
		}
		
		[Association(Name="LEAGUE_TEAM", Storage="_TEAMs", ThisKey="LEAGUE_ID", OtherKey="League")]
		public EntitySet<TEAM> TEAMs
		{
			get
			{
				return this._TEAMs;
			}
			set
			{
				this._TEAMs.Assign(value);
			}
		}
		
		[Association(Name="DRAFT_TYPE_LEAGUE", Storage="_DRAFT_TYPE", ThisKey="DraftType", OtherKey="DRAFT_TYPE_ID", IsForeignKey=true)]
		public DRAFT_TYPE DRAFT_TYPE
		{
			get
			{
				return this._DRAFT_TYPE.Entity;
			}
			set
			{
				DRAFT_TYPE previousValue = this._DRAFT_TYPE.Entity;
				if (((previousValue != value) 
							|| (this._DRAFT_TYPE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DRAFT_TYPE.Entity = null;
						previousValue.LEAGUEs.Remove(this);
					}
					this._DRAFT_TYPE.Entity = value;
					if ((value != null))
					{
						value.LEAGUEs.Add(this);
						this._DraftType = value.DRAFT_TYPE_ID;
					}
					else
					{
						this._DraftType = default(Nullable<int>);
					}
					this.SendPropertyChanged("DRAFT_TYPE");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LEAGUE_POSITIONs(LEAGUE_POSITION entity)
		{
			this.SendPropertyChanging();
			entity.LEAGUE1 = this;
		}
		
		private void detach_LEAGUE_POSITIONs(LEAGUE_POSITION entity)
		{
			this.SendPropertyChanging();
			entity.LEAGUE1 = null;
		}
		
		private void attach_TEAMs(TEAM entity)
		{
			this.SendPropertyChanging();
			entity.LEAGUE1 = this;
		}
		
		private void detach_TEAMs(TEAM entity)
		{
			this.SendPropertyChanging();
			entity.LEAGUE1 = null;
		}
	}
	
	[Table(Name="dbo.POSITIONS")]
	public partial class POSITION : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _POSITION_ID;
		
		private string _Abbreviation;
		
		private string _Name;
		
		private EntitySet<PLAYER_ELIGIBILITY> _PLAYER_ELIGIBILITies;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPOSITION_IDChanging(int value);
    partial void OnPOSITION_IDChanged();
    partial void OnAbbreviationChanging(string value);
    partial void OnAbbreviationChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public POSITION()
		{
			this._PLAYER_ELIGIBILITies = new EntitySet<PLAYER_ELIGIBILITY>(new Action<PLAYER_ELIGIBILITY>(this.attach_PLAYER_ELIGIBILITies), new Action<PLAYER_ELIGIBILITY>(this.detach_PLAYER_ELIGIBILITies));
			OnCreated();
		}
		
		[Column(Storage="_POSITION_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int POSITION_ID
		{
			get
			{
				return this._POSITION_ID;
			}
			set
			{
				if ((this._POSITION_ID != value))
				{
					this.OnPOSITION_IDChanging(value);
					this.SendPropertyChanging();
					this._POSITION_ID = value;
					this.SendPropertyChanged("POSITION_ID");
					this.OnPOSITION_IDChanged();
				}
			}
		}
		
		[Column(Storage="_Abbreviation", DbType="VarChar(4) NOT NULL", CanBeNull=false)]
		public string Abbreviation
		{
			get
			{
				return this._Abbreviation;
			}
			set
			{
				if ((this._Abbreviation != value))
				{
					this.OnAbbreviationChanging(value);
					this.SendPropertyChanging();
					this._Abbreviation = value;
					this.SendPropertyChanged("Abbreviation");
					this.OnAbbreviationChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="POSITION_PLAYER_ELIGIBILITY", Storage="_PLAYER_ELIGIBILITies", ThisKey="POSITION_ID", OtherKey="Position")]
		public EntitySet<PLAYER_ELIGIBILITY> PLAYER_ELIGIBILITies
		{
			get
			{
				return this._PLAYER_ELIGIBILITies;
			}
			set
			{
				this._PLAYER_ELIGIBILITies.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PLAYER_ELIGIBILITies(PLAYER_ELIGIBILITY entity)
		{
			this.SendPropertyChanging();
			entity.POSITION1 = this;
		}
		
		private void detach_PLAYER_ELIGIBILITies(PLAYER_ELIGIBILITY entity)
		{
			this.SendPropertyChanging();
			entity.POSITION1 = null;
		}
	}
	
	[Table(Name="dbo.PLAYER_ELIGIBILITY")]
	public partial class PLAYER_ELIGIBILITY : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Player;
		
		private int _Position;
		
		private EntityRef<POSITION> _POSITION1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPlayerChanging(int value);
    partial void OnPlayerChanged();
    partial void OnPositionChanging(int value);
    partial void OnPositionChanged();
    #endregion
		
		public PLAYER_ELIGIBILITY()
		{
			this._POSITION1 = default(EntityRef<POSITION>);
			OnCreated();
		}
		
		[Column(Storage="_Player", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Player
		{
			get
			{
				return this._Player;
			}
			set
			{
				if ((this._Player != value))
				{
					this.OnPlayerChanging(value);
					this.SendPropertyChanging();
					this._Player = value;
					this.SendPropertyChanged("Player");
					this.OnPlayerChanged();
				}
			}
		}
		
		[Column(Storage="_Position", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Position
		{
			get
			{
				return this._Position;
			}
			set
			{
				if ((this._Position != value))
				{
					if (this._POSITION1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPositionChanging(value);
					this.SendPropertyChanging();
					this._Position = value;
					this.SendPropertyChanged("Position");
					this.OnPositionChanged();
				}
			}
		}
		
		[Association(Name="POSITION_PLAYER_ELIGIBILITY", Storage="_POSITION1", ThisKey="Position", OtherKey="POSITION_ID", IsForeignKey=true)]
		public POSITION POSITION1
		{
			get
			{
				return this._POSITION1.Entity;
			}
			set
			{
				POSITION previousValue = this._POSITION1.Entity;
				if (((previousValue != value) 
							|| (this._POSITION1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._POSITION1.Entity = null;
						previousValue.PLAYER_ELIGIBILITies.Remove(this);
					}
					this._POSITION1.Entity = value;
					if ((value != null))
					{
						value.PLAYER_ELIGIBILITies.Add(this);
						this._Position = value.POSITION_ID;
					}
					else
					{
						this._Position = default(int);
					}
					this.SendPropertyChanged("POSITION1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.TEAM_ROSTERS")]
	public partial class TEAM_ROSTER : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Team;
		
		private int _Player;
		
		private System.Nullable<int> _PositionOrdinal;
		
		private EntityRef<TEAM> _TEAM1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTeamChanging(int value);
    partial void OnTeamChanged();
    partial void OnPlayerChanging(int value);
    partial void OnPlayerChanged();
    partial void OnPositionOrdinalChanging(System.Nullable<int> value);
    partial void OnPositionOrdinalChanged();
    #endregion
		
		public TEAM_ROSTER()
		{
			this._TEAM1 = default(EntityRef<TEAM>);
			OnCreated();
		}
		
		[Column(Storage="_Team", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Team
		{
			get
			{
				return this._Team;
			}
			set
			{
				if ((this._Team != value))
				{
					if (this._TEAM1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeamChanging(value);
					this.SendPropertyChanging();
					this._Team = value;
					this.SendPropertyChanged("Team");
					this.OnTeamChanged();
				}
			}
		}
		
		[Column(Storage="_Player", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Player
		{
			get
			{
				return this._Player;
			}
			set
			{
				if ((this._Player != value))
				{
					this.OnPlayerChanging(value);
					this.SendPropertyChanging();
					this._Player = value;
					this.SendPropertyChanged("Player");
					this.OnPlayerChanged();
				}
			}
		}
		
		[Column(Storage="_PositionOrdinal", DbType="Int")]
		public System.Nullable<int> PositionOrdinal
		{
			get
			{
				return this._PositionOrdinal;
			}
			set
			{
				if ((this._PositionOrdinal != value))
				{
					this.OnPositionOrdinalChanging(value);
					this.SendPropertyChanging();
					this._PositionOrdinal = value;
					this.SendPropertyChanged("PositionOrdinal");
					this.OnPositionOrdinalChanged();
				}
			}
		}
		
		[Association(Name="TEAM_TEAM_ROSTER", Storage="_TEAM1", ThisKey="Team", OtherKey="TEAM_ID", IsForeignKey=true)]
		public TEAM TEAM1
		{
			get
			{
				return this._TEAM1.Entity;
			}
			set
			{
				TEAM previousValue = this._TEAM1.Entity;
				if (((previousValue != value) 
							|| (this._TEAM1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TEAM1.Entity = null;
						previousValue.TEAM_ROSTERs.Remove(this);
					}
					this._TEAM1.Entity = value;
					if ((value != null))
					{
						value.TEAM_ROSTERs.Add(this);
						this._Team = value.TEAM_ID;
					}
					else
					{
						this._Team = default(int);
					}
					this.SendPropertyChanged("TEAM1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.LEAGUE_POSITIONS")]
	public partial class LEAGUE_POSITION : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _League;
		
		private int _Position;
		
		private int _Ordinal;
		
		private EntityRef<LEAGUE> _LEAGUE1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLeagueChanging(int value);
    partial void OnLeagueChanged();
    partial void OnPositionChanging(int value);
    partial void OnPositionChanged();
    partial void OnOrdinalChanging(int value);
    partial void OnOrdinalChanged();
    #endregion
		
		public LEAGUE_POSITION()
		{
			this._LEAGUE1 = default(EntityRef<LEAGUE>);
			OnCreated();
		}
		
		[Column(Storage="_League", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int League
		{
			get
			{
				return this._League;
			}
			set
			{
				if ((this._League != value))
				{
					if (this._LEAGUE1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLeagueChanging(value);
					this.SendPropertyChanging();
					this._League = value;
					this.SendPropertyChanged("League");
					this.OnLeagueChanged();
				}
			}
		}
		
		[Column(Storage="_Position", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Position
		{
			get
			{
				return this._Position;
			}
			set
			{
				if ((this._Position != value))
				{
					this.OnPositionChanging(value);
					this.SendPropertyChanging();
					this._Position = value;
					this.SendPropertyChanged("Position");
					this.OnPositionChanged();
				}
			}
		}
		
		[Column(Storage="_Ordinal", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Ordinal
		{
			get
			{
				return this._Ordinal;
			}
			set
			{
				if ((this._Ordinal != value))
				{
					this.OnOrdinalChanging(value);
					this.SendPropertyChanging();
					this._Ordinal = value;
					this.SendPropertyChanged("Ordinal");
					this.OnOrdinalChanged();
				}
			}
		}
		
		[Association(Name="LEAGUE_LEAGUE_POSITION", Storage="_LEAGUE1", ThisKey="League", OtherKey="LEAGUE_ID", IsForeignKey=true)]
		public LEAGUE LEAGUE1
		{
			get
			{
				return this._LEAGUE1.Entity;
			}
			set
			{
				LEAGUE previousValue = this._LEAGUE1.Entity;
				if (((previousValue != value) 
							|| (this._LEAGUE1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LEAGUE1.Entity = null;
						previousValue.LEAGUE_POSITIONs.Remove(this);
					}
					this._LEAGUE1.Entity = value;
					if ((value != null))
					{
						value.LEAGUE_POSITIONs.Add(this);
						this._League = value.LEAGUE_ID;
					}
					else
					{
						this._League = default(int);
					}
					this.SendPropertyChanged("LEAGUE1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.TEAMS")]
	public partial class TEAM : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TEAM_ID;
		
		private string _Name;
		
		private System.Nullable<int> _League;
		
		private int _Owner;
		
		private string _Logo;
		
		private EntitySet<TEAM_ROSTER> _TEAM_ROSTERs;
		
		private EntityRef<LEAGUE> _LEAGUE1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTEAM_IDChanging(int value);
    partial void OnTEAM_IDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnLeagueChanging(System.Nullable<int> value);
    partial void OnLeagueChanged();
    partial void OnOwnerChanging(int value);
    partial void OnOwnerChanged();
    partial void OnLogoChanging(string value);
    partial void OnLogoChanged();
    #endregion
		
		public TEAM()
		{
			this._TEAM_ROSTERs = new EntitySet<TEAM_ROSTER>(new Action<TEAM_ROSTER>(this.attach_TEAM_ROSTERs), new Action<TEAM_ROSTER>(this.detach_TEAM_ROSTERs));
			this._LEAGUE1 = default(EntityRef<LEAGUE>);
			OnCreated();
		}
		
		[Column(Storage="_TEAM_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TEAM_ID
		{
			get
			{
				return this._TEAM_ID;
			}
			set
			{
				if ((this._TEAM_ID != value))
				{
					this.OnTEAM_IDChanging(value);
					this.SendPropertyChanging();
					this._TEAM_ID = value;
					this.SendPropertyChanged("TEAM_ID");
					this.OnTEAM_IDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_League", DbType="Int")]
		public System.Nullable<int> League
		{
			get
			{
				return this._League;
			}
			set
			{
				if ((this._League != value))
				{
					if (this._LEAGUE1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLeagueChanging(value);
					this.SendPropertyChanging();
					this._League = value;
					this.SendPropertyChanged("League");
					this.OnLeagueChanged();
				}
			}
		}
		
		[Column(Storage="_Owner", DbType="Int NOT NULL")]
		public int Owner
		{
			get
			{
				return this._Owner;
			}
			set
			{
				if ((this._Owner != value))
				{
					this.OnOwnerChanging(value);
					this.SendPropertyChanging();
					this._Owner = value;
					this.SendPropertyChanged("Owner");
					this.OnOwnerChanged();
				}
			}
		}
		
		[Column(Storage="_Logo", DbType="VarChar(50)")]
		public string Logo
		{
			get
			{
				return this._Logo;
			}
			set
			{
				if ((this._Logo != value))
				{
					this.OnLogoChanging(value);
					this.SendPropertyChanging();
					this._Logo = value;
					this.SendPropertyChanged("Logo");
					this.OnLogoChanged();
				}
			}
		}
		
		[Association(Name="TEAM_TEAM_ROSTER", Storage="_TEAM_ROSTERs", ThisKey="TEAM_ID", OtherKey="Team")]
		public EntitySet<TEAM_ROSTER> TEAM_ROSTERs
		{
			get
			{
				return this._TEAM_ROSTERs;
			}
			set
			{
				this._TEAM_ROSTERs.Assign(value);
			}
		}
		
		[Association(Name="LEAGUE_TEAM", Storage="_LEAGUE1", ThisKey="League", OtherKey="LEAGUE_ID", IsForeignKey=true)]
		public LEAGUE LEAGUE1
		{
			get
			{
				return this._LEAGUE1.Entity;
			}
			set
			{
				LEAGUE previousValue = this._LEAGUE1.Entity;
				if (((previousValue != value) 
							|| (this._LEAGUE1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LEAGUE1.Entity = null;
						previousValue.TEAMs.Remove(this);
					}
					this._LEAGUE1.Entity = value;
					if ((value != null))
					{
						value.TEAMs.Add(this);
						this._League = value.LEAGUE_ID;
					}
					else
					{
						this._League = default(Nullable<int>);
					}
					this.SendPropertyChanged("LEAGUE1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TEAM_ROSTERs(TEAM_ROSTER entity)
		{
			this.SendPropertyChanging();
			entity.TEAM1 = this;
		}
		
		private void detach_TEAM_ROSTERs(TEAM_ROSTER entity)
		{
			this.SendPropertyChanging();
			entity.TEAM1 = null;
		}
	}
	
	public partial class GetWaiversBattersYearlyResult
	{
		
		private string _Name;
		
		private int _Player;
		
		private System.Nullable<int> _Team;
		
		private System.Nullable<int> _League;
		
		private int _Position;
		
		private System.Nullable<int> _R;
		
		private System.Nullable<int> _HR;
		
		private System.Nullable<int> _RBI;
		
		private System.Nullable<int> _SB;
		
		private System.Nullable<int> _BB;
		
		private System.Nullable<int> _AB;
		
		private System.Nullable<int> _H;
		
		private System.Nullable<int> @__2B;
		
		private System.Nullable<int> @__3B;
		
		private System.Nullable<int> _HBP;
		
		private System.Nullable<int> _SF;
		
		public GetWaiversBattersYearlyResult()
		{
		}
		
		[Column(Storage="_Name", DbType="VarChar(100)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[Column(Storage="_Player", DbType="Int NOT NULL")]
		public int Player
		{
			get
			{
				return this._Player;
			}
			set
			{
				if ((this._Player != value))
				{
					this._Player = value;
				}
			}
		}
		
		[Column(Storage="_Team", DbType="Int")]
		public System.Nullable<int> Team
		{
			get
			{
				return this._Team;
			}
			set
			{
				if ((this._Team != value))
				{
					this._Team = value;
				}
			}
		}
		
		[Column(Storage="_League", DbType="Int")]
		public System.Nullable<int> League
		{
			get
			{
				return this._League;
			}
			set
			{
				if ((this._League != value))
				{
					this._League = value;
				}
			}
		}
		
		[Column(Storage="_Position", DbType="Int NOT NULL")]
		public int Position
		{
			get
			{
				return this._Position;
			}
			set
			{
				if ((this._Position != value))
				{
					this._Position = value;
				}
			}
		}
		
		[Column(Storage="_R", DbType="Int")]
		public System.Nullable<int> R
		{
			get
			{
				return this._R;
			}
			set
			{
				if ((this._R != value))
				{
					this._R = value;
				}
			}
		}
		
		[Column(Storage="_HR", DbType="Int")]
		public System.Nullable<int> HR
		{
			get
			{
				return this._HR;
			}
			set
			{
				if ((this._HR != value))
				{
					this._HR = value;
				}
			}
		}
		
		[Column(Storage="_RBI", DbType="Int")]
		public System.Nullable<int> RBI
		{
			get
			{
				return this._RBI;
			}
			set
			{
				if ((this._RBI != value))
				{
					this._RBI = value;
				}
			}
		}
		
		[Column(Storage="_SB", DbType="Int")]
		public System.Nullable<int> SB
		{
			get
			{
				return this._SB;
			}
			set
			{
				if ((this._SB != value))
				{
					this._SB = value;
				}
			}
		}
		
		[Column(Storage="_BB", DbType="Int")]
		public System.Nullable<int> BB
		{
			get
			{
				return this._BB;
			}
			set
			{
				if ((this._BB != value))
				{
					this._BB = value;
				}
			}
		}
		
		[Column(Storage="_AB", DbType="Int")]
		public System.Nullable<int> AB
		{
			get
			{
				return this._AB;
			}
			set
			{
				if ((this._AB != value))
				{
					this._AB = value;
				}
			}
		}
		
		[Column(Storage="_H", DbType="Int")]
		public System.Nullable<int> H
		{
			get
			{
				return this._H;
			}
			set
			{
				if ((this._H != value))
				{
					this._H = value;
				}
			}
		}
		
		[Column(Name="[2B]", Storage="__2B", DbType="Int")]
		public System.Nullable<int> _2B
		{
			get
			{
				return this.@__2B;
			}
			set
			{
				if ((this.@__2B != value))
				{
					this.@__2B = value;
				}
			}
		}
		
		[Column(Name="[3B]", Storage="__3B", DbType="Int")]
		public System.Nullable<int> _3B
		{
			get
			{
				return this.@__3B;
			}
			set
			{
				if ((this.@__3B != value))
				{
					this.@__3B = value;
				}
			}
		}
		
		[Column(Storage="_HBP", DbType="Int")]
		public System.Nullable<int> HBP
		{
			get
			{
				return this._HBP;
			}
			set
			{
				if ((this._HBP != value))
				{
					this._HBP = value;
				}
			}
		}
		
		[Column(Storage="_SF", DbType="Int")]
		public System.Nullable<int> SF
		{
			get
			{
				return this._SF;
			}
			set
			{
				if ((this._SF != value))
				{
					this._SF = value;
				}
			}
		}
	}
	
	public partial class GetWaiversPitchersYearlyResult
	{
		
		private string _Name;
		
		private int _Player;
		
		private System.Nullable<int> _Team;
		
		private System.Nullable<int> _League;
		
		private int _Position;
		
		private System.Nullable<int> _W;
		
		private System.Nullable<int> _SV;
		
		private System.Nullable<int> _SO;
		
		private System.Nullable<int> _OUTS;
		
		private System.Nullable<int> _ER;
		
		private System.Nullable<int> _BB;
		
		private System.Nullable<int> _H;
		
		private System.Nullable<int> _HLD;
		
		public GetWaiversPitchersYearlyResult()
		{
		}
		
		[Column(Storage="_Name", DbType="VarChar(100)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[Column(Storage="_Player", DbType="Int NOT NULL")]
		public int Player
		{
			get
			{
				return this._Player;
			}
			set
			{
				if ((this._Player != value))
				{
					this._Player = value;
				}
			}
		}
		
		[Column(Storage="_Team", DbType="Int")]
		public System.Nullable<int> Team
		{
			get
			{
				return this._Team;
			}
			set
			{
				if ((this._Team != value))
				{
					this._Team = value;
				}
			}
		}
		
		[Column(Storage="_League", DbType="Int")]
		public System.Nullable<int> League
		{
			get
			{
				return this._League;
			}
			set
			{
				if ((this._League != value))
				{
					this._League = value;
				}
			}
		}
		
		[Column(Storage="_Position", DbType="Int NOT NULL")]
		public int Position
		{
			get
			{
				return this._Position;
			}
			set
			{
				if ((this._Position != value))
				{
					this._Position = value;
				}
			}
		}
		
		[Column(Storage="_W", DbType="Int")]
		public System.Nullable<int> W
		{
			get
			{
				return this._W;
			}
			set
			{
				if ((this._W != value))
				{
					this._W = value;
				}
			}
		}
		
		[Column(Storage="_SV", DbType="Int")]
		public System.Nullable<int> SV
		{
			get
			{
				return this._SV;
			}
			set
			{
				if ((this._SV != value))
				{
					this._SV = value;
				}
			}
		}
		
		[Column(Storage="_SO", DbType="Int")]
		public System.Nullable<int> SO
		{
			get
			{
				return this._SO;
			}
			set
			{
				if ((this._SO != value))
				{
					this._SO = value;
				}
			}
		}
		
		[Column(Storage="_OUTS", DbType="Int")]
		public System.Nullable<int> OUTS
		{
			get
			{
				return this._OUTS;
			}
			set
			{
				if ((this._OUTS != value))
				{
					this._OUTS = value;
				}
			}
		}
		
		[Column(Storage="_ER", DbType="Int")]
		public System.Nullable<int> ER
		{
			get
			{
				return this._ER;
			}
			set
			{
				if ((this._ER != value))
				{
					this._ER = value;
				}
			}
		}
		
		[Column(Storage="_BB", DbType="Int")]
		public System.Nullable<int> BB
		{
			get
			{
				return this._BB;
			}
			set
			{
				if ((this._BB != value))
				{
					this._BB = value;
				}
			}
		}
		
		[Column(Storage="_H", DbType="Int")]
		public System.Nullable<int> H
		{
			get
			{
				return this._H;
			}
			set
			{
				if ((this._H != value))
				{
					this._H = value;
				}
			}
		}
		
		[Column(Storage="_HLD", DbType="Int")]
		public System.Nullable<int> HLD
		{
			get
			{
				return this._HLD;
			}
			set
			{
				if ((this._HLD != value))
				{
					this._HLD = value;
				}
			}
		}
	}
	
	public partial class GetFantasyTeamBattersYearlyResult
	{
		
		private string _Name;
		
		private int _TEAM_ID;
		
		private System.Nullable<int> _Player;
		
		private System.Nullable<int> _Ordinal;
		
		private System.Nullable<int> _Position;
		
		private System.Nullable<int> _R;
		
		private System.Nullable<int> _HR;
		
		private System.Nullable<int> _RBI;
		
		private System.Nullable<int> _SB;
		
		private System.Nullable<int> _BB;
		
		private System.Nullable<int> _AB;
		
		private System.Nullable<int> _H;
		
		private System.Nullable<int> @__2B;
		
		private System.Nullable<int> @__3B;
		
		private System.Nullable<int> _HBP;
		
		private System.Nullable<int> _SF;
		
		public GetFantasyTeamBattersYearlyResult()
		{
		}
		
		[Column(Storage="_Name", DbType="VarChar(100)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[Column(Storage="_TEAM_ID", DbType="Int NOT NULL")]
		public int TEAM_ID
		{
			get
			{
				return this._TEAM_ID;
			}
			set
			{
				if ((this._TEAM_ID != value))
				{
					this._TEAM_ID = value;
				}
			}
		}
		
		[Column(Storage="_Player", DbType="Int")]
		public System.Nullable<int> Player
		{
			get
			{
				return this._Player;
			}
			set
			{
				if ((this._Player != value))
				{
					this._Player = value;
				}
			}
		}
		
		[Column(Storage="_Ordinal", DbType="Int")]
		public System.Nullable<int> Ordinal
		{
			get
			{
				return this._Ordinal;
			}
			set
			{
				if ((this._Ordinal != value))
				{
					this._Ordinal = value;
				}
			}
		}
		
		[Column(Storage="_Position", DbType="Int")]
		public System.Nullable<int> Position
		{
			get
			{
				return this._Position;
			}
			set
			{
				if ((this._Position != value))
				{
					this._Position = value;
				}
			}
		}
		
		[Column(Storage="_R", DbType="Int")]
		public System.Nullable<int> R
		{
			get
			{
				return this._R;
			}
			set
			{
				if ((this._R != value))
				{
					this._R = value;
				}
			}
		}
		
		[Column(Storage="_HR", DbType="Int")]
		public System.Nullable<int> HR
		{
			get
			{
				return this._HR;
			}
			set
			{
				if ((this._HR != value))
				{
					this._HR = value;
				}
			}
		}
		
		[Column(Storage="_RBI", DbType="Int")]
		public System.Nullable<int> RBI
		{
			get
			{
				return this._RBI;
			}
			set
			{
				if ((this._RBI != value))
				{
					this._RBI = value;
				}
			}
		}
		
		[Column(Storage="_SB", DbType="Int")]
		public System.Nullable<int> SB
		{
			get
			{
				return this._SB;
			}
			set
			{
				if ((this._SB != value))
				{
					this._SB = value;
				}
			}
		}
		
		[Column(Storage="_BB", DbType="Int")]
		public System.Nullable<int> BB
		{
			get
			{
				return this._BB;
			}
			set
			{
				if ((this._BB != value))
				{
					this._BB = value;
				}
			}
		}
		
		[Column(Storage="_AB", DbType="Int")]
		public System.Nullable<int> AB
		{
			get
			{
				return this._AB;
			}
			set
			{
				if ((this._AB != value))
				{
					this._AB = value;
				}
			}
		}
		
		[Column(Storage="_H", DbType="Int")]
		public System.Nullable<int> H
		{
			get
			{
				return this._H;
			}
			set
			{
				if ((this._H != value))
				{
					this._H = value;
				}
			}
		}
		
		[Column(Name="[2B]", Storage="__2B", DbType="Int")]
		public System.Nullable<int> _2B
		{
			get
			{
				return this.@__2B;
			}
			set
			{
				if ((this.@__2B != value))
				{
					this.@__2B = value;
				}
			}
		}
		
		[Column(Name="[3B]", Storage="__3B", DbType="Int")]
		public System.Nullable<int> _3B
		{
			get
			{
				return this.@__3B;
			}
			set
			{
				if ((this.@__3B != value))
				{
					this.@__3B = value;
				}
			}
		}
		
		[Column(Storage="_HBP", DbType="Int")]
		public System.Nullable<int> HBP
		{
			get
			{
				return this._HBP;
			}
			set
			{
				if ((this._HBP != value))
				{
					this._HBP = value;
				}
			}
		}
		
		[Column(Storage="_SF", DbType="Int")]
		public System.Nullable<int> SF
		{
			get
			{
				return this._SF;
			}
			set
			{
				if ((this._SF != value))
				{
					this._SF = value;
				}
			}
		}
	}
	
	public partial class GetFantasyTeamPitchersYearlyResult
	{
		
		private string _Name;
		
		private int _TEAM_ID;
		
		private System.Nullable<int> _Player;
		
		private System.Nullable<int> _Ordinal;
		
		private System.Nullable<int> _Position;
		
		private System.Nullable<int> _W;
		
		private System.Nullable<int> _SV;
		
		private System.Nullable<int> _SO;
		
		private System.Nullable<int> _OUTS;
		
		private System.Nullable<int> _ER;
		
		private System.Nullable<int> _BB;
		
		private System.Nullable<int> _H;
		
		private System.Nullable<int> _HLD;
		
		public GetFantasyTeamPitchersYearlyResult()
		{
		}
		
		[Column(Storage="_Name", DbType="VarChar(100)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[Column(Storage="_TEAM_ID", DbType="Int NOT NULL")]
		public int TEAM_ID
		{
			get
			{
				return this._TEAM_ID;
			}
			set
			{
				if ((this._TEAM_ID != value))
				{
					this._TEAM_ID = value;
				}
			}
		}
		
		[Column(Storage="_Player", DbType="Int")]
		public System.Nullable<int> Player
		{
			get
			{
				return this._Player;
			}
			set
			{
				if ((this._Player != value))
				{
					this._Player = value;
				}
			}
		}
		
		[Column(Storage="_Ordinal", DbType="Int")]
		public System.Nullable<int> Ordinal
		{
			get
			{
				return this._Ordinal;
			}
			set
			{
				if ((this._Ordinal != value))
				{
					this._Ordinal = value;
				}
			}
		}
		
		[Column(Storage="_Position", DbType="Int")]
		public System.Nullable<int> Position
		{
			get
			{
				return this._Position;
			}
			set
			{
				if ((this._Position != value))
				{
					this._Position = value;
				}
			}
		}
		
		[Column(Storage="_W", DbType="Int")]
		public System.Nullable<int> W
		{
			get
			{
				return this._W;
			}
			set
			{
				if ((this._W != value))
				{
					this._W = value;
				}
			}
		}
		
		[Column(Storage="_SV", DbType="Int")]
		public System.Nullable<int> SV
		{
			get
			{
				return this._SV;
			}
			set
			{
				if ((this._SV != value))
				{
					this._SV = value;
				}
			}
		}
		
		[Column(Storage="_SO", DbType="Int")]
		public System.Nullable<int> SO
		{
			get
			{
				return this._SO;
			}
			set
			{
				if ((this._SO != value))
				{
					this._SO = value;
				}
			}
		}
		
		[Column(Storage="_OUTS", DbType="Int")]
		public System.Nullable<int> OUTS
		{
			get
			{
				return this._OUTS;
			}
			set
			{
				if ((this._OUTS != value))
				{
					this._OUTS = value;
				}
			}
		}
		
		[Column(Storage="_ER", DbType="Int")]
		public System.Nullable<int> ER
		{
			get
			{
				return this._ER;
			}
			set
			{
				if ((this._ER != value))
				{
					this._ER = value;
				}
			}
		}
		
		[Column(Storage="_BB", DbType="Int")]
		public System.Nullable<int> BB
		{
			get
			{
				return this._BB;
			}
			set
			{
				if ((this._BB != value))
				{
					this._BB = value;
				}
			}
		}
		
		[Column(Storage="_H", DbType="Int")]
		public System.Nullable<int> H
		{
			get
			{
				return this._H;
			}
			set
			{
				if ((this._H != value))
				{
					this._H = value;
				}
			}
		}
		
		[Column(Storage="_HLD", DbType="Int")]
		public System.Nullable<int> HLD
		{
			get
			{
				return this._HLD;
			}
			set
			{
				if ((this._HLD != value))
				{
					this._HLD = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
