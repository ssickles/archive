<UserControl 
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" 
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" 
    xmlns:System="clr-namespace:System;assembly=mscorlib" 
    xmlns:Core_WPF="clr-namespace:Core.WPF;assembly=Core" 
    x:Class="PartOne" HorizontalAlignment="Stretch" 
    VerticalAlignment="Stretch" 
    xmlns:Microsoft_Windows_Themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero">
    
	<UserControl.Resources>
		<LinearGradientBrush x:Key="MouseOverBrush" EndPoint="0,1" StartPoint="0,0">
		    <GradientStop Color="#FFF" Offset="0.0"/>
		    <GradientStop Color="#AAA" Offset="1.0"/>
	    </LinearGradientBrush>
	
		<SolidColorBrush x:Key="CheckBoxFillNormal" Color="#F4F4F4"/>
		<SolidColorBrush x:Key="CheckBoxStroke" Color="#8E8F8F"/>
		<Style x:Key="EmptyCheckBoxFocusVisual">
			<Setter Property="Control.Template">
				<Setter.Value>
					<ControlTemplate>
						<Rectangle SnapsToDevicePixels="true" Margin="1" Stroke="Black" StrokeDashArray="1 2" StrokeThickness="1"/>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<Style x:Key="CheckRadioFocusVisual">
			<Setter Property="Control.Template">
				<Setter.Value>
					<ControlTemplate>
						<Rectangle SnapsToDevicePixels="true" Margin="14,0,0,0" Stroke="Black" StrokeDashArray="1 2" StrokeThickness="1"/>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<Style x:Key="CheckBoxStyle1" TargetType="{x:Type CheckBox}">
			<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
			<Setter Property="Background" Value="{StaticResource CheckBoxFillNormal}"/>
			<Setter Property="BorderBrush" Value="{StaticResource CheckBoxStroke}"/>
			<Setter Property="BorderThickness" Value="1"/>
			<Setter Property="FocusVisualStyle" Value="{StaticResource EmptyCheckBoxFocusVisual}"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type CheckBox}">
						<BulletDecorator SnapsToDevicePixels="true" Background="Transparent">
							<BulletDecorator.Bullet>
								<Microsoft_Windows_Themes:BulletChrome Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" IsChecked="{TemplateBinding IsChecked}" RenderMouseOver="{TemplateBinding IsMouseOver}" RenderPressed="{TemplateBinding IsPressed}"/>
							</BulletDecorator.Bullet>
							<ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True"/>
						</BulletDecorator>
						<ControlTemplate.Triggers>
							<Trigger Property="HasContent" Value="true">
								<Setter Property="FocusVisualStyle" Value="{StaticResource CheckRadioFocusVisual}"/>
								<Setter Property="Padding" Value="4,0,0,0"/>
							</Trigger>
							<Trigger Property="IsEnabled" Value="false">
								<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<Style x:Key="ExpanderHeaderFocusVisual">
			<Setter Property="Control.Template">
				<Setter.Value>
					<ControlTemplate>
						<Border>
							<Rectangle SnapsToDevicePixels="true" Margin="0" Stroke="Black" StrokeDashArray="1 2" StrokeThickness="1"/>
						</Border>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<LinearGradientBrush x:Key="ExpanderArrowFill" EndPoint="0,1" StartPoint="0,0">
			<GradientStop Color="White" Offset="0"/>
			<GradientStop Color="#FFBFBFBF" Offset="0.5"/>
			<GradientStop Color="#FF878787" Offset="1"/>
		</LinearGradientBrush>
		<LinearGradientBrush x:Key="ExpanderArrowHoverFill" EndPoint="0,1" StartPoint="0,0">
			<GradientStop Color="#FFF0F8FE" Offset="0"/>
			<GradientStop Color="#FFE0F3FE" Offset="0.3"/>
			<GradientStop Color="#FF6FA7C5" Offset="1"/>
		</LinearGradientBrush>
		<LinearGradientBrush x:Key="ExpanderArrowPressedFill" EndPoint="0,1" StartPoint="0,0">
			<GradientStop Color="#FFDCF0FA" Offset="0"/>
			<GradientStop Color="#FFC5E6F7" Offset="0.2"/>
			<GradientStop Color="#FF5690D0" Offset="1"/>
		</LinearGradientBrush>
		<Style x:Key="ExpanderDownHeaderStyle" TargetType="{x:Type ToggleButton}">
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type ToggleButton}">
						<Border Padding="{TemplateBinding Padding}">
							<Grid SnapsToDevicePixels="False" Background="Transparent">
								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="19"/>
									<ColumnDefinition Width="*"/>
								</Grid.ColumnDefinitions>
								<Ellipse HorizontalAlignment="Center" x:Name="circle" VerticalAlignment="Center" Width="19" Height="19" Fill="{DynamicResource ExpanderArrowFill}" Stroke="DarkGray"/>
								<Path SnapsToDevicePixels="false" HorizontalAlignment="Center" x:Name="arrow" VerticalAlignment="Center" Stroke="#666" StrokeThickness="2" Data="M 1,1.5 L 4.5,5 L 8,1.5"/>
								<ContentPresenter SnapsToDevicePixels="True" HorizontalAlignment="Left" Margin="4,0,0,0" VerticalAlignment="Center" Grid.Column="1" RecognizesAccessKey="True"/>
							</Grid>
						</Border>
						<ControlTemplate.Triggers>
							<Trigger Property="IsChecked" Value="true">
								<Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
							</Trigger>
							<Trigger Property="IsMouseOver" Value="true">
								<Setter Property="Stroke" TargetName="circle" Value="#FF3C7FB1"/>
								<Setter Property="Fill" TargetName="circle" Value="{DynamicResource ExpanderArrowHoverFill}"/>
								<Setter Property="Stroke" TargetName="arrow" Value="#222"/>
							</Trigger>
							<Trigger Property="IsPressed" Value="true">
								<Setter Property="Stroke" TargetName="circle" Value="#FF526C7B"/>
								<Setter Property="StrokeThickness" TargetName="circle" Value="1.5"/>
								<Setter Property="Fill" TargetName="circle" Value="{DynamicResource ExpanderArrowPressedFill}"/>
								<Setter Property="Stroke" TargetName="arrow" Value="#FF003366"/>
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<Style x:Key="ExpanderRightHeaderStyle" TargetType="{x:Type ToggleButton}">
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type ToggleButton}">
						<Border Padding="{TemplateBinding Padding}">
							<Grid SnapsToDevicePixels="False" Background="Transparent">
								<Grid.RowDefinitions>
									<RowDefinition Height="19"/>
									<RowDefinition Height="*"/>
								</Grid.RowDefinitions>
								<Grid>
									<Grid.LayoutTransform>
										<TransformGroup>
											<TransformGroup.Children>
												<TransformCollection>
													<RotateTransform Angle="-90"/>
												</TransformCollection>
											</TransformGroup.Children>
										</TransformGroup>
									</Grid.LayoutTransform>
									<Ellipse HorizontalAlignment="Center" x:Name="circle" VerticalAlignment="Center" Width="19" Height="19" Fill="{DynamicResource ExpanderArrowFill}" Stroke="DarkGray"/>
									<Path SnapsToDevicePixels="false" HorizontalAlignment="Center" x:Name="arrow" VerticalAlignment="Center" Stroke="#666" StrokeThickness="2" Data="M 1,1.5 L 4.5,5 L 8,1.5"/>
								</Grid>
								<ContentPresenter SnapsToDevicePixels="True" HorizontalAlignment="Center" Margin="0,4,0,0" VerticalAlignment="Top" Grid.Row="1" RecognizesAccessKey="True"/>
							</Grid>
						</Border>
						<ControlTemplate.Triggers>
							<Trigger Property="IsChecked" Value="true">
								<Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
							</Trigger>
							<Trigger Property="IsMouseOver" Value="true">
								<Setter Property="Stroke" TargetName="circle" Value="#FF3C7FB1"/>
								<Setter Property="Fill" TargetName="circle" Value="{DynamicResource ExpanderArrowHoverFill}"/>
								<Setter Property="Stroke" TargetName="arrow" Value="#222"/>
							</Trigger>
							<Trigger Property="IsPressed" Value="true">
								<Setter Property="Stroke" TargetName="circle" Value="#FF526C7B"/>
								<Setter Property="StrokeThickness" TargetName="circle" Value="1.5"/>
								<Setter Property="Fill" TargetName="circle" Value="{DynamicResource ExpanderArrowPressedFill}"/>
								<Setter Property="Stroke" TargetName="arrow" Value="#FF003366"/>
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<Style x:Key="ExpanderUpHeaderStyle" TargetType="{x:Type ToggleButton}">
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type ToggleButton}">
						<Border Padding="{TemplateBinding Padding}">
							<Grid SnapsToDevicePixels="False" Background="Transparent">
								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="19"/>
									<ColumnDefinition Width="*"/>
								</Grid.ColumnDefinitions>
								<Grid>
									<Grid.LayoutTransform>
										<TransformGroup>
											<TransformGroup.Children>
												<TransformCollection>
													<RotateTransform Angle="180"/>
												</TransformCollection>
											</TransformGroup.Children>
										</TransformGroup>
									</Grid.LayoutTransform>
									<Ellipse HorizontalAlignment="Center" x:Name="circle" VerticalAlignment="Center" Width="19" Height="19" Fill="{DynamicResource ExpanderArrowFill}" Stroke="DarkGray"/>
									<Path SnapsToDevicePixels="false" HorizontalAlignment="Center" x:Name="arrow" VerticalAlignment="Center" Stroke="#666" StrokeThickness="2" Data="M 1,1.5 L 4.5,5 L 8,1.5"/>
								</Grid>
								<ContentPresenter SnapsToDevicePixels="True" HorizontalAlignment="Left" Margin="4,0,0,0" VerticalAlignment="Center" Grid.Column="1" RecognizesAccessKey="True"/>
							</Grid>
						</Border>
						<ControlTemplate.Triggers>
							<Trigger Property="IsChecked" Value="true">
								<Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
							</Trigger>
							<Trigger Property="IsMouseOver" Value="true">
								<Setter Property="Stroke" TargetName="circle" Value="#FF3C7FB1"/>
								<Setter Property="Fill" TargetName="circle" Value="{DynamicResource ExpanderArrowHoverFill}"/>
								<Setter Property="Stroke" TargetName="arrow" Value="#222"/>
							</Trigger>
							<Trigger Property="IsPressed" Value="true">
								<Setter Property="Stroke" TargetName="circle" Value="#FF526C7B"/>
								<Setter Property="StrokeThickness" TargetName="circle" Value="1.5"/>
								<Setter Property="Fill" TargetName="circle" Value="{DynamicResource ExpanderArrowPressedFill}"/>
								<Setter Property="Stroke" TargetName="arrow" Value="#FF003366"/>
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<Style x:Key="ExpanderLeftHeaderStyle" TargetType="{x:Type ToggleButton}">
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type ToggleButton}">
						<Border Padding="{TemplateBinding Padding}">
							<Grid SnapsToDevicePixels="False" Background="Transparent">
								<Grid.RowDefinitions>
									<RowDefinition Height="19"/>
									<RowDefinition Height="*"/>
								</Grid.RowDefinitions>
								<Grid>
									<Grid.LayoutTransform>
										<TransformGroup>
											<TransformGroup.Children>
												<TransformCollection>
													<RotateTransform Angle="90"/>
												</TransformCollection>
											</TransformGroup.Children>
										</TransformGroup>
									</Grid.LayoutTransform>
									<Ellipse HorizontalAlignment="Center" x:Name="circle" VerticalAlignment="Center" Width="19" Height="19" Fill="{DynamicResource ExpanderArrowFill}" Stroke="DarkGray"/>
									<Path SnapsToDevicePixels="false" HorizontalAlignment="Center" x:Name="arrow" VerticalAlignment="Center" Stroke="#666" StrokeThickness="2" Data="M 1,1.5 L 4.5,5 L 8,1.5"/>
								</Grid>
								<ContentPresenter SnapsToDevicePixels="True" HorizontalAlignment="Center" Margin="0,4,0,0" VerticalAlignment="Top" Grid.Row="1" RecognizesAccessKey="True"/>
							</Grid>
						</Border>
						<ControlTemplate.Triggers>
							<Trigger Property="IsChecked" Value="true">
								<Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
							</Trigger>
							<Trigger Property="IsMouseOver" Value="true">
								<Setter Property="Stroke" TargetName="circle" Value="#FF3C7FB1"/>
								<Setter Property="Fill" TargetName="circle" Value="{DynamicResource ExpanderArrowHoverFill}"/>
								<Setter Property="Stroke" TargetName="arrow" Value="#222"/>
							</Trigger>
							<Trigger Property="IsPressed" Value="true">
								<Setter Property="Stroke" TargetName="circle" Value="#FF526C7B"/>
								<Setter Property="StrokeThickness" TargetName="circle" Value="1.5"/>
								<Setter Property="Fill" TargetName="circle" Value="{DynamicResource ExpanderArrowPressedFill}"/>
								<Setter Property="Stroke" TargetName="arrow" Value="#FF003366"/>
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<Style x:Key="ExpanderStyle1" TargetType="{x:Type Expander}">
			<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
			<Setter Property="Background" Value="Transparent"/>
			<Setter Property="HorizontalContentAlignment" Value="Stretch"/>
			<Setter Property="VerticalContentAlignment" Value="Stretch"/>
			<Setter Property="BorderBrush" Value="Transparent"/>
			<Setter Property="BorderThickness" Value="1"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type Expander}">
						<Border SnapsToDevicePixels="true" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="3">
							<DockPanel>
								<ToggleButton FontFamily="{TemplateBinding FontFamily}" FontSize="{TemplateBinding FontSize}" FontStretch="{TemplateBinding FontStretch}" FontStyle="{TemplateBinding FontStyle}" FontWeight="{TemplateBinding FontWeight}" Foreground="{TemplateBinding Foreground}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Padding="{TemplateBinding Padding}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" FocusVisualStyle="{StaticResource ExpanderHeaderFocusVisual}" Margin="1" MinHeight="0" MinWidth="0" x:Name="HeaderSite" Style="{StaticResource ExpanderDownHeaderStyle}" Content="{TemplateBinding Header}" ContentTemplate="{TemplateBinding HeaderTemplate}" ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" DockPanel.Dock="Top" IsChecked="{Binding Path=IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"/>
								<ContentPresenter Focusable="false" Visibility="Collapsed" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" x:Name="ExpandSite" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" DockPanel.Dock="Bottom"/>
							</DockPanel>
						</Border>
						<ControlTemplate.Triggers>
							<Trigger Property="IsExpanded" Value="true">
								<Setter Property="Visibility" TargetName="ExpandSite" Value="Visible"/>
							</Trigger>
							<Trigger Property="ExpandDirection" Value="Right">
								<Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Right"/>
								<Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Left"/>
								<Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderRightHeaderStyle}"/>
							</Trigger>
							<Trigger Property="ExpandDirection" Value="Up">
								<Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Top"/>
								<Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Bottom"/>
								<Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderUpHeaderStyle}"/>
							</Trigger>
							<Trigger Property="ExpandDirection" Value="Left">
								<Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Left"/>
								<Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Right"/>
								<Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderLeftHeaderStyle}"/>
							</Trigger>
							<Trigger Property="IsEnabled" Value="false">
								<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
	</UserControl.Resources>
    <DockPanel>
        <ToolBarTray DockPanel.Dock="Top">
            <ToolBar>
                <Core_WPF:CustomToolBarButton x:Name="btnNew" IsEnabled="{Binding Path=IsChecked, ElementName=chkNewIsEnabled}" ShowButtonText="{Binding Path=IsChecked, ElementName=chkNewShowText}" ShowButtonImage="{Binding Path=IsChecked, ElementName=chkNewShowImage}" ButtonLayout="{Binding Path=SelectedValue, ElementName=cboOrientation}" ButtonText="New" EnabledButtonImage="\Resources\Images\New.png" ToolTip="Create new account" DisabledButtonImage="\Resources\Images\NewDisabled.png" />
                <Core_WPF:CustomToolBarButton x:Name="btnSave" IsEnabled="{Binding Path=IsChecked, ElementName=chkSaveIsEnabled}" ShowButtonText="{Binding Path=IsChecked, ElementName=chkSaveShowText}" ShowButtonImage="{Binding Path=IsChecked, ElementName=chkSaveShowImage}" ButtonLayout="{Binding Path=SelectedValue, ElementName=cboOrientation}" ButtonText="Save" EnabledButtonImage="\Resources\Images\Save.png" ToolTip="Save account" DisabledButtonImage="\Resources\Images\SaveDisabled.png" />
                <Separator />
                <Core_WPF:CustomToolBarButton x:Name="btnDelete" IsEnabled="{Binding Path=IsChecked, ElementName=chkDeleteIsEnabled}" ShowButtonText="{Binding Path=IsChecked, ElementName=chkDeleteShowText}" ShowButtonImage="{Binding Path=IsChecked, ElementName=chkDeleteShowImage}" ButtonLayout="{Binding Path=SelectedValue, ElementName=cboOrientation}" ButtonText="Delete" EnabledButtonImage="\Resources\Images\Delete.png" ToolTip="Delete account" DisabledButtonImage="\Resources\Images\DeleteDisabled.png" />
            </ToolBar>
        </ToolBarTray>

        <!--  see http://msdn2.microsoft.com/en-us/library/system.windows.input.keyboardnavigationmode.aspx -->
        <Border Style="{DynamicResource UserControl_Form_Outer_Border}" DockPanel.Dock="Top">

            <StackPanel VerticalAlignment="Stretch">
                <TextBlock DockPanel.Dock="Top" Text="Skinnable Application With Custom ToolBar Buttons" TextWrapping="Wrap" Foreground="{DynamicResource Brush_FormHeadingText}" FontWeight="Bold" FontSize="14" Margin="10,0,0,0" />
        
              <Border Style="{DynamicResource UserControl_Form_Inner_Border}">
                
                    <StackPanel>
                      <Border Width="Auto" Height="Auto" VerticalAlignment="Top" Padding="5,5,5,5" CornerRadius="10,10,10,10" BorderThickness="2,2,2,2" BorderBrush="{DynamicResource Brush_TabItemBackgroundBorder}" Background="{DynamicResource Brush_BrightBackground}">
                        
		                    <StackPanel Orientation="Horizontal" Width="Auto" Background="{x:Null}">
			                    <TextBlock Text="New Button" Margin="0,0,0,0" VerticalAlignment="Center" FontWeight="Bold" Foreground="{DynamicResource Brush_DarkHeadingText}" Width="83" />

                          <CheckBox x:Name="chkNewIsEnabled" Content="Enable" IsChecked="True" Margin="10,0,0,0" VerticalAlignment="Center" Foreground="{DynamicResource Brush_TextForeground}" Style="{DynamicResource CheckBoxStyle1}" />
			                    <CheckBox x:Name="chkNewShowText" Content="Show Text" IsChecked="True" Margin="10,0,0,0" VerticalAlignment="Center" Foreground="{DynamicResource Brush_TextForeground}" />
			                    <CheckBox x:Name="chkNewShowImage" Content="Show Image" IsChecked="True" Margin="10,0,0,0" VerticalAlignment="Center" Foreground="{DynamicResource Brush_TextForeground}" />
		                    </StackPanel>
	                    </Border>
                        
                      <Border Margin="0,15,0,0" Width="Auto" Height="Auto" VerticalAlignment="Top" Padding="5,5,5,5" CornerRadius="10,10,10,10" BorderThickness="2,2,2,2" BorderBrush="{DynamicResource Brush_TabItemBackgroundBorder}" Background="{DynamicResource Brush_BrightBackground}">
                        
		                    <StackPanel Orientation="Horizontal" Width="Auto" Background="{x:Null}">
			                    <TextBlock Text="Save Button" Margin="0,0,0,0" VerticalAlignment="Center" FontWeight="Bold" Foreground="{DynamicResource Brush_DarkHeadingText}" Width="83" />
                          
			                    <CheckBox x:Name="chkSaveIsEnabled" Content="Enable" IsChecked="True" Margin="10,0,0,0" VerticalAlignment="Center" Foreground="{DynamicResource Brush_TextForeground}" />
                          
			                    <CheckBox x:Name="chkSaveShowText" Content="Show Text" IsChecked="False" Margin="10,0,0,0" VerticalAlignment="Center" Foreground="{DynamicResource Brush_TextForeground}" />
			                    <CheckBox x:Name="chkSaveShowImage" Content="Show Image" IsChecked="True" Margin="10,0,0,0" VerticalAlignment="Center" Foreground="{DynamicResource Brush_TextForeground}" />
		                    </StackPanel>
	                    </Border>
                        
                      <Border Margin="0,15,0,0" Width="Auto" Height="Auto" VerticalAlignment="Top" Padding="5,5,5,5" CornerRadius="10,10,10,10" BorderThickness="2,2,2,2" BorderBrush="{DynamicResource Brush_TabItemBackgroundBorder}" Background="{DynamicResource Brush_BrightBackground}">
                        
		                    <StackPanel Orientation="Horizontal" Width="Auto" Background="{x:Null}">
			                    <TextBlock Text="Delete Button" Margin="0,0,0,0" VerticalAlignment="Center" FontWeight="Bold" Foreground="{DynamicResource Brush_DarkHeadingText}" Width="83" />
			                    <CheckBox x:Name="chkDeleteIsEnabled" Content="Enable" IsChecked="True" Margin="10,0,0,0" VerticalAlignment="Center" Foreground="{DynamicResource Brush_TextForeground}" />
			                    <CheckBox x:Name="chkDeleteShowText" Content="Show Text" IsChecked="False" Margin="10,0,0,0" VerticalAlignment="Center" Foreground="{DynamicResource Brush_TextForeground}" />
			                    <CheckBox x:Name="chkDeleteShowImage" Content="Show Image" IsChecked="True" Margin="10,0,0,0" VerticalAlignment="Center" Foreground="{DynamicResource Brush_TextForeground}" />
		                    </StackPanel>
	                    </Border>

                      <Border Margin="0,15,0,0" Width="Auto" Height="Auto" VerticalAlignment="Top" Padding="5,5,5,5" CornerRadius="10,10,10,10" BorderThickness="2,2,2,2" BorderBrush="{DynamicResource Brush_TabItemBackgroundBorder}" Background="{DynamicResource Brush_BrightBackground}">
                        
		                    <StackPanel Orientation="Horizontal" Width="Auto" Background="{x:Null}">
			                    <TextBlock Text="Orientation" Margin="0,0,0,0" VerticalAlignment="Center" FontWeight="Bold" Foreground="{DynamicResource Brush_DarkHeadingText}" Width="83" />
                          
                          <ComboBox x:Name="cboOrientation" SelectedIndex="0" VerticalAlignment="Center" Margin="10,0,0,0">
                              <System:String>Horizontal</System:String>
                              <System:String>Vertical</System:String>
                          </ComboBox>                                
		                    </StackPanel>
	                    </Border>
                    </StackPanel>
                </Border>
            </StackPanel>
        </Border>
    </DockPanel>

</UserControl>
