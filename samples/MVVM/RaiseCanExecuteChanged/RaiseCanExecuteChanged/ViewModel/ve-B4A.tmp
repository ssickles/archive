using System;
using System.Collections.ObjectModel;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.Windows;
using GalaSoft.MvvmLight;
using GalaSoft.MvvmLight.Command;
using GalaSoft.MvvmLight.Messaging;
using GalaSoft.Samples.RaiseCanExecuteChanged.Properties;
using System.Threading;
using System.Windows.Threading;

namespace GalaSoft.Samples.RaiseCanExecuteChanged.ViewModel
{
    /// <summary>
    /// See http://www.galasoft.ch/mvvm/getstarted
    /// </summary>
    public class MainViewModel : ViewModelBase
    {
        /// <summary>
        /// The <see cref="Counter" /> property's name.
        /// </summary>
        public const string CounterPropertyName = "Counter";

        private int _counter;

        /// <summary>
        /// Gets the Counter property.
        /// Changes to that property's value raise the PropertyChanged event. 
        /// </summary>
        public int Counter
        {
            get
            {
                return _counter;
            }

            private set
            {
                if (_counter == value)
                {
                    return;
                }

                _counter = value;

                // Update bindings, no broadcast
                RaisePropertyChanged(CounterPropertyName);
            }
        }

        public RelayCommand IncreaseCounterCommand
        {
            get;
            private set;
        }

        /// <summary>
        /// The <see cref="CanIncrement" /> property's name.
        /// </summary>
        public const string CanIncrementPropertyName = "CanIncrement";

        private bool _canIncrement = true;

        /// <summary>
        /// Gets the CanIncrement property.
        /// Changes to that property's value raise the PropertyChanged event. 
        /// </summary>
        public bool CanIncrement
        {
            get
            {
                return _canIncrement;
            }

            set
            {
                if (_canIncrement == value)
                {
                    return;
                }

                _canIncrement = value;

                // Update bindings, no broadcast
                RaisePropertyChanged(CanIncrementPropertyName);

                IncreaseCounterCommand.RaiseCanExecuteChanged(true);
            }
        }

        /// <summary>
        /// The <see cref="CanIncrementOverride" /> property's name.
        /// </summary>
        public const string CanIncrementOverridePropertyName = "CanIncrementOverride";

        private bool _canIncrementOverride = false;

        /// <summary>
        /// Gets the CanIncrementOverride property.
        /// Changes to that property's value raise the PropertyChanged event. 
        /// </summary>
        public bool CanIncrementOverride
        {
            get
            {
                return _canIncrementOverride;
            }

            set
            {
                if (_canIncrementOverride == value)
                {
                    return;
                }

                _canIncrementOverride = value;

                // Update bindings, no broadcast
                RaisePropertyChanged(CanIncrementOverridePropertyName);
            }
        }

        /// <summary>
        /// Initializes a new instance of the MainViewModel class.
        /// </summary>
        public MainViewModel()
        {
            IncreaseCounterCommand = new RelayCommand(
                () => Counter++,
                () => CanIncrementOverride || CanIncrement);

            StartCycleEnableDisable();
        }

        private void StartCycleEnableDisable()
        {
            ThreadPool.QueueUserWorkItem(o =>
            {
                Thread.Sleep(3000);
                App.UiDispatcher.BeginInvoke((ThreadStart)(() => CanIncrement = !CanIncrement));
                StartCycleEnableDisable();
            });
        }
    }
}