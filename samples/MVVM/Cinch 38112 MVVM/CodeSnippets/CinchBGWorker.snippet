<?xml version="1.0" encoding="utf-8" ?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>8. Cinch: Background worker</Title>
      <Shortcut>cinch</Shortcut>
      <Description>Code snippet for a Background worker</Description>
      <Author>Manuvdp.be for Sacha Barber</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>type</ID>
          <ToolTip>Command Type</ToolTip>
          <Default>int</Default>
        </Literal>
        <Literal>
          <ID>model</ID>
          <ToolTip>Model object</ToolTip>
          <Default>MyModel</Default>
        </Literal>
        <Literal>
          <ID>bgWorkerField</ID>
          <ToolTip>Background WorkerField</ToolTip>
          <Default>bgWorker</Default>
        </Literal>
        <Literal>
          <ID>bgWorker</ID>
          <ToolTip>Background Worker Property</ToolTip>
          <Default>BgWorker</Default>
        </Literal>
        <Literal>
          <ID>ownerclass</ID>
          <ToolTip>The owning class of this property (which is typically the class in which it is declared).</ToolTip>
          <Default>ownerclass</Default>
          <Function>ClassName()</Function>
        </Literal>
        <Literal>
          <ID>collectionItemObj</ID>
          <ToolTip>The collection model item object</ToolTip>
          <Default>myItemModel</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp">
        <![CDATA[
        private BackgroundTaskManager<DispatcherNotifiedObservableCollection<$model$>> $bgWorkerField$ = null;

        static PropertyChangedEventArgs $bgWorkerField$ChangeArgs = ObservableHelper.CreateArgs<$ownerclass$>(x => x.$bgWorker$);

        public BackgroundTaskManager<DispatcherNotifiedObservableCollection<$model$>> $bgWorker$
        {
            get { return $bgWorkerField$; }
            set
            {
                $bgWorkerField$ = value;
                NotifyPropertyChanged($bgWorkerField$ChangeArgs);
            }
        }
        private void SetUp$bgWorker$()
        {
            $bgWorkerField$ = new BackgroundTaskManager<DispatcherNotifiedObservableCollection<$model$>>(
                () =>
                {
                    return null;
                },
                (result) =>
                {

                    
                });
        }
 
 
 
         $bgWorkerField$.RunBackgroundTask();
$end$]]>
      </Code>
    </Snippet>
  </CodeSnippet>
</CodeSnippets>