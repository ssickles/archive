<?xml version="1.0" encoding="utf-8" ?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>1. Cinch: INotifyPropertyChanged for reference type</Title>
      <Shortcut>cinch</Shortcut>
      <Description>Code snippet for a property using INotifyPropertyChanged for reference types</Description>
      <Author>Manuvdp.be for Sacha Barber</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>type</ID>
          <ToolTip>Property Type</ToolTip>
          <Default>object</Default>
        </Literal>
        <Literal>
          <ID>property</ID>
          <ToolTip>Property Name</ToolTip>
          <Default>MyProperty</Default>
        </Literal>
        <Literal>
          <ID>propfield</ID>
          <ToolTip>Property Field</ToolTip>
          <Default>myField</Default>
        </Literal>
        <Literal>
          <ID>ownerclass</ID>
          <ToolTip>The owning class of this property (which is typically the class in which it is declared).</ToolTip>
          <Default>ownerclass</Default>
          <Function>ClassName()</Function>
        </Literal>
      </Declarations>
<Code Language="csharp">
<![CDATA[
#region Property $property$
private $type$ $propfield$;
public static readonly PropertyChangedEventArgs $propfield$EventArgs = ObservableHelper.CreateArgs<$ownerclass$>(x => x.$property$);
public $type$ $property$
{
get { return $propfield$; }
set
{

if (object.ReferenceEquals($propfield$, value)) return;
$propfield$ = value;
NotifyPropertyChanged($propfield$EventArgs);
}
}
#endregion
$end$]]>
</Code>
</Snippet>
</CodeSnippet>
</CodeSnippets>