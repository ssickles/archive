<?xml version="1.0" encoding="utf-8" ?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>9. Cinch: ViewMode</Title>
      <Shortcut>cinch</Shortcut>
      <Description>Code snippet for ViewMode</Description>
      <Author>Manuvdp.be for Sacha Barber</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>type</ID>
          <ToolTip>Property Type</ToolTip>
          <Default>object</Default>
        </Literal>
        <Literal>
          <ID>property</ID>
          <ToolTip>Property Name</ToolTip>
          <Default>MyProperty</Default>
        </Literal>
        <Literal>
          <ID>ownerclass</ID>
          <ToolTip>The owning class of this property (which is typically the class in which it is declared).</ToolTip>
          <Default>ownerclass</Default>
          <Function>ClassName()</Function>
        </Literal>
      </Declarations>
      <Code Language="csharp">
        <![CDATA[
      /// <summary>
        /// The current ViewMode, when changed will loop
        /// through all nested DataWrapper objects and change
        /// their state also
        /// </summary>
        static PropertyChangedEventArgs currentViewModeChangeArgs =
            ObservableHelper.CreateArgs<$ownerclass$>(x => x.CurrentViewMode);
        private ViewMode currentViewMode = ViewMode.AddMode;
        public ViewMode CurrentViewMode
        {
            get { return currentViewMode; }
            set
            {
                currentViewMode = value;

                switch (currentViewMode)
                {
                    case ViewMode.AddMode:
                        Current$property$ = new $property$Model();
                        this.DisplayName = "Add $property$";
                        break;
                    case ViewMode.EditMode:
                        Current$property$.BeginEdit();
                        this.DisplayName = "Edit $property$";
                        break;
                    case ViewMode.ViewOnlyMode:
                        this.DisplayName = "View $property$";
                        break;
                }

                //Now change all the Current$property$.CachedListOfDataWrappers
                //Which sets all the Cinch.DataWrapper<T>s to the correct IsEditable
                //state based on the new ViewMode applied to the ViewModel
                //we can use the Cinch.DataWrapperHelper class for this
                DataWrapperHelper.SetMode(Current$property$.CachedListOfDataWrappers, currentViewMode);

                NotifyPropertyChanged(currentViewModeChangeArgs);
            }
        }

$end$]]>
      </Code>
    </Snippet>
  </CodeSnippet>
</CodeSnippets>