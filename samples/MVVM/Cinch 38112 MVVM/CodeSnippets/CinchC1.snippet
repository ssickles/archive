<?xml version="1.0" encoding="utf-8" ?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>7. Cinch: Command</Title>
      <Shortcut>cinch</Shortcut>
      <Description>Code snippet for a Command with the SimpleCommand</Description>
      <Author>Manuvdp.be for Sacha Barber</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>type</ID>
          <ToolTip>Command Type</ToolTip>
          <Default>int</Default>
        </Literal>
        <Literal>
          <ID>command</ID>
          <ToolTip>Command Name</ToolTip>
          <Default>SaveCommand</Default>
        </Literal>
        <Literal>
          <ID>commandfield</ID>
          <ToolTip>Command Field</ToolTip>
          <Default>saveField</Default>
        </Literal>
        <Literal>
          <ID>ownerclass</ID>
          <ToolTip>The owning class of this property (which is typically the class in which it is declared).</ToolTip>
          <Default>ownerclass</Default>
          <Function>ClassName()</Function>
        </Literal>
        <Literal>
          <ID>collectionItemObj</ID>
          <ToolTip>The collection model item object</ToolTip>
          <Default>myItemModel</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp">
        <![CDATA[
        private SimpleCommand $commandfield$Command;
        public SimpleCommand $command$Command
        {
            get { return $commandfield$Command; }
        }
         #region $command$Command
        /// <summary>
        /// Logic to determine if $command$Command can execute
        /// </summary>
        private Boolean CanExecute$command$Command
        {
            get{return true;}
        }

        /// <summary>
        /// Executes the $command$Command
        /// </summary>
        private void Execute$command$Command()
        {
            try
            {
               $command$Command.CommandSucceeded = false;
               $command$Command.CommandSucceeded = true;
            }
            catch (Exception ex)
            {
                Logger.Error( ex);
                messageBoxService.ShowError("$command$Command Error:"+ex.Message);
            }
        }
        #endregion

        $commandfield$Command = new SimpleCommand
            {
                CanExecuteDelegate = x => CanExecute$command$Command,
                ExecuteDelegate = x => Execute$command$Command()
            };
$end$]]>
      </Code>
    </Snippet>
  </CodeSnippet>
</CodeSnippets>