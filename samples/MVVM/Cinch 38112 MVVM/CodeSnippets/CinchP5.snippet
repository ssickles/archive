<?xml version="1.0" encoding="utf-8" ?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>5. Cinch: INotifyPropertyChanged for collections</Title>
      <Shortcut>cinch</Shortcut>
      <Description>Code snippet for a property using INotifyPropertyChanged for collections</Description>
      <Author>Manuvdp.be for Sacha Barber</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>type</ID>
          <ToolTip>Property Type</ToolTip>
          <Default>int</Default>
        </Literal>
        <Literal>
          <ID>property</ID>
          <ToolTip>Property Name</ToolTip>
          <Default>MyProperty</Default>
        </Literal>
        <Literal>
          <ID>propfield</ID>
          <ToolTip>Property Field</ToolTip>
          <Default>myField</Default>
        </Literal>
        <Literal>
          <ID>ownerclass</ID>
          <ToolTip>The owning class of this property (which is typically the class in which it is declared).</ToolTip>
          <Default>ownerclass</Default>
          <Function>ClassName()</Function>
        </Literal>
        <Literal>
          <ID>collectionItemObj</ID>
          <ToolTip>The collection model item object</ToolTip>
          <Default>myItemModel</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp">
        <![CDATA[
        #region Property $property$
        /// <summary>
        /// $property$
        /// </summary>
        static PropertyChangedEventArgs $propfield$ChangeArgs =
            ObservableHelper.CreateArgs<$ownerclass$>(x => x.$property$);
        private DispatcherNotifiedObservableCollection<$collectionItemObj$> $propfield$ = new DispatcherNotifiedObservableCollection<$collectionItemObj$>();
        public DispatcherNotifiedObservableCollection<$collectionItemObj$> $property$
        {
            get { return $propfield$; }
            set
            {
                $propfield$ = value;
                NotifyPropertyChanged($propfield$ChangeArgs);
                Has$property$ = $propfield$.Count > 0;
            }
        }
        
        
         /// <summary>
        /// Has$property$
        /// </summary>
        static readonly PropertyChangedEventArgs Has$property$ChangeArgs = ObservableHelper.CreateArgs<$ownerclass$>(x => x.Has$property$);
        private Boolean Has$property$;
        public Boolean Has$property$
        {
            get { return Has$property$; }
            set
            {
                Has$property$ = value;
                NotifyPropertyChanged(Has$property$ChangeArgs);
            }
        }
        #endregion
$end$]]>
      </Code>
    </Snippet>
  </CodeSnippet>
</CodeSnippets>