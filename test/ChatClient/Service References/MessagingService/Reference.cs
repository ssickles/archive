//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3082
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ChatClient.MessagingService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MessagingService.IChat", CallbackContract=typeof(IChatCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IChat {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChat/Subscribe", ReplyAction="http://tempuri.org/IChat/SubscribeResponse")]
        void Subscribe();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IChat/Subscribe", ReplyAction="http://tempuri.org/IChat/SubscribeResponse")]
        System.IAsyncResult BeginSubscribe(System.AsyncCallback callback, object asyncState);
        
        void EndSubscribe(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsTerminating=true, Action="http://tempuri.org/IChat/Unsubscribe", ReplyAction="http://tempuri.org/IChat/UnsubscribeResponse")]
        void Unsubscribe();
        
        [System.ServiceModel.OperationContractAttribute(IsTerminating=true, AsyncPattern=true, Action="http://tempuri.org/IChat/Unsubscribe", ReplyAction="http://tempuri.org/IChat/UnsubscribeResponse")]
        System.IAsyncResult BeginUnsubscribe(System.AsyncCallback callback, object asyncState);
        
        void EndUnsubscribe(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChat/PostMessage")]
        void PostMessage(System.Guid ClientId, string Message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IChat/PostMessage")]
        System.IAsyncResult BeginPostMessage(System.Guid ClientId, string Message, System.AsyncCallback callback, object asyncState);
        
        void EndPostMessage(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public interface IChatCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChat/MessagePosted")]
        void MessagePosted(System.Guid ClientId, string Message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IChat/MessagePosted")]
        System.IAsyncResult BeginMessagePosted(System.Guid ClientId, string Message, System.AsyncCallback callback, object asyncState);
        
        void EndMessagePosted(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public interface IChatChannel : IChat, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class ChatClient : System.ServiceModel.DuplexClientBase<IChat>, IChat {
        
        private BeginOperationDelegate onBeginSubscribeDelegate;
        
        private EndOperationDelegate onEndSubscribeDelegate;
        
        private System.Threading.SendOrPostCallback onSubscribeCompletedDelegate;
        
        private BeginOperationDelegate onBeginUnsubscribeDelegate;
        
        private EndOperationDelegate onEndUnsubscribeDelegate;
        
        private System.Threading.SendOrPostCallback onUnsubscribeCompletedDelegate;
        
        private BeginOperationDelegate onBeginPostMessageDelegate;
        
        private EndOperationDelegate onEndPostMessageDelegate;
        
        private System.Threading.SendOrPostCallback onPostMessageCompletedDelegate;
        
        public ChatClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ChatClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ChatClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChatClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChatClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SubscribeCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UnsubscribeCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> PostMessageCompleted;
        
        public void Subscribe() {
            base.Channel.Subscribe();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSubscribe(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSubscribe(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndSubscribe(System.IAsyncResult result) {
            base.Channel.EndSubscribe(result);
        }
        
        private System.IAsyncResult OnBeginSubscribe(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginSubscribe(callback, asyncState);
        }
        
        private object[] OnEndSubscribe(System.IAsyncResult result) {
            this.EndSubscribe(result);
            return null;
        }
        
        private void OnSubscribeCompleted(object state) {
            if ((this.SubscribeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SubscribeCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SubscribeAsync() {
            this.SubscribeAsync(null);
        }
        
        public void SubscribeAsync(object userState) {
            if ((this.onBeginSubscribeDelegate == null)) {
                this.onBeginSubscribeDelegate = new BeginOperationDelegate(this.OnBeginSubscribe);
            }
            if ((this.onEndSubscribeDelegate == null)) {
                this.onEndSubscribeDelegate = new EndOperationDelegate(this.OnEndSubscribe);
            }
            if ((this.onSubscribeCompletedDelegate == null)) {
                this.onSubscribeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSubscribeCompleted);
            }
            base.InvokeAsync(this.onBeginSubscribeDelegate, null, this.onEndSubscribeDelegate, this.onSubscribeCompletedDelegate, userState);
        }
        
        public void Unsubscribe() {
            base.Channel.Unsubscribe();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUnsubscribe(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUnsubscribe(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndUnsubscribe(System.IAsyncResult result) {
            base.Channel.EndUnsubscribe(result);
        }
        
        private System.IAsyncResult OnBeginUnsubscribe(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginUnsubscribe(callback, asyncState);
        }
        
        private object[] OnEndUnsubscribe(System.IAsyncResult result) {
            this.EndUnsubscribe(result);
            return null;
        }
        
        private void OnUnsubscribeCompleted(object state) {
            if ((this.UnsubscribeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UnsubscribeCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UnsubscribeAsync() {
            this.UnsubscribeAsync(null);
        }
        
        public void UnsubscribeAsync(object userState) {
            if ((this.onBeginUnsubscribeDelegate == null)) {
                this.onBeginUnsubscribeDelegate = new BeginOperationDelegate(this.OnBeginUnsubscribe);
            }
            if ((this.onEndUnsubscribeDelegate == null)) {
                this.onEndUnsubscribeDelegate = new EndOperationDelegate(this.OnEndUnsubscribe);
            }
            if ((this.onUnsubscribeCompletedDelegate == null)) {
                this.onUnsubscribeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUnsubscribeCompleted);
            }
            base.InvokeAsync(this.onBeginUnsubscribeDelegate, null, this.onEndUnsubscribeDelegate, this.onUnsubscribeCompletedDelegate, userState);
        }
        
        public void PostMessage(System.Guid ClientId, string Message) {
            base.Channel.PostMessage(ClientId, Message);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginPostMessage(System.Guid ClientId, string Message, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPostMessage(ClientId, Message, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndPostMessage(System.IAsyncResult result) {
            base.Channel.EndPostMessage(result);
        }
        
        private System.IAsyncResult OnBeginPostMessage(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid ClientId = ((System.Guid)(inValues[0]));
            string Message = ((string)(inValues[1]));
            return this.BeginPostMessage(ClientId, Message, callback, asyncState);
        }
        
        private object[] OnEndPostMessage(System.IAsyncResult result) {
            this.EndPostMessage(result);
            return null;
        }
        
        private void OnPostMessageCompleted(object state) {
            if ((this.PostMessageCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PostMessageCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PostMessageAsync(System.Guid ClientId, string Message) {
            this.PostMessageAsync(ClientId, Message, null);
        }
        
        public void PostMessageAsync(System.Guid ClientId, string Message, object userState) {
            if ((this.onBeginPostMessageDelegate == null)) {
                this.onBeginPostMessageDelegate = new BeginOperationDelegate(this.OnBeginPostMessage);
            }
            if ((this.onEndPostMessageDelegate == null)) {
                this.onEndPostMessageDelegate = new EndOperationDelegate(this.OnEndPostMessage);
            }
            if ((this.onPostMessageCompletedDelegate == null)) {
                this.onPostMessageCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPostMessageCompleted);
            }
            base.InvokeAsync(this.onBeginPostMessageDelegate, new object[] {
                        ClientId,
                        Message}, this.onEndPostMessageDelegate, this.onPostMessageCompletedDelegate, userState);
        }
    }
}
